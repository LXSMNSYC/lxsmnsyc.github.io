[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Iterable from './iterable';\n\nexport default Iterable;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/internal/all.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport Iterable from '../iterable';\nimport { IterablePredicateCheck, defineField } from './utils';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('all');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      if (!predicate(i)) {\n        yield false;\n        return;\n      }\n    }\n    yield true;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/all.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/all.js",
    "static": true,
    "longname": "src/internal/all.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/all.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "all",
    "memberof": "src/internal/all.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/all.js~all",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/all.js",
    "importStyle": "all",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/internal/any.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport Iterable from '../iterable';\nimport { IterablePredicateCheck, defineField } from './utils';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('any');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      if (predicate(i)) {\n        yield true;\n        return;\n      }\n    }\n    yield false;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/any.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/any.js",
    "static": true,
    "longname": "src/internal/any.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/any.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "any",
    "memberof": "src/internal/any.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/any.js~any",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/any.js",
    "importStyle": "any",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/internal/average.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, IterableCheck } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('average');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, FIELD);\n  return new Iterable(function* () {\n    let acc = 0;\n    let c = 0;\n\n    for (const i of iterable) {\n      acc += i;\n      c += 1;\n    }\n\n    yield acc / c;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/average.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/average.js",
    "static": true,
    "longname": "src/internal/average.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/average.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "average",
    "memberof": "src/internal/average.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/average.js~average",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/average.js",
    "importStyle": "average",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/internal/breadthFirst.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport Iterable from '../iterable';\nimport { IterableCheck, defineField, isIterable } from './utils';\n\nconst FIELD = defineField('breadthFirst');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n\n  return new Iterable(function* () {\n    const stack = [];\n    stack.push(iterable);\n\n    while (stack.length !== 0) {\n      const top = stack.shift();\n\n      if (isIterable(top)) {\n        for (const i of top) {\n          stack.push(i);\n        }\n      } else {\n        yield top;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/breadthFirst.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/breadthFirst.js",
    "static": true,
    "longname": "src/internal/breadthFirst.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/breadthFirst.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "breadthFirst",
    "memberof": "src/internal/breadthFirst.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/breadthFirst.js~breadthFirst",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/breadthFirst.js",
    "importStyle": "breadthFirst",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/internal/breakWith.js",
    "content": "import { IterablePredicateCheck, defineField } from './utils';\nimport takeUntil from './takeUntil';\nimport skipUntil from './skipUntil';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('breakWith');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return [\n    takeUntil(iterable, predicate),\n    skipUntil(iterable, predicate),\n  ];\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/breakWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/breakWith.js",
    "static": true,
    "longname": "src/internal/breakWith.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/breakWith.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "breakWith",
    "memberof": "src/internal/breakWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/breakWith.js~breakWith",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/breakWith.js",
    "importStyle": "breakWith",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/internal/buffer.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { IterablePositiveNumberCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('buffer');\n/**\n * @ignore\n */\nexport default (iterable, count) => {\n  IterablePositiveNumberCheck(iterable, count, FIELD);\n\n  return new Iterable(function* () {\n    let b = [];\n\n    for (const i of iterable) {\n      b.push(i);\n      if (b.length === count) {\n        yield b;\n        b = [];\n      }\n    }\n    if (b.length > 0) {\n      yield b;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/buffer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/buffer.js",
    "static": true,
    "longname": "src/internal/buffer.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/buffer.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "buffer",
    "memberof": "src/internal/buffer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/buffer.js~buffer",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/buffer.js",
    "importStyle": "buffer",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/internal/cache.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { IterableCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('cache');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n\n  const c = [];\n  let size = 0;\n  return new Iterable(function* () {\n    if (size > 0) {\n      for (const i of c) {\n        yield i;\n      }\n    }\n\n    let s = size;\n\n    for (const i of iterable) {\n      if (s === 0) {\n        c.push(i);\n        size += 1;\n        yield i;\n      } else {\n        s -= 1;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/cache.js",
    "static": true,
    "longname": "src/internal/cache.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/cache.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "cache",
    "memberof": "src/internal/cache.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/cache.js~cache",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/cache.js",
    "importStyle": "cache",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/internal/compose.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport {\n  isIterable, FunctionCheck, IterableCheck, defineField,\n} from './utils';\nimport Iterable from '../iterable';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('compose');\n/**\n * @ignore\n */\nexport default (iterable, ...composers) => {\n  IterableCheck(iterable, 1, FIELD);\n  let i = 1;\n\n  let result = iterable;\n  for (const c of composers) {\n    i += 1;\n    FunctionCheck(c, i, FIELD);\n    result = c(result);\n\n    if (!isIterable(result)) {\n      throw new TypeError('Iterable.compose: a composer function returned a non-Iterable.');\n    }\n  }\n\n  if (result instanceof Iterable) {\n    return result;\n  }\n  return new Iterable(result);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/compose.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/compose.js",
    "static": true,
    "longname": "src/internal/compose.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/compose.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "compose",
    "memberof": "src/internal/compose.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/compose.js~compose",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/compose.js",
    "importStyle": "compose",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "composers",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/internal/concat.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport Iterable from '../iterable';\nimport flat from './flat';\n/**\n * @ignore\n */\nexport default (...iterables) => flat(new Iterable(iterables));\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/concat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "concat",
    "memberof": "src/internal/concat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/concat.js~concat",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/concat.js",
    "importStyle": "concat",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "iterables",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/internal/contains.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { IterableCheck, defineField } from './utils';\nimport map from './map';\nimport indexOf from './indexOf';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('contains');\n/**\n * @ignore\n */\nexport default (iterable, value) => {\n  IterableCheck(iterable, 1, FIELD);\n  return map(indexOf(iterable, value), x => x > -1);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/contains.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/contains.js",
    "static": true,
    "longname": "src/internal/contains.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/contains.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "contains",
    "memberof": "src/internal/contains.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/contains.js~contains",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/contains.js",
    "importStyle": "contains",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/internal/count.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { IterableCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('count');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n\n  return new Iterable(function* () {\n    let c = 0;\n    // eslint-disable-next-line no-unused-vars\n    for (const i of iterable) {\n      c += 1;\n    }\n    yield c;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/count.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/count.js",
    "static": true,
    "longname": "src/internal/count.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/count.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "count",
    "memberof": "src/internal/count.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/count.js~count",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/count.js",
    "importStyle": "count",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/internal/defaultIfEmpty.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport Iterable from '../iterable';\nimport { IterableCheck, defineField } from './utils';\n\nconst FIELD = defineField('defaultIfEmpty');\n/**\n * @ignore\n */\nexport default (iterable, value) => {\n  IterableCheck(iterable, 1, FIELD);\n  return new Iterable(function* () {\n    let flag = true;\n\n    for (const i of iterable) {\n      yield i;\n      flag = false;\n    }\n    if (flag) {\n      yield value;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/defaultIfEmpty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/defaultIfEmpty.js",
    "static": true,
    "longname": "src/internal/defaultIfEmpty.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/defaultIfEmpty.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "defaultIfEmpty",
    "memberof": "src/internal/defaultIfEmpty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/defaultIfEmpty.js~defaultIfEmpty",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/defaultIfEmpty.js",
    "importStyle": "defaultIfEmpty",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/internal/dependency.js",
    "content": "/* eslint-disable import/no-cycle */\nexport { default as all } from './all';\nexport { default as any } from './any';\nexport { default as average } from './average';\nexport { default as breadthFirst } from './breadthFirst';\nexport { default as breakWith } from './breakWith';\nexport { default as buffer } from './buffer';\nexport { default as cache } from './cache';\nexport { default as compose } from './compose';\nexport { default as concat } from './concat';\nexport { default as contains } from './contains';\nexport { default as count } from './count';\nexport { default as defaultIfEmpty } from './defaultIfEmpty';\nexport { default as depthFirst } from './depthFirst';\nexport { default as diff } from './diff';\nexport { default as distinct } from './distinct';\nexport { default as distinctAdjacent } from './distinctAdjacent';\nexport { default as doWhile } from './doWhile';\nexport { default as elementAt } from './elementAt';\nexport { default as empty } from './empty';\nexport { default as equal } from './equal';\nexport { default as filter } from './filter';\nexport { default as find } from './find';\nexport { default as first } from './first';\nexport { default as flat } from './flat';\nexport { default as flatMap } from './flatMap';\nexport { default as ignoreElements } from './ignoreElements';\nexport { default as indexOf } from './indexOf';\nexport { default as innerJoin } from './innerJoin';\nexport { default as intercalate } from './intercalate';\nexport { default as intersect } from './intersect';\nexport { default as intersperse } from './intersperse';\nexport { default as isEmpty } from './isEmpty';\nexport { default as just } from './just';\nexport { default as last } from './last';\nexport { default as leftJoin } from './leftJoin';\nexport { default as map } from './map';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as onDone } from './onDone';\nexport { default as onStart } from './onStart';\nexport { default as onYield } from './onYield';\nexport { default as outerJoin } from './outerJoin';\nexport { default as partition } from './partition';\nexport { default as range } from './range';\nexport { default as reduce } from './reduce';\nexport { default as reduceRight } from './reduceRight';\nexport { default as repeat } from './repeat';\nexport { default as replace } from './replace';\nexport { default as reverse } from './reverse';\nexport { default as scan } from './scan';\nexport { default as scanRight } from './scanRight';\nexport { default as skip } from './skip';\nexport { default as skipLast } from './skipLast';\nexport { default as skipUntil } from './skipUntil';\nexport { default as skipWhile } from './skipWhile';\nexport { default as slice } from './slice';\nexport { default as sort } from './sort';\nexport { default as sorted } from './sorted';\nexport { default as spanWith } from './spanWith';\nexport { default as split } from './split';\nexport { default as startWith } from './startWith';\nexport { default as step } from './step';\nexport { default as sum } from './sum';\nexport { default as take } from './take';\nexport { default as takeLast } from './takeLast';\nexport { default as takeUntil } from './takeUntil';\nexport { default as takeWhile } from './takeWhile';\nexport { default as toArray } from './toArray';\nexport { default as whileDo } from './whileDo';\nexport { default as zip } from './zip';\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/dependency.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/internal/depthFirst.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport Iterable from '../iterable';\nimport { IterableCheck, defineField, isIterable } from './utils';\n\nconst FIELD = defineField('depthFirst');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n\n  return new Iterable(function* () {\n    const stack = [];\n    stack.push(iterable);\n\n    const result = [];\n\n    while (stack.length !== 0) {\n      const top = stack.pop();\n\n      if (isIterable(top)) {\n        for (const i of top) {\n          stack.push(i);\n        }\n      } else {\n        result.push(top);\n      }\n    }\n\n    for (const i of result.reverse()) {\n      yield i;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/depthFirst.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/depthFirst.js",
    "static": true,
    "longname": "src/internal/depthFirst.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/depthFirst.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "depthFirst",
    "memberof": "src/internal/depthFirst.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/depthFirst.js~depthFirst",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/depthFirst.js",
    "importStyle": "depthFirst",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/internal/diff.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, DoubleIterableCheck } from './utils';\nimport Iterable from '../iterable';\nimport toArray from './toArray';\n/**\n * @ignore\n */\nconst FIELD = defineField('diff');\n/**\n * @ignore\n */\nexport default (iterable, other) => {\n  DoubleIterableCheck(iterable, other, FIELD);\n\n  return new Iterable(function* () {\n    const A = toArray(iterable);\n    const B = toArray(other);\n\n    for (const i of A) {\n      if (!B.includes(i)) {\n        yield i;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/diff.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/diff.js",
    "static": true,
    "longname": "src/internal/diff.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/diff.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "diff",
    "memberof": "src/internal/diff.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/diff.js~diff",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/diff.js",
    "importStyle": "diff",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/internal/distinct.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { IterableCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('distinct');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n  return new Iterable(function* () {\n    const buffer = [];\n    for (const i of iterable) {\n      if (!buffer.includes(i)) {\n        yield i;\n      }\n      buffer.push(i);\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/distinct.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/distinct.js",
    "static": true,
    "longname": "src/internal/distinct.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/distinct.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "distinct",
    "memberof": "src/internal/distinct.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/distinct.js~distinct",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/distinct.js",
    "importStyle": "distinct",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/internal/distinctAdjacent.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { IterableCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('distinctAdjacent');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n  return new Iterable(function* () {\n    let first = true;\n    let prev;\n    for (const i of iterable) {\n      if (first) {\n        yield i;\n        first = false;\n      } else if (prev !== i) {\n        yield i;\n      }\n      prev = i;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/distinctAdjacent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/distinctAdjacent.js",
    "static": true,
    "longname": "src/internal/distinctAdjacent.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/distinctAdjacent.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "distinctAdjacent",
    "memberof": "src/internal/distinctAdjacent.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/distinctAdjacent.js~distinctAdjacent",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/distinctAdjacent.js",
    "importStyle": "distinctAdjacent",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/internal/doWhile.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n\nimport Iterable from '../iterable';\nimport { defineField, IterablePredicateCheck } from './utils';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('filter');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    do {\n      for (const i of iterable) {\n        yield i;\n      }\n    } while (predicate());\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/doWhile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/doWhile.js",
    "static": true,
    "longname": "src/internal/doWhile.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/doWhile.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "doWhile",
    "memberof": "src/internal/doWhile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/doWhile.js~doWhile",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/doWhile.js",
    "importStyle": "doWhile",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/internal/elementAt.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport { defineField, IterablePositiveNumberCheck } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('elementAt');\n/**\n * @ignore\n */\nexport default (iterable, index) => {\n  IterablePositiveNumberCheck(iterable, index, FIELD);\n\n  return new Iterable(function* () {\n    let c = 0;\n\n    for (const i of iterable) {\n      if (c === index) {\n        yield i;\n        return;\n      }\n      c += 1;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/elementAt.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/elementAt.js",
    "static": true,
    "longname": "src/internal/elementAt.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/elementAt.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "elementAt",
    "memberof": "src/internal/elementAt.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/elementAt.js~elementAt",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/elementAt.js",
    "importStyle": "elementAt",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/internal/empty.js",
    "content": "import Iterable from '../iterable';\nimport { isUndefined } from './utils';\n\n/**\n * @ignore\n */\nlet INSTANCE;\n/**\n * @ignore\n */\nexport default () => {\n  if (isUndefined(INSTANCE)) {\n    INSTANCE = new Iterable([]);\n  }\n  return INSTANCE;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/empty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "empty",
    "memberof": "src/internal/empty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/empty.js~empty",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/empty.js",
    "importStyle": "empty",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/internal/equal.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { DoubleIterableCheck, defineField } from './utils';\nimport Iterable from '../iterable';\nimport toArray from './toArray';\n/**\n * @ignore\n */\nconst FIELD = defineField('equal');\n/**\n * @ignore\n */\nexport default (iterable, other) => {\n  DoubleIterableCheck(iterable, other, FIELD);\n\n  return new Iterable(function* () {\n    const arr = toArray(iterable);\n\n    for (const i of other) {\n      if (i !== arr.shift()) {\n        yield false;\n        return;\n      }\n    }\n\n    yield arr.length === 0;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/equal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/equal.js",
    "static": true,
    "longname": "src/internal/equal.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/equal.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "equal",
    "memberof": "src/internal/equal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/equal.js~equal",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/equal.js",
    "importStyle": "equal",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/internal/filter.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n\nimport Iterable from '../iterable';\nimport { defineField, IterablePredicateCheck } from './utils';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('filter');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      if (predicate(i)) {\n        yield i;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/filter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/filter.js",
    "static": true,
    "longname": "src/internal/filter.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/filter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "filter",
    "memberof": "src/internal/filter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/filter.js~filter",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/filter.js",
    "importStyle": "filter",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/internal/find.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport Iterable from '../iterable';\nimport { IterablePredicateCheck, defineField } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('find');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    let c = 0;\n    for (const i of iterable) {\n      if (predicate(i)) {\n        yield c;\n        return;\n      }\n      c += 1;\n    }\n    yield -1;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/find.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/find.js",
    "static": true,
    "longname": "src/internal/find.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/find.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "find",
    "memberof": "src/internal/find.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/find.js~find",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/find.js",
    "importStyle": "find",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/internal/first.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport Iterable from '../iterable';\nimport {\n  IterableCheck, defineField, FunctionCheck, isUndefined,\n} from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('first');\n/**\n * @ignore\n */\nconst defaultTest = () => true;\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterableCheck(iterable, 1, FIELD);\n\n  let fn = predicate;\n\n  if (!isUndefined(fn)) {\n    FunctionCheck(predicate, 2, FIELD);\n  } else {\n    fn = defaultTest;\n  }\n\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      if (fn(i)) {\n        yield i;\n        return;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/first.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/first.js",
    "static": true,
    "longname": "src/internal/first.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/first.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "defaultTest",
    "memberof": "src/internal/first.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/first.js~defaultTest",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/first.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "first",
    "memberof": "src/internal/first.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/first.js~first",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/first.js",
    "importStyle": "first",
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/internal/flat.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport Iterable from '../iterable';\nimport { isIterable, defineField, IterableCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('flat');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      if (isIterable(i)) {\n        for (const e of i) {\n          yield e;\n        }\n      } else {\n        yield i;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/flat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/flat.js",
    "static": true,
    "longname": "src/internal/flat.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/flat.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "flat",
    "memberof": "src/internal/flat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/flat.js~flat",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/flat.js",
    "importStyle": "flat",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "src/internal/flatMap.js",
    "content": "import { IterablePredicateCheck, defineField } from './utils';\nimport flat from './flat';\nimport map from './map';\n/**\n * @ignore\n */\nconst FIELD = defineField('flatMap');\n/**\n * @ignore\n */\nexport default (iterable, mapper) => {\n  IterablePredicateCheck(iterable, mapper, FIELD);\n  return flat(map(iterable, mapper));\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/flatMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/flatMap.js",
    "static": true,
    "longname": "src/internal/flatMap.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/flatMap.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "flatMap",
    "memberof": "src/internal/flatMap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/flatMap.js~flatMap",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/flatMap.js",
    "importStyle": "flatMap",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/internal/ignoreElements.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport { defineField, IterableCheck } from './utils';\nimport empty from './empty';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('reverse');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n  return empty();\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/ignoreElements.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/ignoreElements.js",
    "static": true,
    "longname": "src/internal/ignoreElements.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/ignoreElements.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "ignoreElements",
    "memberof": "src/internal/ignoreElements.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/ignoreElements.js~ignoreElements",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/ignoreElements.js",
    "importStyle": "ignoreElements",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/internal/indexOf.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, IterableCheck } from './utils';\nimport find from './find';\n/**\n * @ignore\n */\nconst FIELD = defineField('indexOf');\n/**\n * @ignore\n */\nexport default (iterable, value) => {\n  IterableCheck(iterable, 1, FIELD);\n  return find(iterable, x => x === value);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/indexOf.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/indexOf.js",
    "static": true,
    "longname": "src/internal/indexOf.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/indexOf.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "indexOf",
    "memberof": "src/internal/indexOf.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/indexOf.js~indexOf",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/indexOf.js",
    "importStyle": "indexOf",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/internal/innerJoin.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, DoubleIterableCheck } from './utils';\nimport Iterable from '../iterable';\nimport toArray from './toArray';\n/**\n * @ignore\n */\nconst FIELD = defineField('innerJoin');\n/**\n * @ignore\n */\nexport default (iterable, other) => {\n  DoubleIterableCheck(iterable, other, FIELD);\n\n  return new Iterable(function* () {\n    const A = toArray(iterable);\n    const B = toArray(other);\n\n    for (const i of A) {\n      if (B.includes(i)) {\n        yield i;\n      }\n    }\n\n    for (const o of B) {\n      if (A.includes(o)) {\n        yield o;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/innerJoin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/innerJoin.js",
    "static": true,
    "longname": "src/internal/innerJoin.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/innerJoin.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "innerJoin",
    "memberof": "src/internal/innerJoin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/innerJoin.js~innerJoin",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/innerJoin.js",
    "importStyle": "innerJoin",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/internal/intercalate.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { DoubleIterableCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('intercalate');\n/**\n * @ignore\n */\nexport default (iterable, other) => {\n  DoubleIterableCheck(iterable, other, FIELD);\n  return new Iterable(function* () {\n    const buffer = [];\n    let prev;\n    for (const i of iterable) {\n      buffer.push(i);\n      prev = buffer.slice(0);\n      for (const o of other) {\n        buffer.push(o);\n      }\n    }\n    for (const i of prev) {\n      yield i;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/intercalate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/intercalate.js",
    "static": true,
    "longname": "src/internal/intercalate.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/intercalate.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "intercalate",
    "memberof": "src/internal/intercalate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/intercalate.js~intercalate",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/intercalate.js",
    "importStyle": "intercalate",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/internal/intersect.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, DoubleIterableCheck } from './utils';\nimport Iterable from '../iterable';\nimport toArray from './toArray';\n/**\n * @ignore\n */\nconst FIELD = defineField('intersect');\n/**\n * @ignore\n */\nexport default (iterable, other) => {\n  DoubleIterableCheck(iterable, other, FIELD);\n\n  return new Iterable(function* () {\n    const A = toArray(iterable);\n    const B = toArray(other);\n\n    for (const i of A) {\n      if (B.includes(i)) {\n        yield i;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/intersect.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/intersect.js",
    "static": true,
    "longname": "src/internal/intersect.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/intersect.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "intersect",
    "memberof": "src/internal/intersect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/intersect.js~intersect",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/intersect.js",
    "importStyle": "intersect",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/internal/intersperse.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport { IterableCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('intersperse');\n/**\n * @ignore\n */\nexport default (iterable, value) => {\n  IterableCheck(iterable, 1, FIELD);\n  return new Iterable(function* () {\n    const buffer = [];\n    let prev;\n    for (const i of iterable) {\n      buffer.push(i);\n      prev = buffer.slice(0);\n      buffer.push(value);\n    }\n    for (const i of prev) {\n      yield i;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/intersperse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/intersperse.js",
    "static": true,
    "longname": "src/internal/intersperse.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/intersperse.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "intersperse",
    "memberof": "src/internal/intersperse.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/intersperse.js~intersperse",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/intersperse.js",
    "importStyle": "intersperse",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/internal/isEmpty.js",
    "content": "/* eslint-disable no-unused-vars */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport { IterableCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('isEmpty');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      yield false;\n      return;\n    }\n    yield true;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/isEmpty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/isEmpty.js",
    "static": true,
    "longname": "src/internal/isEmpty.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/isEmpty.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "isEmpty",
    "memberof": "src/internal/isEmpty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/isEmpty.js~isEmpty",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/isEmpty.js",
    "importStyle": "isEmpty",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/internal/just.js",
    "content": "import Iterable from '../iterable';\n\n/**\n * @ignore\n */\nexport default x => new Iterable([x]);\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/just.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "just",
    "memberof": "src/internal/just.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/just.js~just",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/just.js",
    "importStyle": "just",
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/internal/last.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport Iterable from '../iterable';\nimport {\n  defineField, IterableCheck, FunctionCheck, isUndefined,\n} from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('last');\n/**\n * @ignore\n */\nconst defaultTest = () => true;\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterableCheck(iterable, 1, FIELD);\n\n  let fn = predicate;\n\n  if (!isUndefined(fn)) {\n    FunctionCheck(predicate, 2, FIELD);\n  } else {\n    fn = defaultTest;\n  }\n  return new Iterable(function* () {\n    let v;\n    for (const i of iterable) {\n      if (fn(i)) {\n        v = i;\n      }\n    }\n    yield v;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/last.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/last.js",
    "static": true,
    "longname": "src/internal/last.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/last.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "defaultTest",
    "memberof": "src/internal/last.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/last.js~defaultTest",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/last.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "last",
    "memberof": "src/internal/last.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/last.js~last",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/last.js",
    "importStyle": "last",
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/internal/leftJoin.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, DoubleIterableCheck } from './utils';\nimport Iterable from '../iterable';\nimport toArray from './toArray';\n/**\n * @ignore\n */\nconst FIELD = defineField('leftJoin');\n/**\n * @ignore\n */\nexport default (iterable, other) => {\n  DoubleIterableCheck(iterable, other, FIELD);\n\n  return new Iterable(function* () {\n    const A = toArray(iterable);\n    const B = toArray(other);\n\n    for (const i of A) {\n      yield i;\n    }\n\n    for (const o of B) {\n      if (A.includes(o)) {\n        yield o;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/leftJoin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/leftJoin.js",
    "static": true,
    "longname": "src/internal/leftJoin.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/leftJoin.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "leftJoin",
    "memberof": "src/internal/leftJoin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/leftJoin.js~leftJoin",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/leftJoin.js",
    "importStyle": "leftJoin",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/internal/map.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport Iterable from '../iterable';\nimport { defineField, IterablePredicateCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('flatMap');\n/**\n * @ignore\n */\nexport default (iterable, mapper) => {\n  IterablePredicateCheck(iterable, mapper, FIELD);\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      yield mapper(i);\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/map.js",
    "static": true,
    "longname": "src/internal/map.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/map.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "map",
    "memberof": "src/internal/map.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/map.js~map",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/map.js",
    "importStyle": "map",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/internal/max.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, IterableCheck, isUndefined } from './utils';\nimport Iterable from '../iterable';\n\nconst { max } = Math;\n/**\n * @ignore\n */\nconst FIELD = defineField('max');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, FIELD);\n  return new Iterable(function* () {\n    let acc;\n\n    for (const i of iterable) {\n      if (isUndefined(acc)) {\n        acc = i;\n      } else {\n        acc = max(acc, i);\n      }\n    }\n\n    yield acc;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/max.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "max",
    "memberof": "src/internal/max.js",
    "static": true,
    "longname": "src/internal/max.js~max",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/max.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/max.js",
    "static": true,
    "longname": "src/internal/max.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/max.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "max",
    "memberof": "src/internal/max.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/max.js~max",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/max.js",
    "importStyle": "max",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/internal/min.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, IterableCheck, isUndefined } from './utils';\nimport Iterable from '../iterable';\n\nconst { min } = Math;\n/**\n * @ignore\n */\nconst FIELD = defineField('min');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, FIELD);\n  return new Iterable(function* () {\n    let acc;\n\n    for (const i of iterable) {\n      if (isUndefined(acc)) {\n        acc = i;\n      } else {\n        acc = min(acc, i);\n      }\n    }\n\n    yield acc;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/min.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "min",
    "memberof": "src/internal/min.js",
    "static": true,
    "longname": "src/internal/min.js~min",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/min.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/min.js",
    "static": true,
    "longname": "src/internal/min.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/min.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "min",
    "memberof": "src/internal/min.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/min.js~min",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/min.js",
    "importStyle": "min",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/internal/onDone.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport { IterablePredicateCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('onDone');\n/**\n * @ignore\n */\nexport default (iterable, fn) => {\n  IterablePredicateCheck(iterable, fn, FIELD);\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      yield i;\n    }\n    fn();\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/onDone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/onDone.js",
    "static": true,
    "longname": "src/internal/onDone.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/onDone.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "onDone",
    "memberof": "src/internal/onDone.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/onDone.js~onDone",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/onDone.js",
    "importStyle": "onDone",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/internal/onStart.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport { defineField, IterablePredicateCheck } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('onStart');\n/**\n * @ignore\n */\nexport default (iterable, fn) => {\n  IterablePredicateCheck(iterable, fn, FIELD);\n  return new Iterable(function* () {\n    fn();\n    for (const i of iterable) {\n      yield i;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/onStart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/onStart.js",
    "static": true,
    "longname": "src/internal/onStart.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/onStart.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "onStart",
    "memberof": "src/internal/onStart.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/onStart.js~onStart",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/onStart.js",
    "importStyle": "onStart",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/internal/onYield.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport { defineField, IterablePredicateCheck } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('onYield');\n/**\n * @ignore\n */\nexport default (iterable, fn) => {\n  IterablePredicateCheck(iterable, fn, FIELD);\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      fn(i);\n      yield i;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/onYield.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/onYield.js",
    "static": true,
    "longname": "src/internal/onYield.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/onYield.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "onYield",
    "memberof": "src/internal/onYield.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/onYield.js~onYield",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/onYield.js",
    "importStyle": "onYield",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/internal/outerJoin.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, DoubleIterableCheck } from './utils';\nimport Iterable from '../iterable';\nimport toArray from './toArray';\n/**\n * @ignore\n */\nconst FIELD = defineField('outerJoin');\n/**\n * @ignore\n */\nexport default (iterable, other) => {\n  DoubleIterableCheck(iterable, other, FIELD);\n\n  return new Iterable(function* () {\n    const A = toArray(iterable);\n    const B = toArray(other);\n\n    for (const i of A) {\n      if (!B.includes(i)) {\n        yield i;\n      }\n    }\n\n    for (const o of B) {\n      if (!A.includes(o)) {\n        yield o;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/outerJoin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/outerJoin.js",
    "static": true,
    "longname": "src/internal/outerJoin.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/outerJoin.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "outerJoin",
    "memberof": "src/internal/outerJoin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/outerJoin.js~outerJoin",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/outerJoin.js",
    "importStyle": "outerJoin",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "src/internal/partition.js",
    "content": "import { defineField, IterablePredicateCheck } from './utils';\nimport filter from './filter';\n/**\n * @ignore\n */\nconst FIELD = defineField('partition');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return [\n    filter(iterable, predicate),\n    filter(iterable, x => !predicate(x)),\n  ];\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/partition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/partition.js",
    "static": true,
    "longname": "src/internal/partition.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/partition.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "partition",
    "memberof": "src/internal/partition.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/partition.js~partition",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/partition.js",
    "importStyle": "partition",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/internal/range.js",
    "content": "/* eslint-disable func-names */\nimport { isUndefined, NumberCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('range');\n/**\n * @ignore\n */\nconst range = (start, end, steps) => {\n  NumberCheck(start, 1, FIELD);\n  NumberCheck(end, 2, FIELD);\n\n  let step = steps;\n\n  if (!isUndefined(steps)) {\n    NumberCheck(steps, 3, FIELD);\n  } else {\n    step = 1;\n  }\n\n  return new Iterable(function* () {\n    const direction = step * Math.sign(end - start);\n    for (let c = start; (direction < 0 ? c >= end : c <= end); c += direction) {\n      yield c;\n    }\n  });\n};\n\nexport default range;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/range.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/range.js",
    "static": true,
    "longname": "src/internal/range.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/range.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "range",
    "memberof": "src/internal/range.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/range.js~range",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/range.js",
    "importStyle": "range",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      },
      {
        "name": "steps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/internal/reduce.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, IterablePredicateCheck } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('reduce');\n/**\n * @ignore\n */\nexport default (iterable, predicate, seed) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    let acc = seed;\n    let flag = seed == null;\n\n    for (const i of iterable) {\n      if (flag) {\n        acc = i;\n        flag = false;\n      } else {\n        acc = predicate(acc, i);\n      }\n    }\n\n    yield acc;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/reduce.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/reduce.js",
    "static": true,
    "longname": "src/internal/reduce.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/reduce.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "reduce",
    "memberof": "src/internal/reduce.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/reduce.js~reduce",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/reduce.js",
    "importStyle": "reduce",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      },
      {
        "name": "seed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/internal/reduceRight.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, IterablePredicateCheck } from './utils';\nimport reverse from './reverse';\nimport reduce from './reduce';\n/**\n * @ignore\n */\nconst FIELD = defineField('reduceRight');\n/**\n * @ignore\n */\nexport default (iterable, predicate, seed) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return reduce(reverse(iterable), predicate, seed);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/reduceRight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/reduceRight.js",
    "static": true,
    "longname": "src/internal/reduceRight.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/reduceRight.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "reduceRight",
    "memberof": "src/internal/reduceRight.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/reduceRight.js~reduceRight",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/reduceRight.js",
    "importStyle": "reduceRight",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      },
      {
        "name": "seed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/internal/repeat.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport { defineField, IterablePositiveNumberCheck } from './utils';\nimport Iterable from '../iterable';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('repeat');\n/**\n * @ignore\n */\nexport default (iterable, count) => {\n  IterablePositiveNumberCheck(iterable, count, FIELD);\n  return new Iterable(function* () {\n    for (let c = count; c > 0; c -= 1) {\n      for (const i of iterable) {\n        yield i;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/repeat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/repeat.js",
    "static": true,
    "longname": "src/internal/repeat.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/repeat.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "repeat",
    "memberof": "src/internal/repeat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/repeat.js~repeat",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/repeat.js",
    "importStyle": "repeat",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "file",
    "name": "src/internal/replace.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport { defineField, IterablePositiveNumberCheck } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('replace');\n/**\n * @ignore\n */\nexport default (iterable, index, value) => {\n  IterablePositiveNumberCheck(iterable, index, FIELD);\n  return new Iterable(function* () {\n    let c = 0;\n\n    for (const i of iterable) {\n      if (c === index) {\n        yield value;\n      } else {\n        yield i;\n      }\n      c += 1;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/replace.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/replace.js",
    "static": true,
    "longname": "src/internal/replace.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/replace.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "replace",
    "memberof": "src/internal/replace.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/replace.js~replace",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/replace.js",
    "importStyle": "replace",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/internal/reverse.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport { defineField, IterableCheck } from './utils';\nimport Iterable from '../iterable';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('reverse');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n  return new Iterable(function* () {\n    const buffer = [];\n\n    for (const i of iterable) {\n      buffer.unshift(i);\n    }\n    for (const i of buffer) {\n      yield i;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/reverse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/reverse.js",
    "static": true,
    "longname": "src/internal/reverse.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/reverse.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "reverse",
    "memberof": "src/internal/reverse.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/reverse.js~reverse",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/reverse.js",
    "importStyle": "reverse",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "src/internal/scan.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, IterablePredicateCheck } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('scan');\n/**\n * @ignore\n */\nexport default (iterable, predicate, seed) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    let acc = seed;\n    let flag = seed == null;\n\n    for (const i of iterable) {\n      if (flag) {\n        acc = i;\n        flag = false;\n      } else {\n        acc = predicate(acc, i);\n      }\n      yield acc;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/scan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/scan.js",
    "static": true,
    "longname": "src/internal/scan.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/scan.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "scan",
    "memberof": "src/internal/scan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/scan.js~scan",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/scan.js",
    "importStyle": "scan",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      },
      {
        "name": "seed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "src/internal/scanRight.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, IterablePredicateCheck } from './utils';\nimport reverse from './reverse';\nimport scan from './scan';\n/**\n * @ignore\n */\nconst FIELD = defineField('scanRight');\n/**\n * @ignore\n */\nexport default (iterable, predicate, seed) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return scan(reverse(iterable), predicate, seed);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/scanRight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/scanRight.js",
    "static": true,
    "longname": "src/internal/scanRight.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/scanRight.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "scanRight",
    "memberof": "src/internal/scanRight.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/scanRight.js~scanRight",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/scanRight.js",
    "importStyle": "scanRight",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      },
      {
        "name": "seed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/internal/skip.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, IterablePositiveNumberCheck } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('skip');\n/**\n * @ignore\n */\nexport default (iterable, count) => {\n  IterablePositiveNumberCheck(iterable, count, FIELD);\n  return new Iterable(function* () {\n    let c = count;\n\n    for (const i of iterable) {\n      if (c > 0) {\n        c -= 1;\n      } else {\n        yield i;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/skip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/skip.js",
    "static": true,
    "longname": "src/internal/skip.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/skip.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "skip",
    "memberof": "src/internal/skip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/skip.js~skip",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/skip.js",
    "importStyle": "skip",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/internal/skipLast.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { IterablePositiveNumberCheck, defineField } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('skipLast');\n/**\n * @ignore\n */\nexport default (iterable, count) => {\n  IterablePositiveNumberCheck(iterable, count, FIELD);\n  return new Iterable(function* () {\n    const buffer = [];\n    let c = 0;\n    for (const i of iterable) {\n      if (count > 0) {\n        buffer.push(i);\n        if (c === count) {\n          yield buffer.shift();\n        } else {\n          c += 1;\n        }\n      } else {\n        yield i;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/skipLast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/skipLast.js",
    "static": true,
    "longname": "src/internal/skipLast.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/skipLast.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "skipLast",
    "memberof": "src/internal/skipLast.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/skipLast.js~skipLast",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/skipLast.js",
    "importStyle": "skipLast",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "src/internal/skipUntil.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n\nimport Iterable from '../iterable';\nimport { defineField, IterablePredicateCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('skipUntil');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    let flag = true;\n    for (const i of iterable) {\n      if (flag) {\n        flag = !predicate(i);\n      }\n      if (!flag) {\n        yield i;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/skipUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/skipUntil.js",
    "static": true,
    "longname": "src/internal/skipUntil.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/skipUntil.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "skipUntil",
    "memberof": "src/internal/skipUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/skipUntil.js~skipUntil",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/skipUntil.js",
    "importStyle": "skipUntil",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/internal/skipWhile.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n\nimport Iterable from '../iterable';\nimport { defineField, IterablePredicateCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('skipWhile');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    let flag = true;\n    for (const i of iterable) {\n      if (flag) {\n        flag = predicate(i);\n      }\n      if (!flag) {\n        yield i;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/skipWhile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/skipWhile.js",
    "static": true,
    "longname": "src/internal/skipWhile.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/skipWhile.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "skipWhile",
    "memberof": "src/internal/skipWhile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/skipWhile.js~skipWhile",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/skipWhile.js",
    "importStyle": "skipWhile",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/internal/slice.js",
    "content": "import { defineField, PositiveNumberCheck, IterableCheck } from './utils';\nimport skip from './skip';\nimport take from './take';\n\nconst FIELD = defineField('slice');\n/**\n * @ignore\n */\nexport default (iterable, start, end) => {\n  IterableCheck(iterable, 1, FIELD);\n  PositiveNumberCheck(start, 2, FIELD);\n  PositiveNumberCheck(end, 3, FIELD);\n\n  return skip(take(iterable, end), start);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/slice.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/slice.js",
    "static": true,
    "longname": "src/internal/slice.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/slice.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "slice",
    "memberof": "src/internal/slice.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/slice.js~slice",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/slice.js",
    "importStyle": "slice",
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "file",
    "name": "src/internal/sort.js",
    "content": "import {\n  isUndefined, IterableCheck, defineField, FunctionCheck,\n} from './utils';\nimport Iterable from '../iterable';\nimport toArray from './toArray';\n/**\n * @ignore\n */\nconst FIELD = defineField('sort');\n/**\n * @ignore\n */\nconst defaultComparator = (a, b) => a - b;\n/**\n * @ignore\n */\nexport default (iterable, comparator) => {\n  IterableCheck(iterable, 1, FIELD);\n\n  let fn = comparator;\n\n  if (!isUndefined(fn)) {\n    FunctionCheck(comparator, 2, FIELD);\n  } else {\n    fn = defaultComparator;\n  }\n\n  return new Iterable(toArray(iterable).sort(fn));\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/sort.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/sort.js",
    "static": true,
    "longname": "src/internal/sort.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/sort.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "defaultComparator",
    "memberof": "src/internal/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/sort.js~defaultComparator",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/sort.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "sort",
    "memberof": "src/internal/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/sort.js~sort",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/sort.js",
    "importStyle": "sort",
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "comparator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "src/internal/sorted.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport {\n  isUndefined, defineField, IterableCheck, FunctionCheck,\n} from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('sorted');\n/**\n * @ignore\n */\nconst defaultComparator = (a, b) => a - b;\n/**\n * @ignore\n */\nexport default (iterable, comparator) => {\n  IterableCheck(iterable, 1, FIELD);\n\n  let fn = comparator;\n\n  if (!isUndefined(fn)) {\n    FunctionCheck(comparator, 2, FIELD);\n  } else {\n    fn = defaultComparator;\n  }\n\n  return new Iterable(function* () {\n    let prev;\n\n    for (const i of iterable) {\n      if (typeof prev !== 'undefined' && fn(prev, i) > 0) {\n        yield false;\n        return;\n      }\n      prev = i;\n    }\n    yield true;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/sorted.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/sorted.js",
    "static": true,
    "longname": "src/internal/sorted.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/sorted.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "defaultComparator",
    "memberof": "src/internal/sorted.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/sorted.js~defaultComparator",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/sorted.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "sorted",
    "memberof": "src/internal/sorted.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/sorted.js~sorted",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/sorted.js",
    "importStyle": "sorted",
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "comparator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/internal/spanWith.js",
    "content": "\nimport skipWhile from './skipWhile';\nimport takeWhile from './takeWhile';\nimport { defineField, IterablePredicateCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('spanWith');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return [\n    takeWhile(iterable, predicate),\n    skipWhile(iterable, predicate),\n  ];\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/spanWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/spanWith.js",
    "static": true,
    "longname": "src/internal/spanWith.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/spanWith.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "spanWith",
    "memberof": "src/internal/spanWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/spanWith.js~spanWith",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/spanWith.js",
    "importStyle": "spanWith",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "src/internal/split.js",
    "content": "import take from './take';\nimport skip from './skip';\nimport { defineField, IterablePositiveNumberCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('split');\n/**\n * @ignore\n */\nexport default (iterable, count) => {\n  IterablePositiveNumberCheck(iterable, count, FIELD);\n  return [take(iterable, count), skip(iterable, count)];\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/split.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/split.js",
    "static": true,
    "longname": "src/internal/split.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/split.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "split",
    "memberof": "src/internal/split.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/split.js~split",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/split.js",
    "importStyle": "split",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "src/internal/startWith.js",
    "content": "import concat from './concat';\nimport { defineField, IterableCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('startWith');\n/**\n * @ignore\n */\nexport default (iterable, ...iterables) => {\n  IterableCheck(iterable, 1, FIELD);\n  return concat(...iterables, iterable);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/startWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/startWith.js",
    "static": true,
    "longname": "src/internal/startWith.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/startWith.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "startWith",
    "memberof": "src/internal/startWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/startWith.js~startWith",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/startWith.js",
    "importStyle": "startWith",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "iterables",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "src/internal/step.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport Iterable from '../iterable';\nimport { defineField, IterablePositiveNumberCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('step');\n/**\n * @ignore\n */\nexport default (iterable, count) => {\n  IterablePositiveNumberCheck(iterable, count, FIELD);\n  return new Iterable(function* () {\n    if (count < 1) {\n      return;\n    }\n    let c = 0;\n    for (const i of iterable) {\n      if (c % count === 0) {\n        yield i;\n      }\n      c += 1;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/step.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/step.js",
    "static": true,
    "longname": "src/internal/step.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/step.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "step",
    "memberof": "src/internal/step.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/step.js~step",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/step.js",
    "importStyle": "step",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "file",
    "name": "src/internal/sum.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport { defineField, IterableCheck } from './utils';\nimport Iterable from '../iterable';\n/**\n * @ignore\n */\nconst FIELD = defineField('sum');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, FIELD);\n  return new Iterable(function* () {\n    let acc = 0;\n\n    for (const i of iterable) {\n      acc += i;\n    }\n\n    yield acc;\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/sum.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/sum.js",
    "static": true,
    "longname": "src/internal/sum.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/sum.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "sum",
    "memberof": "src/internal/sum.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/sum.js~sum",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/sum.js",
    "importStyle": "sum",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "src/internal/take.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport Iterable from '../iterable';\nimport { defineField, IterablePositiveNumberCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('take');\n/**\n * @ignore\n */\nexport default (iterable, count) => {\n  IterablePositiveNumberCheck(iterable, count, FIELD);\n  return new Iterable(function* () {\n    let c = count;\n\n    for (const i of iterable) {\n      if (c > 0) {\n        c -= 1;\n\n        yield i;\n      } else {\n        return;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/take.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/take.js",
    "static": true,
    "longname": "src/internal/take.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/take.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "take",
    "memberof": "src/internal/take.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/take.js~take",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/take.js",
    "importStyle": "take",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "src/internal/takeLast.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\nimport Iterable from '../iterable';\nimport { defineField, IterablePositiveNumberCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('takeLast');\n/**\n * @ignore\n */\nexport default (iterable, count) => {\n  IterablePositiveNumberCheck(iterable, count, FIELD);\n  return new Iterable(function* () {\n    if (count === 0) {\n      return;\n    }\n\n    const buffer = [];\n\n    for (const i of iterable) {\n      buffer.push(i);\n    }\n\n    for (const i of buffer.slice(-count)) {\n      yield i;\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/takeLast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/takeLast.js",
    "static": true,
    "longname": "src/internal/takeLast.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/takeLast.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "takeLast",
    "memberof": "src/internal/takeLast.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/takeLast.js~takeLast",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/takeLast.js",
    "importStyle": "takeLast",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "src/internal/takeUntil.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n\nimport Iterable from '../iterable';\nimport { defineField, IterablePredicateCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('takeUntil');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      if (!predicate(i)) {\n        yield i;\n      } else {\n        return;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/takeUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/takeUntil.js",
    "static": true,
    "longname": "src/internal/takeUntil.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/takeUntil.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "takeUntil",
    "memberof": "src/internal/takeUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/takeUntil.js~takeUntil",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/takeUntil.js",
    "importStyle": "takeUntil",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "src/internal/takeWhile.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n\nimport Iterable from '../iterable';\nimport { defineField, IterablePredicateCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('takeWhile');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    for (const i of iterable) {\n      if (predicate(i)) {\n        yield i;\n      } else {\n        return;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/takeWhile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/takeWhile.js",
    "static": true,
    "longname": "src/internal/takeWhile.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/takeWhile.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "takeWhile",
    "memberof": "src/internal/takeWhile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/takeWhile.js~takeWhile",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/takeWhile.js",
    "importStyle": "takeWhile",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/internal/toArray.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport { defineField, IterableCheck } from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('toArray');\n/**\n * @ignore\n */\nexport default (iterable) => {\n  IterableCheck(iterable, 1, FIELD);\n  const buffer = [];\n\n  for (const i of iterable) {\n    buffer.push(i);\n  }\n\n  return buffer;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/toArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/toArray.js",
    "static": true,
    "longname": "src/internal/toArray.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/toArray.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "toArray",
    "memberof": "src/internal/toArray.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/toArray.js~toArray",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/toArray.js",
    "importStyle": "toArray",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "src/internal/utils.js",
    "content": "/* eslint-disable valid-typeof */\n/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n/**\n * @ignore\n */\nexport const CLASS_NAME = 'Iterable';\n/**\n * @ignore\n */\nexport const TYPE_FUNC = 'function';\n/**\n * @ignore\n */\nexport const TYPE_NUM = 'number';\n/**\n * @ignore\n */\nexport const TYPE_POS_NUM = 'positive number';\n/**\n * @ignore\n */\nexport const ITERATOR = Symbol.iterator;\n/**\n * @ignore\n */\nexport const isFunction = x => typeof x === TYPE_FUNC;\n/**\n * @ignore\n */\nexport const isNumber = x => typeof x === TYPE_NUM;\n/**\n * @ignore\n */\nexport const isUndefined = x => typeof x === 'undefined' || x === null;\n\n/**\n * @ignore\n */\nexport const isIterable = x => !isUndefined(x) && isFunction(x[ITERATOR]);\n/**\n * @ignore\n */\nexport class BadArgumentError extends TypeError {\n  constructor(argumentNo, methodName, expectedType) {\n    super();\n    this.message = `bad argument #${argumentNo} to ${methodName} (${expectedType} expected)`;\n  }\n}\n/**\n * @ignore\n */\nexport const IterableCheck = (iterable, argNo, field) => {\n  if (!isIterable(iterable)) {\n    throw new BadArgumentError(argNo, field, CLASS_NAME);\n  }\n};\n/**\n * @ignore\n */\nexport const FunctionCheck = (predicate, argNo, field) => {\n  if (!isFunction(predicate)) {\n    throw new BadArgumentError(argNo, field, TYPE_FUNC);\n  }\n};\n/**\n * @ignore\n */\nexport const NumberCheck = (num, argNo, field) => {\n  if (!isNumber(num)) {\n    throw new BadArgumentError(argNo, field, TYPE_NUM);\n  }\n};\n/**\n * @ignore\n */\nexport const PositiveNumberCheck = (num, argNo, field) => {\n  NumberCheck(num, argNo, field);\n  if (num < 0) {\n    throw new BadArgumentError(argNo, field, TYPE_POS_NUM);\n  }\n};\n/**\n * @ignore\n */\nexport const IterablePredicateCheck = (iterable, predicate, field) => {\n  IterableCheck(iterable, 1, field);\n  FunctionCheck(predicate, 2, field);\n};\n/**\n * @ignore\n */\nexport const IterablePositiveNumberCheck = (iterable, num, field) => {\n  IterableCheck(iterable, 1, field);\n  PositiveNumberCheck(num, 2, field);\n};\n/**\n * @ignore\n */\nexport const DoubleIterableCheck = (iterable, other, field) => {\n  IterableCheck(iterable, 1, field);\n  IterableCheck(other, 2, field);\n};\n/**\n * @ignore\n */\nexport const defineField = x => `${CLASS_NAME}.${x}`;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "CLASS_NAME",
    "memberof": "src/internal/utils.js",
    "static": true,
    "longname": "src/internal/utils.js~CLASS_NAME",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{CLASS_NAME}",
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "variable",
    "name": "TYPE_FUNC",
    "memberof": "src/internal/utils.js",
    "static": true,
    "longname": "src/internal/utils.js~TYPE_FUNC",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{TYPE_FUNC}",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "variable",
    "name": "TYPE_NUM",
    "memberof": "src/internal/utils.js",
    "static": true,
    "longname": "src/internal/utils.js~TYPE_NUM",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{TYPE_NUM}",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "variable",
    "name": "TYPE_POS_NUM",
    "memberof": "src/internal/utils.js",
    "static": true,
    "longname": "src/internal/utils.js~TYPE_POS_NUM",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{TYPE_POS_NUM}",
    "description": "",
    "lineNumber": 19,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "variable",
    "name": "ITERATOR",
    "memberof": "src/internal/utils.js",
    "static": true,
    "longname": "src/internal/utils.js~ITERATOR",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{ITERATOR}",
    "description": "",
    "lineNumber": 23,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{isFunction}",
    "description": "",
    "lineNumber": 27,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "isNumber",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isNumber",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{isNumber}",
    "description": "",
    "lineNumber": 31,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "function",
    "name": "isUndefined",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isUndefined",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{isUndefined}",
    "description": "",
    "lineNumber": 35,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "isIterable",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isIterable",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{isIterable}",
    "description": "",
    "lineNumber": 40,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "BadArgumentError",
    "memberof": "src/internal/utils.js",
    "static": true,
    "longname": "src/internal/utils.js~BadArgumentError",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{BadArgumentError}",
    "description": "",
    "lineNumber": 44,
    "ignore": true,
    "interface": false,
    "extends": [
      "TypeError"
    ]
  },
  {
    "__docId__": 268,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/internal/utils.js~BadArgumentError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/internal/utils.js~BadArgumentError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "message",
    "memberof": "src/internal/utils.js~BadArgumentError",
    "static": false,
    "longname": "src/internal/utils.js~BadArgumentError#message",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "IterableCheck",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~IterableCheck",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{IterableCheck}",
    "description": "",
    "lineNumber": 53,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "argNo",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "function",
    "name": "FunctionCheck",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~FunctionCheck",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{FunctionCheck}",
    "description": "",
    "lineNumber": 61,
    "ignore": true,
    "params": [
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      },
      {
        "name": "argNo",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "NumberCheck",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~NumberCheck",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{NumberCheck}",
    "description": "",
    "lineNumber": 69,
    "ignore": true,
    "params": [
      {
        "name": "num",
        "types": [
          "*"
        ]
      },
      {
        "name": "argNo",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "function",
    "name": "PositiveNumberCheck",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~PositiveNumberCheck",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{PositiveNumberCheck}",
    "description": "",
    "lineNumber": 77,
    "ignore": true,
    "params": [
      {
        "name": "num",
        "types": [
          "*"
        ]
      },
      {
        "name": "argNo",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "function",
    "name": "IterablePredicateCheck",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~IterablePredicateCheck",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{IterablePredicateCheck}",
    "description": "",
    "lineNumber": 86,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "function",
    "name": "IterablePositiveNumberCheck",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~IterablePositiveNumberCheck",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{IterablePositiveNumberCheck}",
    "description": "",
    "lineNumber": 93,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "num",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "DoubleIterableCheck",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~DoubleIterableCheck",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{DoubleIterableCheck}",
    "description": "",
    "lineNumber": 100,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "function",
    "name": "defineField",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~defineField",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/utils.js",
    "importStyle": "{defineField}",
    "description": "",
    "lineNumber": 107,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "file",
    "name": "src/internal/whileDo.js",
    "content": "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n\nimport Iterable from '../iterable';\nimport { defineField, IterablePredicateCheck } from './utils';\n\n/**\n * @ignore\n */\nconst FIELD = defineField('filter');\n/**\n * @ignore\n */\nexport default (iterable, predicate) => {\n  IterablePredicateCheck(iterable, predicate, FIELD);\n  return new Iterable(function* () {\n    while (predicate()) {\n      for (const i of iterable) {\n        yield i;\n      }\n    }\n  });\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/whileDo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/whileDo.js",
    "static": true,
    "longname": "src/internal/whileDo.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/whileDo.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "function",
    "name": "whileDo",
    "memberof": "src/internal/whileDo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/whileDo.js~whileDo",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/whileDo.js",
    "importStyle": "whileDo",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "iterable",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "src/internal/zip.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/* eslint-disable func-names */\nimport Iterable from '../iterable';\nimport {\n  BadArgumentError, isFunction, isUndefined, defineField, FunctionCheck,\n} from './utils';\n/**\n * @ignore\n */\nconst FIELD = defineField('zip');\n/**\n * @ignore\n */\nconst defaultZipper = x => x;\n/**\n * @ignore\n */\nconst zip = (iterables, fn) => {\n  if (!(iterables instanceof Array)) {\n    throw new BadArgumentError(1, FIELD, 'Array');\n  }\n\n  let zipper = fn;\n\n  if (!isUndefined(fn)) {\n    if (!isFunction(fn)) {\n      FunctionCheck(fn, 2, FIELD);\n    }\n  } else {\n    zipper = defaultZipper;\n  }\n\n  return new Iterable(function* () {\n    const buffer = [];\n\n    for (const iterable of iterables) {\n      let c = 0;\n      for (const i of iterable) {\n        let current = buffer[c];\n\n        if (isUndefined(current)) {\n          current = [];\n          buffer[c] = current;\n        }\n\n        current.push(i);\n\n        c += 1;\n      }\n    }\n\n    for (const i of buffer) {\n      yield zipper(i);\n    }\n  });\n};\n\nexport default zip;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/internal/zip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "variable",
    "name": "FIELD",
    "memberof": "src/internal/zip.js",
    "static": true,
    "longname": "src/internal/zip.js~FIELD",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/zip.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "function",
    "name": "defaultZipper",
    "memberof": "src/internal/zip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/zip.js~defaultZipper",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/zip.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 284,
    "kind": "function",
    "name": "zip",
    "memberof": "src/internal/zip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/zip.js~zip",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/internal/zip.js",
    "importStyle": "zip",
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "params": [
      {
        "name": "iterables",
        "types": [
          "*"
        ]
      },
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "file",
    "name": "src/iterable.js",
    "content": "/* eslint-disable no-restricted-syntax */\n/**\n * @license\n * MIT License\n *\n * Copyright (c) 2019 Alexis Munsayac\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n * @author Alexis Munsayac <alexis.munsayac@gmail.com>\n * @copyright Alexis Munsayac 2019\n */\n/**\n * @external {Iteration Protocol} https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n */\nimport {\n  isIterable, ITERATOR, BadArgumentError, isUndefined,\n} from './internal/utils';\nimport {\n  map, filter, concat, just, first, last, repeat,\n  startWith, zip, flat, all, any, isEmpty, empty,\n  skip, take, takeLast, skipLast, split, skipWhile,\n  takeWhile, onYield, onDone, onStart, count,\n  contains, indexOf, find, breakWith, spanWith,\n  partition, flatMap, range, elementAt, replace,\n  reverse, cache, compose, buffer, step, reduce,\n  intercalate, intersperse, toArray, intersect,\n  distinct, distinctAdjacent, equal, sort, sorted,\n  scan, average, max, min, sum, defaultIfEmpty,\n  scanRight, reduceRight, breadthFirst, depthFirst,\n  slice, diff, innerJoin, outerJoin, leftJoin, skipUntil,\n  takeUntil, ignoreElements, doWhile, whileDo,\n} from './internal/dependency';\n\nconst { isNaN } = Number;\n/**\n * The Iterable class serves as a super set of all objects\n * that implements the Iteration Protocol.\n *\n * Iterable allows the unification and abstraction\n * of these objects.\n *\n * Iterable also provides operators which allows to\n * transform an Iterable into a new one, making Iterable\n * an Immutable.\n */\nexport default class Iterable {\n  /**\n   * Returns an Iterable with the given object.\n   *\n   * This object must be either a generator or an object\n   * that implements the Iteration Protocol.\n   *\n   * @param {!Iterable} iterable\n   * @returns {Iterable}\n   */\n  constructor(iterable) {\n    const it = iterable;\n\n    const exists = !isUndefined(it);\n    if (exists && it.constructor.name === 'GeneratorFunction') {\n      it[ITERATOR] = it;\n      /**\n       * @ignore\n       */\n      this.it = it;\n    } else if (exists && isIterable(it)) {\n      /**\n       * @ignore\n       */\n      this.it = it;\n    } else {\n      throw new BadArgumentError(1, 'Iterable.<constructor>', 'Iterable or Generator');\n    }\n    /**\n     * @ignore\n     */\n    this.it = it;\n\n    return new Proxy(this, {\n      get: (t, k) => ((k in t && t[k]) || (!isNaN(k) ? this.get(k) : undefined)),\n    });\n  }\n\n  /**\n   * Similar to elementAt, excepts that this method\n   * returns the actual value at the given index.\n   * @param {!number} index\n   * @returns {any}\n   */\n  get(index) {\n    const { it } = this;\n    let s = 0;\n    for (const i of it) {\n      if (`${s}` === index) {\n        return i;\n      }\n      s += 1;\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if a given Object follows the Iterator Protocol.\n   * @param {Object} it\n   * @returns {boolean}\n   */\n  static is(it) {\n    return isIterable(it);\n  }\n\n  /**\n   * Returns an Iterable that yields true if all of the yields of the\n   * source Iterable passes the predicate function, false if not.\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static all(it, predicate) {\n    return all(it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields true if all of the yields of\n   * this Iterable passes the predicate function, false if not.\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  all(predicate) {\n    return all(this.it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields true if any of the yields of the\n   * source Iterable passes the predicate function, false if not.\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static any(it, predicate) {\n    return any(it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields true if any of the yields of\n   * this Iterable passes the predicate function, false if not.\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  any(predicate) {\n    return any(this.it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields the average value of\n   * the source Iterable's yields.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static average(it) {\n    return average(it);\n  }\n\n  /**\n   * Returns an Iterable that yields the average value of\n   * this Iterable's yields.\n   * @returns {Iterable}\n   */\n  average() {\n    return average(this.it);\n  }\n\n  /**\n   * Performs a breadth-first flattening method to the source Iterable:\n   * shallow elements are yielded first before deeper elements.\n   * @param {Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static breadthFirst(it) {\n    return breadthFirst(it);\n  }\n\n\n  /**\n   * Performs a breadth-first flattening method to this Iterable:\n   * shallow elements are yielded first before deeper elements.\n   * @returns {Iterable}\n   */\n  breadthFirst() {\n    return breadthFirst(this.it);\n  }\n\n  /**\n   * Returns an Iterable that yields Iterable buffers of items\n   * it collects from the source Iterable.\n   * @param {!Iterable} it\n   * @param {!number} amount\n   * @returns {Iterable}\n   */\n  static buffer(it, amount) {\n    return buffer(it, amount);\n  }\n\n  /**\n   * Returns an Iterable that yields Iterable buffers of items\n   * it collects from this Iterable.\n   * @param {!number} amount\n   * @returns {Iterable}\n   */\n  buffer(amount) {\n    return buffer(this.it, amount);\n  }\n\n  /**\n   * Split an Iterable into a longest prefix such that all\n   * the elements of it do not satisfy a given predicate,\n   * and the rest of the Iterable following them.\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static breakWith(it, predicate) {\n    return breakWith(it, predicate);\n  }\n\n  /**\n   * Split an Iterable into a longest prefix such that all\n   * the elements of it do not satisfy a given predicate,\n   * and the rest of the Iterable following them.\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  breakWith(predicate) {\n    return breakWith(this.it, predicate);\n  }\n\n  /**\n   * Caches all yields of the source Iterable, for the purpose\n   * of not re-running the computing function that yields\n   * the result.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static cache(it) {\n    return cache(it);\n  }\n\n  /**\n   * Caches all yields of this Iterable, for the purpose\n   * of not re-running the computing function that yields\n   * the result.\n   * @returns {Iterable}\n   */\n  cache() {\n    return cache(this.it);\n  }\n\n  /**\n   * Transforms the source Iterable by applying a composer function. This\n   * is useful for creating your own Iterable operators.\n   * @param {!Iterable} it\n   * @param  {...function(iterable: Iterable):Iterable} composers\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if one of the given composers is not a function.\n   * @throws {TypeError}\n   * throws error if a given composer returned a non-Iterable.\n   * @returns {Iterable}\n   */\n  static compose(it, ...composers) {\n    return compose(it, ...composers);\n  }\n\n  /**\n   * Transforms this Iterable by applying a composer function. This\n   * is useful for creating your own Iterable operators.\n   * @param  {...function(iterable: Iterable):Iterable} composers\n   * @throws {BadArgumentError}\n   * throws error if one of the given composers is not a function.\n   * @throws {TypeError}\n   * throws error if a given composer returned a non-Iterable.\n   * @returns {Iterable}\n   */\n  compose(...composers) {\n    return compose(this.it, ...composers);\n  }\n\n  /**\n   * Concatenates the given set of Iterables into a single Iterable.\n   *\n   * If a value is an Iterable, concat removes a single layer\n   * of nesting\n   * @param  {...any} its\n   * @returns {Iterable}\n   */\n  static concat(...its) {\n    return concat(...its);\n  }\n\n  /**\n   * Concatenates the given Iterables to this Iterable.\n   *\n   * If a value is an Iterable, concat removes a single layer\n   * of nesting\n   *\n   * @param  {...any} its\n   * @returns {Iterable}\n   */\n  concat(...its) {\n    return concat(this.it, ...its);\n  }\n\n  /**\n   * Returns an Iterable that yields a Boolean that indicates\n   * whether the source Iterable yielded a specified item.\n   * @param {!Iterable} it\n   * @param {any} value\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static contains(it, value) {\n    return contains(it, value);\n  }\n\n  /**\n   * Returns an Iterable that yields a Boolean that indicates\n   * whether the source Iterable yielded a specified item.\n   * @param {any} value\n   * @returns {Iterable}\n   */\n  contains(value) {\n    return contains(this.it, value);\n  }\n\n  /**\n   * Returns an Iterable that counts the total number of items\n   * yielded by the source Iterable and yields this count.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static count(it) {\n    return count(it);\n  }\n\n  /**\n   * Returns an Iterable that counts the total number of items\n   * yielded by this Iterable and yields this count.\n   * @returns {Iterable}\n   */\n  count() {\n    return count(this.it);\n  }\n\n  /**\n   * Returns an Iterable that yields the items yielded by\n   * the source Iterable or a specified default item if\n   * the source Iterable is empty.\n   * @param {!Iterable} it\n   * @param {any} value\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static defaultIfEmpty(it, value) {\n    return defaultIfEmpty(it, value);\n  }\n\n  /**\n   * Returns an Iterable that yields the items yielded by\n   * the source Iterable or a specified default item if\n   * the source Iterable is empty.\n   * @param {any} value\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  defaultIfEmpty(value) {\n    return defaultIfEmpty(this.it, value);\n  }\n\n  /**\n   * Performs a depth-first flattening method to the source Iterable. This\n   * is the same as the flat method except that depthFirst removes all nesting.\n   * @param {Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static depthFirst(it) {\n    return depthFirst(it);\n  }\n\n\n  /**\n   * Performs a depth-first flattening method to this Iterable. This\n   * is the same as the flat method except that depthFirst removes all nesting.\n   * @returns {Iterable}\n   */\n  depthFirst() {\n    return depthFirst(this.it);\n  }\n\n  /**\n   * Returns an Iterable that yields the items of the source Iterable\n   * that does not exist in the other Iterable.\n   * @param {!Iterable} it\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static diff(it, other) {\n    return diff(it, other);\n  }\n\n  /**\n   * Returns an Iterable that yields the items of the source Iterable\n   * that does not exist in the other Iterable.\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  diff(other) {\n    return diff(this.it, other);\n  }\n\n  /**\n   * Returns an Iterable that yields all items yielded by the\n   * source Iterable that are distinct based on the strict equality\n   * comparison.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static distinct(it) {\n    return distinct(it);\n  }\n\n  /**\n   * Returns an Iterable that yields all items yielded by this Iterable\n   * that are distinct based on the strict equality comparison.\n   * @returns {Iterable}\n   */\n  distinct() {\n    return distinct(this.it);\n  }\n\n  /**\n   * Returns an Iterable that yields all items yielded by the\n   * source Iterable that are distinct from their immediate\n   * predecessors based on strict equality comparison.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static distinctAdjacent(it) {\n    return distinctAdjacent(it);\n  }\n\n  /**\n   * Returns an Iterable that yields all items yielded by this\n   * Iterable that are distinct from their immediate predecessors\n   * based on strict equality comparison.\n   * @returns {Iterable}\n   */\n  distinctAdjacent() {\n    return distinctAdjacent(this.it);\n  }\n\n  /**\n   * Returns an Iterable that yields the values of the source Iterable\n   * and repeats the sequence as long as the given predicate supplies a truthy\n   * value.\n   * @param {!Iterable} it\n   * @param {!function():boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static doWhile(it, predicate) {\n    return doWhile(it, predicate);\n  }\n\n\n  /**\n   * Returns an Iterable that yields the values of the source Iterable\n   * and repeats the sequence as long as the given predicate supplies a truthy\n   * value.\n   * @param {!function():boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  doWhile(predicate) {\n    return doWhile(this.it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields the single item at a specified\n   * index in a sequence of yields from the source Iterable.\n   * @param {!Iterable} it\n   * @param {!number} index\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given index is not a number.\n   * @returns {Iterable}\n   */\n  static elementAt(it, index) {\n    return elementAt(it, index);\n  }\n\n  /**\n   * Returns an Iterable that yields the single item at a specified\n   * index in a sequence of yields from this Iterable.\n   * @param {!number} index\n   * @throws {BadArgumentError}\n   * throws error if the given index is not a number.\n   * @returns {Iterable}\n   */\n  elementAt(index) {\n    return elementAt(this.it, index);\n  }\n\n  /**\n   * Returns an Iterable that doesn't yield any value.\n   * @returns {Iterable}\n   */\n  static empty() {\n    return empty();\n  }\n\n  /**\n   * Returns an Iterable that yields true if the source Iterable\n   * has the same exact sequence as the other Iterable.\n   * @param {!Iterable} it\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static equal(it, other) {\n    return equal(it, other);\n  }\n\n  /**\n   * Returns an Iterable that yields true if the source Iterable\n   * has the same exact sequence as the other Iterable.\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  equal(other) {\n    return equal(this.it, other);\n  }\n\n  /**\n   * Filters the yields of a source Iterable with a filter function.\n   *\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} fn\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static filter(it, fn) {\n    return filter(it, fn);\n  }\n\n  /**\n   * Filters the yields of this Iterable with a filter function.\n   * @param {!function(item: any):boolean} fn\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  filter(fn) {\n    return filter(this.it, fn);\n  }\n\n  /**\n   * Finds the index of the first element that satisfy a predicate.\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static find(it, predicate) {\n    return find(it, predicate);\n  }\n\n  /**\n   * Finds the index of the first element that satisfy a predicate.\n   * @param {!function(item: any):boolean} predicate\n   * @returns {Iterable}\n   */\n  find(predicate) {\n    return find(this.it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields the first value of the source\n   * Iterable that satisfy a predicate(optional).\n   * @param {!Iterable} it\n   * @param {function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function or undefined\n   * @returns {Iterable}\n   */\n  static first(it, predicate) {\n    return first(it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields the first value of the source\n   * Iterable that satisfy a predicate(optional).\n   * @param {function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function or undefined\n   * @returns {Iterable}\n   */\n  first(predicate) {\n    return first(this.it, predicate);\n  }\n\n  /**\n   * Flattens the source Iterable by removing a single layer of\n   * nesting for the yielded Iterables.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static flat(it) {\n    return flat(it);\n  }\n\n  /**\n   * Flattens this Iterable by removing a single layer of nesting\n   * for the yielded Iterables.\n   * @returns {Iterable}\n   */\n  flat() {\n    return flat(this.it);\n  }\n\n  /**\n   * Returns an Iterable that yields items based on applying a\n   * function that you supply to each item yielded by the source\n   * Iterable, where that function returns an Iterable, and then\n   * merging those resulting Iterable and yielding the results of this merger.\n   * @param {!Iterable} it\n   * @param {!function(item: any):Iterable} mapper\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given mapper is not a function\n   * @returns {Iterable}\n   */\n  static flatMap(it, mapper) {\n    return flatMap(it, mapper);\n  }\n\n  /**\n   * Returns an Iterable that yields items based on applying a\n   * function that you supply to each item yielded by this\n   * Iterable, where that function returns an Iterable, and then\n   * merging those resulting Iterable and yielding the results of this merger.\n   * @param {!function(item: any):Iterable} mapper\n   * @throws {BadArgumentError}\n   * throws error if the given mapper is not a function\n   * @returns {Iterable}\n   */\n  flatMap(mapper) {\n    return flatMap(this.it, mapper);\n  }\n\n  /**\n   * Returns an Iterable that ignores the source Iterable's yields;\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static ignoreElements(it) {\n    return ignoreElements(it);\n  }\n\n  /**\n   * Returns an Iterable that doesn't yield any value.\n   * @returns {Iterable}\n   */\n  ignoreElements() {\n    return ignoreElements(this.it);\n  }\n\n  /**\n   * Returns an Iterable that yields the index of the\n   * given value if it the source Iterable yields the same\n   * value.\n   * @param {!Iterable} it\n   * @param {any} value\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static indexOf(it, value) {\n    return indexOf(it, value);\n  }\n\n  /**\n   * Returns an Iterable that yields the index of the\n   * given value if it this Iterable yields the same\n   * value.\n   * @param {any} value\n   * @returns {Iterable}\n   */\n  indexOf(value) {\n    return indexOf(this.it, value);\n  }\n\n  /**\n   * Returns an Iterable that yields the mutual items of the source Iterable\n   * and the other Iterable.\n   * @param {!Iterable} it\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static innerJoin(it, other) {\n    return innerJoin(it, other);\n  }\n\n  /**\n   * Returns an Iterable that yields the mutual items of this Iterable\n   * and the other Iterable.\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  innerJoin(other) {\n    return innerJoin(this.it, other);\n  }\n\n  /**\n   * Inserts the yields of the other Iterable in between\n   * the source Iterable adjacent yields.\n   * @param {!Iterable} it\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static intercalate(it, other) {\n    return intercalate(it, other);\n  }\n\n  /**\n   * Inserts the yields of the other Iterable in between\n   * this Iterable adjacent yields.\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  intercalate(other) {\n    return intercalate(this.it, other);\n  }\n\n  /**\n   * Returns an Iterable that yields the items of the source Iterable\n   * that exists in the other Iterable.\n   * @param {!Iterable} it\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static intersect(it, other) {\n    return intersect(it, other);\n  }\n\n  /**\n   * Returns an Iterable that yields the items of the source Iterable\n   * that exists in the other Iterable.\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  intersect(other) {\n    return intersect(this.it, other);\n  }\n\n  /**\n   * Inserts the given value in between\n   * the source Iterable adjacent yields.\n   * @param {!Iterable} it\n   * @param {any} value\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static intersperse(it, value) {\n    return intersperse(it, value);\n  }\n\n  /**\n   * Inserts the yields of the other Iterable in between\n   * this Iterable adjacent yields.\n   * @param {any} value\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  intersperse(value) {\n    return intersperse(this.it, value);\n  }\n\n  /**\n   * Returns an Iterable that yields true if this\n   * Iterable is empty.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static isEmpty(it) {\n    return isEmpty(it);\n  }\n\n  /**\n   * Returns an Iterable that yields the true if this\n   * Iterable is empty.\n   * @returns {Iterable}\n   */\n  isEmpty() {\n    return isEmpty(this.it);\n  }\n\n  /**\n   * Returns an Iterable that yields a single value.\n   * @param {any} value\n   * @returns {Iterable}\n   */\n  static just(value) {\n    return just(value);\n  }\n\n  /**\n   * Returns an Iterable that yields the last value of the source\n   * Iterable that satisfy a predicate(optional).\n   * @param {!Iterable} it\n   * @param {function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function or undefined\n   * @returns {Iterable}\n   */\n  static last(it, predicate) {\n    return last(it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields the last value of the source\n   * Iterable that satisfy a predicate(optional).\n   * @param {function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function or undefined\n   * @returns {Iterable}\n   */\n  last(predicate) {\n    return last(this.it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields theitems of the source Iterable\n   * and the items of the other Iterable that are in the source Iterable.\n   * @param {!Iterable} it\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static leftJoin(it, other) {\n    return leftJoin(it, other);\n  }\n\n  /**\n   * Returns an Iterable that yields theitems of the source Iterable\n   * and the items of the other Iterable that are in this Iterable.\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  leftJoin(other) {\n    return leftJoin(this.it, other);\n  }\n\n  /**\n   * Applies a mapping function to each yielded value of the source\n   * Iterable.\n   * @param {!Iterable} it\n   * @param {!function(item: any):any} fn\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given mapper is not a function\n   * @returns {Iterable}\n   */\n  static map(it, fn) {\n    return map(it, fn);\n  }\n\n  /**\n   * Applies a mapping function to each yielded value of this\n   * Iterable.\n   * @param {!function(item: any):any} fn\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  map(fn) {\n    return map(this.it, fn);\n  }\n\n  /**\n   * Returns an Iterable that yields the maximum value of\n   * the source Iterable's yields.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static max(it) {\n    return max(it);\n  }\n\n  /**\n   * Returns an Iterable that yields the maximum value of\n   * this Iterable's yields.\n   * @returns {Iterable}\n   */\n  max() {\n    return max(this.it);\n  }\n\n  /**\n   * Returns an Iterable that yields the minimum value of\n   * the source Iterable's yields.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static min(it) {\n    return min(it);\n  }\n\n  /**\n   * Returns an Iterable that yields the minimum value of\n   * this Iterable's yields.\n   * @returns {Iterable}\n   */\n  min() {\n    return min(this.it);\n  }\n\n  /**\n   * Attaches a callback to a source Iterable that is\n   * executed when the Iterable finishes the iteration\n   * process.\n   * @param {!Iterable} it\n   * @param {!function} fn\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given action is not a function\n   * @returns {Iterable}\n   */\n  static onDone(it, fn) {\n    return onDone(it, fn);\n  }\n\n  /**\n   * Attaches a callback to this Iterable that is\n   * executed when this Iterable finishes the iteration\n   * process.\n   * @param {!function} fn\n   * @throws {BadArgumentError}\n   * throws error if the given action is not a function\n   * @returns {Iterable}\n   */\n  onDone(fn) {\n    return onDone(this.it, fn);\n  }\n\n  /**\n   * Attaches a callback to a source Iterable that is\n   * executed when the Iterable finishes the iteration\n   * process.\n   * @param {!Iterable} it\n   * @param {!function} fn\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given action is not a function\n   * @returns {Iterable}\n   */\n  static onStart(it, fn) {\n    return onStart(it, fn);\n  }\n\n  /**\n   * Attaches a callback to this Iterable that is\n   * executed when this Iterable finishes the iteration\n   * process.\n   * @param {!function} fn\n   * @throws {BadArgumentError}\n   * throws error if the given action is not a function\n   * @returns {Iterable}\n   */\n  onStart(fn) {\n    return onStart(this.it, fn);\n  }\n\n  /**\n   * Attaches a callback to a source Iterable that is\n   * executed whenever the source Iterable yields\n   * a value.\n   * @param {!Iterable} it\n   * @param {!function(item: any)} fn\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given consumer is not a function\n   * @returns {Iterable}\n   */\n  static onYield(it, fn) {\n    return onYield(it, fn);\n  }\n\n  /**\n   * Attaches a callback to this Iterable that is\n   * executed whenever this Iterable yields\n   * a value.\n   * @param {!function(item: any)} fn\n   * @throws {BadArgumentError}\n   * throws error if the given consumer is not a function\n   * @returns {Iterable}\n   */\n  onYield(fn) {\n    return onYield(this.it, fn);\n  }\n\n  /**\n   * Returns an Iterable that yields the non-mutual items of the source Iterable\n   * and the other Iterable.\n   * @param {!Iterable} it\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static outerJoin(it, other) {\n    return outerJoin(it, other);\n  }\n\n  /**\n   * Returns an Iterable that yields the non-mutual items of this Iterable\n   * and the other Iterable.\n   * @param {!Iterable} other\n   * @throws {BadArgumentError}\n   * throws error if the other given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  outerJoin(other) {\n    return outerJoin(this.it, other);\n  }\n\n  /**\n   * Given a predicate and an Iterable, return a pair of Iterables\n   * which do and do not satisfy the predicate, respectively.\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given consumer is not a function\n   * @returns {Iterable}\n   */\n  static partition(it, predicate) {\n    return partition(it, predicate);\n  }\n\n  /**\n   * Given a predicate and an Iterable, return a pair of Iterables\n   * which do and do not satisfy the predicate, respectively.\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given consumer is not a function\n   * @returns {Iterable}\n   */\n  partition(predicate) {\n    return partition(this.it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields a sequence of numbers\n   * within a specified range.\n   * @param {!number} start\n   * @param {!number} end\n   * @param {?number} steps\n   * @returns {Iterable}\n   */\n  static range(start, end, steps) {\n    return range(start, end, steps);\n  }\n\n  /**\n   * Returns an Iterable that applies a specified accumulator function\n   * to the first item yielded by a source Iterable, then feeds the\n   * result of that function along with the second item yielded by\n   * the source Iterable into the same function, and so on until all\n   * items have been yielded by the finite source Iterable, and yields\n   * the final result from the final call to your function as its sole item.\n   * @param {!Iterable} it\n   * @param {!function(acc: any, item: any):any} reducer\n   * @param {any} seed\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given reducer is not a function\n   * @returns {Iterable}\n   */\n  static reduce(it, reducer, seed) {\n    return reduce(it, reducer, seed);\n  }\n\n  /**\n   * Returns an Iterable that applies a specified accumulator function\n   * to the first item yielded by a source Iterable, then feeds the\n   * result of that function along with the second item yielded by\n   * the source Iterable into the same function, and so on until all\n   * items have been yielded by the finite source Iterable, and yields\n   * the final result from the final call to your function as its sole item.\n   * @param {!function(acc: any, item: any):any} reducer\n   * @param {any} seed\n   * @throws {BadArgumentError}\n   * throws error if the given reducer is not a function\n   * @returns {Iterable}\n   */\n  reduce(reducer, seed) {\n    return reduce(this.it, reducer, seed);\n  }\n\n  /**\n   * Returns an Iterable that applies a specified accumulator function\n   * to the last item yielded by a source Iterable, then feeds the\n   * result of that function along with the second last item yielded by\n   * the source Iterable into the same function, and so on until all\n   * items have been yielded by the finite source Iterable, and yields\n   * the final result from the final call to your function as its sole item.\n   * @param {!Iterable} it\n   * @param {!function(acc: any, item: any):any} reducer\n   * @param {any} seed\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given reducer is not a function\n   * @returns {Iterable}\n   */\n  static reduceRight(it, reducer, seed) {\n    return reduceRight(it, reducer, seed);\n  }\n\n  /**\n   * Returns an Iterable that applies a specified accumulator function\n   * to the last item yielded by a source Iterable, then feeds the\n   * result of that function along with the second last item yielded by\n   * the source Iterable into the same function, and so on until all\n   * items have been yielded by the finite source Iterable, and yields\n   * the final result from the final call to your function as its sole item.\n   * @param {!function(acc: any, item: any):any} reducer\n   * @param {any} seed\n   * @throws {BadArgumentError}\n   * throws error if the given reducer is not a function\n   * @returns {Iterable}\n   */\n  reduceRight(reducer, seed) {\n    return reduceRight(this.it, reducer, seed);\n  }\n\n  /**\n   * Repeats the yielded values of a source Iterable by a certain\n   * amount.\n   * @param {!Iterable} it\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  static repeat(it, amount) {\n    return repeat(it, amount);\n  }\n\n  /**\n   * Repeats the yielded values of this Iterable by a certain\n   * amount.\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  repeat(amount) {\n    return repeat(this.it, amount);\n  }\n\n  /**\n   * Returns an Iterable that replaces the value at the\n   * given index of the source Iterable with the given value.\n   * @param {!Iterable} it\n   * @param {!number} index\n   * @param {any} value\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given index is not a number.\n   * @returns {Iterable}\n   */\n  static replace(it, index, value) {\n    return replace(it, index, value);\n  }\n\n  /**\n   * Returns an Iterable that replaces the value at the\n   * given index of this Iterable with the given value.\n   * @param {!number} index\n   * @param {any} value\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given index is not a number.\n   * @returns {Iterable}\n   */\n  replace(index, value) {\n    return replace(this.it, index, value);\n  }\n\n  /**\n   * Reverses the yield sequence of the source Iterable\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static reverse(it) {\n    return reverse(it);\n  }\n\n  /**\n   * Reverses the yield sequence of this Iterable\n   * @returns {Iterable}\n   */\n  reverse() {\n    return reverse(this.it);\n  }\n\n  /**\n   * Returns an Iterable that applies a specified accumulator function\n   * to the first item yielded by a source Iterable, then feeds the result\n   * of that function along with the second item yielded by the source\n   * Iterable into the same function, and so on until all items have been\n   * yielded by the source Iterable, yielding the result of each of these iterations.\n   * @param {!Iterable} it\n   * @param {!function(acc: any, item: any):any} reducer\n   * @param {any} seed\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given reducer is not a function\n   * @returns {Iterable}\n   */\n  static scan(it, reducer, seed) {\n    return scan(it, reducer, seed);\n  }\n\n  /**\n   * Returns an Iterable that applies a specified accumulator function\n   * to the first item yielded by a source Iterable, then feeds the result\n   * of that function along with the second item yielded by the source\n   * Iterable into the same function, and so on until all items have been\n   * yielded by the source Iterable, yielding the result of each of these iterations.\n   * @param {!function(acc: any, item: any):any} reducer\n   * @param {any} seed\n   * @throws {BadArgumentError}\n   * throws error if the given reducer is not a function\n   * @returns {Iterable}\n   */\n  scan(reducer, seed) {\n    return scan(this.it, reducer, seed);\n  }\n\n  /**\n   * Returns an Iterable that applies a specified accumulator function\n   * to the last item yielded by a source Iterable, then feeds the result\n   * of that function along with the second last item yielded by the source\n   * Iterable into the same function, and so on until all items have been\n   * yielded by the source Iterable, yielding the result of each of these iterations.\n   * @param {!Iterable} it\n   * @param {!function(acc: any, item: any):any} reducer\n   * @param {any} seed\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given reducer is not a function\n   * @returns {Iterable}\n   */\n  static scanRight(it, reducer, seed) {\n    return scanRight(it, reducer, seed);\n  }\n\n  /**\n   * Returns an Iterable that applies a specified accumulator function\n   * to the last item yielded by a source Iterable, then feeds the result\n   * of that function along with the second last item yielded by the source\n   * Iterable into the same function, and so on until all items have been\n   * yielded by the source Iterable, yielding the result of each of these iterations.\n   * @param {!function(acc: any, item: any):any} reducer\n   * @param {any} seed\n   * @throws {BadArgumentError}\n   * throws error if the given reducer is not a function\n   * @returns {Iterable}\n   */\n  scanRight(reducer, seed) {\n    return scanRight(this.it, reducer, seed);\n  }\n\n  /**\n   * Returns an Iterable that skips the first count items yielded by\n   * the source Iterable and yields the remainder.\n   * @param {!Iterable} it\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  static skip(it, amount) {\n    return skip(it, amount);\n  }\n\n  /**\n   * Returns an Iterable that skips the first count items yielded by\n   * the source Iterable and yields the remainder.\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  skip(amount) {\n    return skip(this.it, amount);\n  }\n\n  /**\n   * Returns an Iterable that drops a specified number of items\n   * from the end of the sequence yielded by the source\n   * Iterable.\n   * @param {!Iterable} it\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  static skipLast(it, amount) {\n    return skipLast(it, amount);\n  }\n\n  /**\n   * Returns an Iterable that drops a specified number of items\n   * from the end of the sequence yielded by this Iterable.\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  skipLast(amount) {\n    return skipLast(this.it, amount);\n  }\n\n  /**\n   * Returns an Iterable that skips all items yielded by the source\n   * Iterable as long as a specified condition holds false, but yields\n   * all further source items as soon as the condition becomes true.\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static skipUntil(it, predicate) {\n    return skipUntil(it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that skips all items yielded by the source\n   * Iterable as long as a specified condition holds false, but yields\n   * all further source items as soon as the condition becomes true.\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  skipUntil(predicate) {\n    return skipUntil(this.it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that skips all items yielded by the source\n   * Iterable as long as a specified condition holds true, but yields\n   * all further source items as soon as the condition becomes false.\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static skipWhile(it, predicate) {\n    return skipWhile(it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that skips all items yielded by the source\n   * Iterable as long as a specified condition holds true, but yields\n   * all further source items as soon as the condition becomes false.\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  skipWhile(predicate) {\n    return skipWhile(this.it, predicate);\n  }\n\n  /**\n   * Returns a portion of the source Iterable as a new Iterable.\n   * @param {!Iterable} it\n   * @param {!number} start\n   * @param {!number} end\n   * @throws {BadArgumentError}\n   * throws error if the given iterables is not an array\n   * @returns {Iterable}\n   */\n  static slice(it, start, end) {\n    return slice(it, start, end);\n  }\n\n\n  /**\n   * Returns a portion of this Iterable as a new Iterable.\n   * @param {!number} start\n   * @param {!number} end\n   * @throws {BadArgumentError}\n   * throws error if the given iterables is not an array\n   * @returns {Iterable}\n   */\n  slice(start, end) {\n    return slice(this.it, start, end);\n  }\n\n  /**\n   * Returns a new sorted Iterable base from the source Iterable.\n   * which returns a signum can be provided.\n   * @param {!Iterable} it\n   * @param {!function(a: any, b: any):number} comparator\n   * @throws {BadArgumentError}\n   * throws error if the given iterables is not an array\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function or undefined\n   * @returns {Iterable}\n   */\n  static sort(it, comparator) {\n    return sort(it, comparator);\n  }\n\n  /**\n   * Returns a new sorted Iterable base from this Iterable.\n   * A comparator function which returns a signum can be provided.\n   * @param {!function(a: any, b: any):number} comparator\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function or undefined\n   * @returns {Iterable}\n   */\n  sort(comparator) {\n    return sort(this.it, comparator);\n  }\n\n  /**\n   * Returns an Iterable that yields true if the source Iterable\n   * (with an optional comparator) is sorted.\n   * @param {!Iterable} it\n   * @param {!function(a: any, b: any):number} comparator\n   * @throws {BadArgumentError}\n   * throws error if the given iterables is not an array\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function or undefined\n   * @returns {Iterable}\n   */\n  static sorted(it, comparator) {\n    return sorted(it, comparator);\n  }\n\n  /**\n   * Returns an Iterable that yields true if the source Iterable\n   * (with an optional comparator) is sorted.\n   * @param {!function(a: any, b: any):number} comparator\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function or undefined\n   * @returns {Iterable}\n   */\n  sorted(comparator) {\n    return sorted(this.it, comparator);\n  }\n\n  /**\n   * Split an Iterable into a longest prefix such that all\n   * the elements of it do satisfy a given predicate,\n   * and the rest of the Iterable following them.\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static spanWith(it, predicate) {\n    return spanWith(it, predicate);\n  }\n\n  /**\n   * Split an Iterable into a longest prefix such that all\n   * the elements of it do satisfy a given predicate,\n   * and the rest of the Iterable following them.\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  spanWith(predicate) {\n    return spanWith(this.it, predicate);\n  }\n\n  /**\n   * Given an index, get a two-tuple of Iterable\n   * from the start of the source Iterable,\n   * and the Iterable that follows them.\n   * @param {!Iterable} it\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Array}\n   */\n  static split(it, amount) {\n    return split(it, amount);\n  }\n\n  /**\n   * Given an index, get a two-tuple of Iterable\n   * from the start of this Iterable,\n   * and the Iterable that follows them.\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Array}\n   */\n  split(amount) {\n    return split(this.it, amount);\n  }\n\n  /**\n   * Same to concat, except that it prefixes the source Iterable\n   * to a set of values into a single Iterable.\n   *\n   * If a value is an Iterable, startWith removes a single layer\n   * of nesting\n   *\n   * @param {!Iterable} it\n   * @param  {...any} its\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static startWith(it, ...its) {\n    return startWith(it, ...its);\n  }\n\n  /**\n   * Same to concat, except that it prefixes this Iterable\n   * to a set of values into a single Iterable.\n   *\n   * If a value is an Iterable, startWith removes a single layer\n   * of nesting\n   *\n   * @param  {...any} its\n   * @returns {Iterable}\n   */\n  startWith(...its) {\n    return startWith(this.it, ...its);\n  }\n\n  /**\n   * Returns an Iterable that yields only the elements whose indices\n   * are divisible by the given amount\n   * @param {!Iterable} it\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  static step(it, amount) {\n    return step(it, amount);\n  }\n\n  /**\n   * Returns an Iterable that yields only the first count items yielded by\n   * this Iterable.\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  step(amount) {\n    return step(this.it, amount);\n  }\n\n  /**\n   * Returns an Iterable that yields the summation of\n   * the source Iterable's yields.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Iterable}\n   */\n  static sum(it) {\n    return sum(it);\n  }\n\n  /**\n   * Returns an Iterable that yields the summation of\n   * this Iterable's yields.\n   * @returns {Iterable}\n   */\n  sum() {\n    return sum(this.it);\n  }\n\n  /**\n   * Returns an Iterable that yields only the first count items yielded by the\n   * source Iterable.\n   * @param {!Iterable} it\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  static take(it, amount) {\n    return take(it, amount);\n  }\n\n  /**\n   * Returns an Iterable that yields only the first count items yielded by\n   * this Iterable.\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  take(amount) {\n    return take(this.it, amount);\n  }\n\n  /**\n   * Returns an Iterable that yields at most the last amount\n   * items yielded by the source Iterable.\n   * @param {!Iterable} it\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  static takeLast(it, amount) {\n    return takeLast(it, amount);\n  }\n\n  /**\n   * Returns an Iterable that yields at most the last amount\n   * items yielded by the source Iterable.\n   * @param {!number} amount\n   * @throws {BadArgumentError}\n   * throws error if the given amount is not a number.\n   * @returns {Iterable}\n   */\n  takeLast(amount) {\n    return takeLast(this.it, amount);\n  }\n\n  /**\n   * Returns an Iterable that yields items yielded by the source Iterable\n   * so long as each item does not satisfie a specified condition, and then\n   * completes as soon as this condition is satisfied.\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static takeUntil(it, predicate) {\n    return takeUntil(it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields items yielded by this Iterable\n   * so long as each item does not satisfie a specified condition, and then\n   * completes as soon as this condition is satisfied.\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  takeUntil(predicate) {\n    return takeUntil(this.it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields items yielded by the source Iterable\n   * so long as each item satisfied a specified condition, and then\n   * completes as soon as this condition is not satisfied.\n   * @param {!Iterable} it\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static takeWhile(it, predicate) {\n    return takeWhile(it, predicate);\n  }\n\n  /**\n   * Returns an Iterable that yields items yielded by this Iterable\n   * so long as each item satisfied a specified condition, and then\n   * completes as soon as this condition is not satisfied.\n   * @param {!function(item: any):boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  takeWhile(predicate) {\n    return takeWhile(this.it, predicate);\n  }\n\n  /**\n   * Converts the source Iterable into an array of its yield\n   * sequence.\n   * @param {!Iterable} it\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @returns {Array}\n   */\n  static toArray(it) {\n    return toArray(it);\n  }\n\n  /**\n   * Converts this Iterable into an array of its yield\n   * sequence.\n   * @returns {Array}\n   */\n  toArray() {\n    return toArray(this.it);\n  }\n\n  /**\n   * Returns an Iterable that repeats the yields of the source\n   * Iterable as long as the given predicate supplies a truthy\n   * value.\n   * @param {!Iterable} it\n   * @param {!function():boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given Iterable doesn't implement the Iteration Protocol\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  static whileDo(it, predicate) {\n    return whileDo(it, predicate);\n  }\n\n\n  /**\n   * Returns an Iterable that repeats the yields of this\n   * Iterable as long as the given predicate supplies a truthy\n   * value.\n   * @param {!function():boolean} predicate\n   * @throws {BadArgumentError}\n   * throws error if the given predicate is not a function\n   * @returns {Iterable}\n   */\n  whileDo(predicate) {\n    return whileDo(this.it, predicate);\n  }\n\n  /**\n   * combine the yields of multiple Iterables together via a specified function and\n   * yields single items for each combination based on the results of this function.\n   * @param {!Array} its\n   * @param {!function(yields: Array):any} fn\n   * @throws {BadArgumentError}\n   * throws error if the given iterables is not an array\n   * @throws {BadArgumentError}\n   * throws error if the given zipper is not a function or undefined\n   * @returns {Iterable}\n   */\n  static zip(its, fn) {\n    return zip(its, fn);\n  }\n\n  /**\n   * combine the yields of this Iterable with multiple Iterables together via a specified\n   * function and yields single items for each combination based on the results of this\n   * function.\n   * @param {!Array} its\n   * @param {!function(yields: Array):any} fn\n   * @throws {BadArgumentError}\n   * throws error if the given iterables is not an array\n   * @throws {BadArgumentError}\n   * throws error if the given zipper is not a function or undefined\n   * @returns {Iterable}\n   */\n  zip(its, fn) {\n    return zip([this.it, ...its], fn);\n  }\n\n  /**\n   * Implements the Iterator Protocol for this Iterable.\n   * @ignore\n   */\n  [ITERATOR]() {\n    return this.it[ITERATOR]();\n  }\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/src/iterable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "external",
    "name": "Iteration Protocol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols",
    "memberof": "src/iterable.js",
    "static": true,
    "longname": "src/iterable.js~Iteration Protocol",
    "access": "public",
    "description": "",
    "lineNumber": 32
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "name": "isNaN",
    "memberof": "src/iterable.js",
    "static": true,
    "longname": "src/iterable.js~isNaN",
    "access": "public",
    "export": false,
    "importPath": "@lxsmnsyc/iterable-js/src/iterable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "class",
    "name": "Iterable",
    "memberof": "src/iterable.js",
    "static": true,
    "longname": "src/iterable.js~Iterable",
    "access": "public",
    "export": true,
    "importPath": "@lxsmnsyc/iterable-js/src/iterable.js",
    "importStyle": "Iterable",
    "description": "The Iterable class serves as a super set of all objects\nthat implements the Iteration Protocol.\n\nIterable allows the unification and abstraction\nof these objects.\n\nIterable also provides operators which allows to\ntransform an Iterable into a new one, making Iterable\nan Immutable.",
    "lineNumber": 63,
    "interface": false
  },
  {
    "__docId__": 289,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#constructor",
    "access": "public",
    "description": "Returns an Iterable with the given object.\n\nThis object must be either a generator or an object\nthat implements the Iteration Protocol.",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "it",
    "memberof": "src/iterable.js~Iterable",
    "static": false,
    "longname": "src/iterable.js~Iterable#it",
    "access": "public",
    "description": "",
    "lineNumber": 82,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "get",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#get",
    "access": "public",
    "description": "Similar to elementAt, excepts that this method\nreturns the actual value at the given index.",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "is",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.is",
    "access": "public",
    "description": "Checks if a given Object follows the Iterator Protocol.",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "all",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.all",
    "access": "public",
    "description": "Returns an Iterable that yields true if all of the yields of the\nsource Iterable passes the predicate function, false if not.",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "all",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#all",
    "access": "public",
    "description": "Returns an Iterable that yields true if all of the yields of\nthis Iterable passes the predicate function, false if not.",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "any",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.any",
    "access": "public",
    "description": "Returns an Iterable that yields true if any of the yields of the\nsource Iterable passes the predicate function, false if not.",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "any",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#any",
    "access": "public",
    "description": "Returns an Iterable that yields true if any of the yields of\nthis Iterable passes the predicate function, false if not.",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "average",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.average",
    "access": "public",
    "description": "Returns an Iterable that yields the average value of\nthe source Iterable's yields.",
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "average",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#average",
    "access": "public",
    "description": "Returns an Iterable that yields the average value of\nthis Iterable's yields.",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "breadthFirst",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.breadthFirst",
    "access": "public",
    "description": "Performs a breadth-first flattening method to the source Iterable:\nshallow elements are yielded first before deeper elements.",
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "breadthFirst",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#breadthFirst",
    "access": "public",
    "description": "Performs a breadth-first flattening method to this Iterable:\nshallow elements are yielded first before deeper elements.",
    "lineNumber": 221,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "buffer",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.buffer",
    "access": "public",
    "description": "Returns an Iterable that yields Iterable buffers of items\nit collects from the source Iterable.",
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "buffer",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#buffer",
    "access": "public",
    "description": "Returns an Iterable that yields Iterable buffers of items\nit collects from this Iterable.",
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "breakWith",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.breakWith",
    "access": "public",
    "description": "Split an Iterable into a longest prefix such that all\nthe elements of it do not satisfy a given predicate,\nand the rest of the Iterable following them.",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "breakWith",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#breakWith",
    "access": "public",
    "description": "Split an Iterable into a longest prefix such that all\nthe elements of it do not satisfy a given predicate,\nand the rest of the Iterable following them.",
    "lineNumber": 271,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "cache",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.cache",
    "access": "public",
    "description": "Caches all yields of the source Iterable, for the purpose\nof not re-running the computing function that yields\nthe result.",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "cache",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#cache",
    "access": "public",
    "description": "Caches all yields of this Iterable, for the purpose\nof not re-running the computing function that yields\nthe result.",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "compose",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.compose",
    "access": "public",
    "description": "Transforms the source Iterable by applying a composer function. This\nis useful for creating your own Iterable operators.",
    "lineNumber": 311,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...function(iterable: Iterable):Iterable"
        ],
        "spread": true,
        "optional": false,
        "name": "composers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if one of the given composers is not a function."
      },
      {
        "types": [
          "TypeError"
        ],
        "description": "throws error if a given composer returned a non-Iterable."
      }
    ]
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "compose",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#compose",
    "access": "public",
    "description": "Transforms this Iterable by applying a composer function. This\nis useful for creating your own Iterable operators.",
    "lineNumber": 325,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...function(iterable: Iterable):Iterable"
        ],
        "spread": true,
        "optional": false,
        "name": "composers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if one of the given composers is not a function."
      },
      {
        "types": [
          "TypeError"
        ],
        "description": "throws error if a given composer returned a non-Iterable."
      }
    ]
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "concat",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.concat",
    "access": "public",
    "description": "Concatenates the given set of Iterables into a single Iterable.\n\nIf a value is an Iterable, concat removes a single layer\nof nesting",
    "lineNumber": 337,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "its",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "concat",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#concat",
    "access": "public",
    "description": "Concatenates the given Iterables to this Iterable.\n\nIf a value is an Iterable, concat removes a single layer\nof nesting",
    "lineNumber": 350,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "its",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "contains",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.contains",
    "access": "public",
    "description": "Returns an Iterable that yields a Boolean that indicates\nwhether the source Iterable yielded a specified item.",
    "lineNumber": 363,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "contains",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#contains",
    "access": "public",
    "description": "Returns an Iterable that yields a Boolean that indicates\nwhether the source Iterable yielded a specified item.",
    "lineNumber": 373,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "count",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.count",
    "access": "public",
    "description": "Returns an Iterable that counts the total number of items\nyielded by the source Iterable and yields this count.",
    "lineNumber": 385,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "count",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#count",
    "access": "public",
    "description": "Returns an Iterable that counts the total number of items\nyielded by this Iterable and yields this count.",
    "lineNumber": 394,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "defaultIfEmpty",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.defaultIfEmpty",
    "access": "public",
    "description": "Returns an Iterable that yields the items yielded by\nthe source Iterable or a specified default item if\nthe source Iterable is empty.",
    "lineNumber": 408,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "defaultIfEmpty",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#defaultIfEmpty",
    "access": "public",
    "description": "Returns an Iterable that yields the items yielded by\nthe source Iterable or a specified default item if\nthe source Iterable is empty.",
    "lineNumber": 421,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "depthFirst",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.depthFirst",
    "access": "public",
    "description": "Performs a depth-first flattening method to the source Iterable. This\nis the same as the flat method except that depthFirst removes all nesting.",
    "lineNumber": 433,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "depthFirst",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#depthFirst",
    "access": "public",
    "description": "Performs a depth-first flattening method to this Iterable. This\nis the same as the flat method except that depthFirst removes all nesting.",
    "lineNumber": 443,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "diff",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.diff",
    "access": "public",
    "description": "Returns an Iterable that yields the items of the source Iterable\nthat does not exist in the other Iterable.",
    "lineNumber": 458,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "diff",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#diff",
    "access": "public",
    "description": "Returns an Iterable that yields the items of the source Iterable\nthat does not exist in the other Iterable.",
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "distinct",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.distinct",
    "access": "public",
    "description": "Returns an Iterable that yields all items yielded by the\nsource Iterable that are distinct based on the strict equality\ncomparison.",
    "lineNumber": 483,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "distinct",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#distinct",
    "access": "public",
    "description": "Returns an Iterable that yields all items yielded by this Iterable\nthat are distinct based on the strict equality comparison.",
    "lineNumber": 492,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "distinctAdjacent",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.distinctAdjacent",
    "access": "public",
    "description": "Returns an Iterable that yields all items yielded by the\nsource Iterable that are distinct from their immediate\npredecessors based on strict equality comparison.",
    "lineNumber": 505,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "distinctAdjacent",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#distinctAdjacent",
    "access": "public",
    "description": "Returns an Iterable that yields all items yielded by this\nIterable that are distinct from their immediate predecessors\nbased on strict equality comparison.",
    "lineNumber": 515,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "doWhile",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.doWhile",
    "access": "public",
    "description": "Returns an Iterable that yields the values of the source Iterable\nand repeats the sequence as long as the given predicate supplies a truthy\nvalue.",
    "lineNumber": 531,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function():boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "doWhile",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#doWhile",
    "access": "public",
    "description": "Returns an Iterable that yields the values of the source Iterable\nand repeats the sequence as long as the given predicate supplies a truthy\nvalue.",
    "lineNumber": 545,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "elementAt",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.elementAt",
    "access": "public",
    "description": "Returns an Iterable that yields the single item at a specified\nindex in a sequence of yields from the source Iterable.",
    "lineNumber": 560,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given index is not a number."
      }
    ]
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "elementAt",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#elementAt",
    "access": "public",
    "description": "Returns an Iterable that yields the single item at a specified\nindex in a sequence of yields from this Iterable.",
    "lineNumber": 572,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given index is not a number."
      }
    ]
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "empty",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.empty",
    "access": "public",
    "description": "Returns an Iterable that doesn't yield any value.",
    "lineNumber": 580,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "equal",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.equal",
    "access": "public",
    "description": "Returns an Iterable that yields true if the source Iterable\nhas the same exact sequence as the other Iterable.",
    "lineNumber": 595,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "equal",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#equal",
    "access": "public",
    "description": "Returns an Iterable that yields true if the source Iterable\nhas the same exact sequence as the other Iterable.",
    "lineNumber": 607,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "filter",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.filter",
    "access": "public",
    "description": "Filters the yields of a source Iterable with a filter function.",
    "lineNumber": 622,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "filter",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#filter",
    "access": "public",
    "description": "Filters the yields of this Iterable with a filter function.",
    "lineNumber": 633,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "find",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.find",
    "access": "public",
    "description": "Finds the index of the first element that satisfy a predicate.",
    "lineNumber": 645,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "find",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#find",
    "access": "public",
    "description": "Finds the index of the first element that satisfy a predicate.",
    "lineNumber": 654,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "first",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.first",
    "access": "public",
    "description": "Returns an Iterable that yields the first value of the source\nIterable that satisfy a predicate(optional).",
    "lineNumber": 669,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function or undefined"
      }
    ]
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "first",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#first",
    "access": "public",
    "description": "Returns an Iterable that yields the first value of the source\nIterable that satisfy a predicate(optional).",
    "lineNumber": 681,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function or undefined"
      }
    ]
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "flat",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.flat",
    "access": "public",
    "description": "Flattens the source Iterable by removing a single layer of\nnesting for the yielded Iterables.",
    "lineNumber": 693,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "flat",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#flat",
    "access": "public",
    "description": "Flattens this Iterable by removing a single layer of nesting\nfor the yielded Iterables.",
    "lineNumber": 702,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "flatMap",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.flatMap",
    "access": "public",
    "description": "Returns an Iterable that yields items based on applying a\nfunction that you supply to each item yielded by the source\nIterable, where that function returns an Iterable, and then\nmerging those resulting Iterable and yielding the results of this merger.",
    "lineNumber": 719,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given mapper is not a function"
      }
    ]
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "flatMap",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#flatMap",
    "access": "public",
    "description": "Returns an Iterable that yields items based on applying a\nfunction that you supply to each item yielded by this\nIterable, where that function returns an Iterable, and then\nmerging those resulting Iterable and yielding the results of this merger.",
    "lineNumber": 733,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given mapper is not a function"
      }
    ]
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "ignoreElements",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.ignoreElements",
    "access": "public",
    "description": "Returns an Iterable that ignores the source Iterable's yields;",
    "lineNumber": 744,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "ignoreElements",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#ignoreElements",
    "access": "public",
    "description": "Returns an Iterable that doesn't yield any value.",
    "lineNumber": 752,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "indexOf",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.indexOf",
    "access": "public",
    "description": "Returns an Iterable that yields the index of the\ngiven value if it the source Iterable yields the same\nvalue.",
    "lineNumber": 766,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "indexOf",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#indexOf",
    "access": "public",
    "description": "Returns an Iterable that yields the index of the\ngiven value if it this Iterable yields the same\nvalue.",
    "lineNumber": 777,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "innerJoin",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.innerJoin",
    "access": "public",
    "description": "Returns an Iterable that yields the mutual items of the source Iterable\nand the other Iterable.",
    "lineNumber": 792,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "innerJoin",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#innerJoin",
    "access": "public",
    "description": "Returns an Iterable that yields the mutual items of this Iterable\nand the other Iterable.",
    "lineNumber": 804,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "intercalate",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.intercalate",
    "access": "public",
    "description": "Inserts the yields of the other Iterable in between\nthe source Iterable adjacent yields.",
    "lineNumber": 819,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "intercalate",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#intercalate",
    "access": "public",
    "description": "Inserts the yields of the other Iterable in between\nthis Iterable adjacent yields.",
    "lineNumber": 831,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "intersect",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.intersect",
    "access": "public",
    "description": "Returns an Iterable that yields the items of the source Iterable\nthat exists in the other Iterable.",
    "lineNumber": 846,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "intersect",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#intersect",
    "access": "public",
    "description": "Returns an Iterable that yields the items of the source Iterable\nthat exists in the other Iterable.",
    "lineNumber": 858,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "intersperse",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.intersperse",
    "access": "public",
    "description": "Inserts the given value in between\nthe source Iterable adjacent yields.",
    "lineNumber": 873,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "intersperse",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#intersperse",
    "access": "public",
    "description": "Inserts the yields of the other Iterable in between\nthis Iterable adjacent yields.",
    "lineNumber": 885,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.isEmpty",
    "access": "public",
    "description": "Returns an Iterable that yields true if this\nIterable is empty.",
    "lineNumber": 897,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#isEmpty",
    "access": "public",
    "description": "Returns an Iterable that yields the true if this\nIterable is empty.",
    "lineNumber": 906,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "just",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.just",
    "access": "public",
    "description": "Returns an Iterable that yields a single value.",
    "lineNumber": 915,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "last",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.last",
    "access": "public",
    "description": "Returns an Iterable that yields the last value of the source\nIterable that satisfy a predicate(optional).",
    "lineNumber": 930,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function or undefined"
      }
    ]
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "last",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#last",
    "access": "public",
    "description": "Returns an Iterable that yields the last value of the source\nIterable that satisfy a predicate(optional).",
    "lineNumber": 942,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function or undefined"
      }
    ]
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "leftJoin",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.leftJoin",
    "access": "public",
    "description": "Returns an Iterable that yields theitems of the source Iterable\nand the items of the other Iterable that are in the source Iterable.",
    "lineNumber": 957,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "leftJoin",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#leftJoin",
    "access": "public",
    "description": "Returns an Iterable that yields theitems of the source Iterable\nand the items of the other Iterable that are in this Iterable.",
    "lineNumber": 969,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "map",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.map",
    "access": "public",
    "description": "Applies a mapping function to each yielded value of the source\nIterable.",
    "lineNumber": 984,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given mapper is not a function"
      }
    ]
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "map",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#map",
    "access": "public",
    "description": "Applies a mapping function to each yielded value of this\nIterable.",
    "lineNumber": 996,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "max",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.max",
    "access": "public",
    "description": "Returns an Iterable that yields the maximum value of\nthe source Iterable's yields.",
    "lineNumber": 1008,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "max",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#max",
    "access": "public",
    "description": "Returns an Iterable that yields the maximum value of\nthis Iterable's yields.",
    "lineNumber": 1017,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "min",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.min",
    "access": "public",
    "description": "Returns an Iterable that yields the minimum value of\nthe source Iterable's yields.",
    "lineNumber": 1029,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "min",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#min",
    "access": "public",
    "description": "Returns an Iterable that yields the minimum value of\nthis Iterable's yields.",
    "lineNumber": 1038,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "onDone",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.onDone",
    "access": "public",
    "description": "Attaches a callback to a source Iterable that is\nexecuted when the Iterable finishes the iteration\nprocess.",
    "lineNumber": 1054,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given action is not a function"
      }
    ]
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "onDone",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#onDone",
    "access": "public",
    "description": "Attaches a callback to this Iterable that is\nexecuted when this Iterable finishes the iteration\nprocess.",
    "lineNumber": 1067,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given action is not a function"
      }
    ]
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "onStart",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.onStart",
    "access": "public",
    "description": "Attaches a callback to a source Iterable that is\nexecuted when the Iterable finishes the iteration\nprocess.",
    "lineNumber": 1083,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given action is not a function"
      }
    ]
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "onStart",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#onStart",
    "access": "public",
    "description": "Attaches a callback to this Iterable that is\nexecuted when this Iterable finishes the iteration\nprocess.",
    "lineNumber": 1096,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given action is not a function"
      }
    ]
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "onYield",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.onYield",
    "access": "public",
    "description": "Attaches a callback to a source Iterable that is\nexecuted whenever the source Iterable yields\na value.",
    "lineNumber": 1112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given consumer is not a function"
      }
    ]
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "onYield",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#onYield",
    "access": "public",
    "description": "Attaches a callback to this Iterable that is\nexecuted whenever this Iterable yields\na value.",
    "lineNumber": 1125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given consumer is not a function"
      }
    ]
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "outerJoin",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.outerJoin",
    "access": "public",
    "description": "Returns an Iterable that yields the non-mutual items of the source Iterable\nand the other Iterable.",
    "lineNumber": 1140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "outerJoin",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#outerJoin",
    "access": "public",
    "description": "Returns an Iterable that yields the non-mutual items of this Iterable\nand the other Iterable.",
    "lineNumber": 1152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the other given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "partition",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.partition",
    "access": "public",
    "description": "Given a predicate and an Iterable, return a pair of Iterables\nwhich do and do not satisfy the predicate, respectively.",
    "lineNumber": 1167,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given consumer is not a function"
      }
    ]
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "partition",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#partition",
    "access": "public",
    "description": "Given a predicate and an Iterable, return a pair of Iterables\nwhich do and do not satisfy the predicate, respectively.",
    "lineNumber": 1181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given consumer is not a function"
      }
    ]
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "range",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.range",
    "access": "public",
    "description": "Returns an Iterable that yields a sequence of numbers\nwithin a specified range.",
    "lineNumber": 1193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "steps",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "reduce",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.reduce",
    "access": "public",
    "description": "Returns an Iterable that applies a specified accumulator function\nto the first item yielded by a source Iterable, then feeds the\nresult of that function along with the second item yielded by\nthe source Iterable into the same function, and so on until all\nitems have been yielded by the finite source Iterable, and yields\nthe final result from the final call to your function as its sole item.",
    "lineNumber": 1213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(acc: any, item: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "reducer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given reducer is not a function"
      }
    ]
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "reduce",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#reduce",
    "access": "public",
    "description": "Returns an Iterable that applies a specified accumulator function\nto the first item yielded by a source Iterable, then feeds the\nresult of that function along with the second item yielded by\nthe source Iterable into the same function, and so on until all\nitems have been yielded by the finite source Iterable, and yields\nthe final result from the final call to your function as its sole item.",
    "lineNumber": 1230,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(acc: any, item: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "reducer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given reducer is not a function"
      }
    ]
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "reduceRight",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.reduceRight",
    "access": "public",
    "description": "Returns an Iterable that applies a specified accumulator function\nto the last item yielded by a source Iterable, then feeds the\nresult of that function along with the second last item yielded by\nthe source Iterable into the same function, and so on until all\nitems have been yielded by the finite source Iterable, and yields\nthe final result from the final call to your function as its sole item.",
    "lineNumber": 1250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(acc: any, item: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "reducer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given reducer is not a function"
      }
    ]
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "reduceRight",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#reduceRight",
    "access": "public",
    "description": "Returns an Iterable that applies a specified accumulator function\nto the last item yielded by a source Iterable, then feeds the\nresult of that function along with the second last item yielded by\nthe source Iterable into the same function, and so on until all\nitems have been yielded by the finite source Iterable, and yields\nthe final result from the final call to your function as its sole item.",
    "lineNumber": 1267,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(acc: any, item: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "reducer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given reducer is not a function"
      }
    ]
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "repeat",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.repeat",
    "access": "public",
    "description": "Repeats the yielded values of a source Iterable by a certain\namount.",
    "lineNumber": 1282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "repeat",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#repeat",
    "access": "public",
    "description": "Repeats the yielded values of this Iterable by a certain\namount.",
    "lineNumber": 1294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "replace",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.replace",
    "access": "public",
    "description": "Returns an Iterable that replaces the value at the\ngiven index of the source Iterable with the given value.",
    "lineNumber": 1310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given index is not a number."
      }
    ]
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "replace",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#replace",
    "access": "public",
    "description": "Returns an Iterable that replaces the value at the\ngiven index of this Iterable with the given value.",
    "lineNumber": 1325,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given index is not a number."
      }
    ]
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "reverse",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.reverse",
    "access": "public",
    "description": "Reverses the yield sequence of the source Iterable",
    "lineNumber": 1336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "reverse",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#reverse",
    "access": "public",
    "description": "Reverses the yield sequence of this Iterable",
    "lineNumber": 1344,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "scan",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.scan",
    "access": "public",
    "description": "Returns an Iterable that applies a specified accumulator function\nto the first item yielded by a source Iterable, then feeds the result\nof that function along with the second item yielded by the source\nIterable into the same function, and so on until all items have been\nyielded by the source Iterable, yielding the result of each of these iterations.",
    "lineNumber": 1363,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(acc: any, item: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "reducer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given reducer is not a function"
      }
    ]
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "scan",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#scan",
    "access": "public",
    "description": "Returns an Iterable that applies a specified accumulator function\nto the first item yielded by a source Iterable, then feeds the result\nof that function along with the second item yielded by the source\nIterable into the same function, and so on until all items have been\nyielded by the source Iterable, yielding the result of each of these iterations.",
    "lineNumber": 1379,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(acc: any, item: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "reducer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given reducer is not a function"
      }
    ]
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "scanRight",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.scanRight",
    "access": "public",
    "description": "Returns an Iterable that applies a specified accumulator function\nto the last item yielded by a source Iterable, then feeds the result\nof that function along with the second last item yielded by the source\nIterable into the same function, and so on until all items have been\nyielded by the source Iterable, yielding the result of each of these iterations.",
    "lineNumber": 1398,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(acc: any, item: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "reducer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given reducer is not a function"
      }
    ]
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "scanRight",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#scanRight",
    "access": "public",
    "description": "Returns an Iterable that applies a specified accumulator function\nto the last item yielded by a source Iterable, then feeds the result\nof that function along with the second last item yielded by the source\nIterable into the same function, and so on until all items have been\nyielded by the source Iterable, yielding the result of each of these iterations.",
    "lineNumber": 1414,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(acc: any, item: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "reducer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given reducer is not a function"
      }
    ]
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "skip",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.skip",
    "access": "public",
    "description": "Returns an Iterable that skips the first count items yielded by\nthe source Iterable and yields the remainder.",
    "lineNumber": 1429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "skip",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#skip",
    "access": "public",
    "description": "Returns an Iterable that skips the first count items yielded by\nthe source Iterable and yields the remainder.",
    "lineNumber": 1441,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "skipLast",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.skipLast",
    "access": "public",
    "description": "Returns an Iterable that drops a specified number of items\nfrom the end of the sequence yielded by the source\nIterable.",
    "lineNumber": 1457,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "skipLast",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#skipLast",
    "access": "public",
    "description": "Returns an Iterable that drops a specified number of items\nfrom the end of the sequence yielded by this Iterable.",
    "lineNumber": 1469,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "skipUntil",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.skipUntil",
    "access": "public",
    "description": "Returns an Iterable that skips all items yielded by the source\nIterable as long as a specified condition holds false, but yields\nall further source items as soon as the condition becomes true.",
    "lineNumber": 1485,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "skipUntil",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#skipUntil",
    "access": "public",
    "description": "Returns an Iterable that skips all items yielded by the source\nIterable as long as a specified condition holds false, but yields\nall further source items as soon as the condition becomes true.",
    "lineNumber": 1498,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "skipWhile",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.skipWhile",
    "access": "public",
    "description": "Returns an Iterable that skips all items yielded by the source\nIterable as long as a specified condition holds true, but yields\nall further source items as soon as the condition becomes false.",
    "lineNumber": 1514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "skipWhile",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#skipWhile",
    "access": "public",
    "description": "Returns an Iterable that skips all items yielded by the source\nIterable as long as a specified condition holds true, but yields\nall further source items as soon as the condition becomes false.",
    "lineNumber": 1527,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "slice",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.slice",
    "access": "public",
    "description": "Returns a portion of the source Iterable as a new Iterable.",
    "lineNumber": 1540,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given iterables is not an array"
      }
    ]
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "slice",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#slice",
    "access": "public",
    "description": "Returns a portion of this Iterable as a new Iterable.",
    "lineNumber": 1553,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given iterables is not an array"
      }
    ]
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "sort",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.sort",
    "access": "public",
    "description": "Returns a new sorted Iterable base from the source Iterable.\nwhich returns a signum can be provided.",
    "lineNumber": 1568,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(a: any, b: any):number"
        ],
        "spread": false,
        "optional": false,
        "name": "comparator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given iterables is not an array"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function or undefined"
      }
    ]
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "sort",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#sort",
    "access": "public",
    "description": "Returns a new sorted Iterable base from this Iterable.\nA comparator function which returns a signum can be provided.",
    "lineNumber": 1580,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(a: any, b: any):number"
        ],
        "spread": false,
        "optional": false,
        "name": "comparator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function or undefined"
      }
    ]
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "sorted",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.sorted",
    "access": "public",
    "description": "Returns an Iterable that yields true if the source Iterable\n(with an optional comparator) is sorted.",
    "lineNumber": 1595,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(a: any, b: any):number"
        ],
        "spread": false,
        "optional": false,
        "name": "comparator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given iterables is not an array"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function or undefined"
      }
    ]
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "sorted",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#sorted",
    "access": "public",
    "description": "Returns an Iterable that yields true if the source Iterable\n(with an optional comparator) is sorted.",
    "lineNumber": 1607,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(a: any, b: any):number"
        ],
        "spread": false,
        "optional": false,
        "name": "comparator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function or undefined"
      }
    ]
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "spanWith",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.spanWith",
    "access": "public",
    "description": "Split an Iterable into a longest prefix such that all\nthe elements of it do satisfy a given predicate,\nand the rest of the Iterable following them.",
    "lineNumber": 1623,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "spanWith",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#spanWith",
    "access": "public",
    "description": "Split an Iterable into a longest prefix such that all\nthe elements of it do satisfy a given predicate,\nand the rest of the Iterable following them.",
    "lineNumber": 1636,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "split",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.split",
    "access": "public",
    "description": "Given an index, get a two-tuple of Iterable\nfrom the start of the source Iterable,\nand the Iterable that follows them.",
    "lineNumber": 1652,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "split",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#split",
    "access": "public",
    "description": "Given an index, get a two-tuple of Iterable\nfrom the start of this Iterable,\nand the Iterable that follows them.",
    "lineNumber": 1665,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "startWith",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.startWith",
    "access": "public",
    "description": "Same to concat, except that it prefixes the source Iterable\nto a set of values into a single Iterable.\n\nIf a value is an Iterable, startWith removes a single layer\nof nesting",
    "lineNumber": 1682,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "its",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "startWith",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#startWith",
    "access": "public",
    "description": "Same to concat, except that it prefixes this Iterable\nto a set of values into a single Iterable.\n\nIf a value is an Iterable, startWith removes a single layer\nof nesting",
    "lineNumber": 1696,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "its",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "step",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.step",
    "access": "public",
    "description": "Returns an Iterable that yields only the elements whose indices\nare divisible by the given amount",
    "lineNumber": 1711,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "step",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#step",
    "access": "public",
    "description": "Returns an Iterable that yields only the first count items yielded by\nthis Iterable.",
    "lineNumber": 1723,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "sum",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.sum",
    "access": "public",
    "description": "Returns an Iterable that yields the summation of\nthe source Iterable's yields.",
    "lineNumber": 1735,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "sum",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#sum",
    "access": "public",
    "description": "Returns an Iterable that yields the summation of\nthis Iterable's yields.",
    "lineNumber": 1744,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "take",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.take",
    "access": "public",
    "description": "Returns an Iterable that yields only the first count items yielded by the\nsource Iterable.",
    "lineNumber": 1759,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "take",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#take",
    "access": "public",
    "description": "Returns an Iterable that yields only the first count items yielded by\nthis Iterable.",
    "lineNumber": 1771,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "takeLast",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.takeLast",
    "access": "public",
    "description": "Returns an Iterable that yields at most the last amount\nitems yielded by the source Iterable.",
    "lineNumber": 1786,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "takeLast",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#takeLast",
    "access": "public",
    "description": "Returns an Iterable that yields at most the last amount\nitems yielded by the source Iterable.",
    "lineNumber": 1798,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given amount is not a number."
      }
    ]
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "takeUntil",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.takeUntil",
    "access": "public",
    "description": "Returns an Iterable that yields items yielded by the source Iterable\nso long as each item does not satisfie a specified condition, and then\ncompletes as soon as this condition is satisfied.",
    "lineNumber": 1814,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "takeUntil",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#takeUntil",
    "access": "public",
    "description": "Returns an Iterable that yields items yielded by this Iterable\nso long as each item does not satisfie a specified condition, and then\ncompletes as soon as this condition is satisfied.",
    "lineNumber": 1827,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "takeWhile",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.takeWhile",
    "access": "public",
    "description": "Returns an Iterable that yields items yielded by the source Iterable\nso long as each item satisfied a specified condition, and then\ncompletes as soon as this condition is not satisfied.",
    "lineNumber": 1843,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "takeWhile",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#takeWhile",
    "access": "public",
    "description": "Returns an Iterable that yields items yielded by this Iterable\nso long as each item satisfied a specified condition, and then\ncompletes as soon as this condition is not satisfied.",
    "lineNumber": 1856,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(item: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "toArray",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.toArray",
    "access": "public",
    "description": "Converts the source Iterable into an array of its yield\nsequence.",
    "lineNumber": 1868,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      }
    ]
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "toArray",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#toArray",
    "access": "public",
    "description": "Converts this Iterable into an array of its yield\nsequence.",
    "lineNumber": 1877,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "whileDo",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.whileDo",
    "access": "public",
    "description": "Returns an Iterable that repeats the yields of the source\nIterable as long as the given predicate supplies a truthy\nvalue.",
    "lineNumber": 1893,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "it",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function():boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given Iterable doesn't implement the Iteration Protocol"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "whileDo",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#whileDo",
    "access": "public",
    "description": "Returns an Iterable that repeats the yields of this\nIterable as long as the given predicate supplies a truthy\nvalue.",
    "lineNumber": 1907,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given predicate is not a function"
      }
    ]
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "zip",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/iterable.js~Iterable.zip",
    "access": "public",
    "description": "combine the yields of multiple Iterables together via a specified function and\nyields single items for each combination based on the results of this function.",
    "lineNumber": 1922,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "its",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(yields: Array):any"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given iterables is not an array"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given zipper is not a function or undefined"
      }
    ]
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "zip",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#zip",
    "access": "public",
    "description": "combine the yields of this Iterable with multiple Iterables together via a specified\nfunction and yields single items for each combination based on the results of this\nfunction.",
    "lineNumber": 1938,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Iterable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "its",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "function(yields: Array):any"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given iterables is not an array"
      },
      {
        "types": [
          "BadArgumentError"
        ],
        "description": "throws error if the given zipper is not a function or undefined"
      }
    ]
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "[ITERATOR]",
    "memberof": "src/iterable.js~Iterable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/iterable.js~Iterable#[ITERATOR]",
    "access": "public",
    "description": "Implements the Iterator Protocol for this Iterable.",
    "lineNumber": 1946,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# iterable-js\n\nAn extensions for objects with Iteration Protocol for JS\n\n[![](https://data.jsdelivr.com/v1/package/npm/@lxsmnsyc/iterable-js/badge)](https://www.jsdelivr.com/package/npm/@lxsmnsyc/iterable-js)\n\n| Platform | Build Status |\n| --- | --- |\n| Linux | [![Build Status](https://travis-ci.org/LXSMNSYC/iterable-js.svg?branch=master)](https://travis-ci.org/LXSMNSYC/iterable-js) |\n| Windows | [![Build status](https://ci.appveyor.com/api/projects/status/272hv6jnglgamb0g?svg=true)](https://ci.appveyor.com/project/LXSMNSYC/iterable-js) |\n\n[![codecov](https://codecov.io/gh/LXSMNSYC/iterable-js/branch/master/graph/badge.svg)](https://codecov.io/gh/LXSMNSYC/iterable-js)\n\n\n### Introduction\n\n### Iterations Protocol\n\nES2015 introduces a new feature, namely the [Iterations Protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols). The protocol consists of 2 protocols:\n\n* The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a for..of construct. Some built-in types are built-in iterables with a default iteration behavior, such as Array or Map, while other types (such as Object) are not.\n  \n  In order to be iterable, an object must implement the @@iterator method, meaning that the object (or one of the objects up its prototype chain) must have a property with a @@iterator key which is available via constant Symbol.iterator:\n\n  * ```[Symbol.iterator]``` \n    * A zero arguments function that returns an object, conforming to the iterator protocol.\n\n  Whenever an object needs to be iterated (such as at the beginning of a for..of loop), its @@iterator method is called with no arguments, and the returned iterator is used to obtain the values to be iterated.\n\n* The iterator protocol defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated.\n  \n  An object is an iterator when it implements a next() method with the following semantics:\n\n  * next\n    * A zero arguments function that returns an object with at least the following two properties: \n      * ```done``` (boolean)\n        * Has the value ```true``` if the iterator is past the end of the iterated sequence. In this case ```value``` optionally specifies the return value of the iterator.\n        * Has the value ```false``` if the iterator was able to produce the next value in the sequence. This is equivalent of not specifying the done property altogether.\n      * ```value``` \n        * any JavaScript value returned by the iterator.\n        * Can be omitted when ```done``` is ```true```.\n    * The next method always has to return an object with appropriate properties including ```done``` and ```value```.\n    * If a non-object value gets returned (such as ```false``` or ```undefined```), a TypeError (\"iterator.next() returned a non-object value\") will be thrown.\n\n### Iterable and Iteration Protocol\n\nIterable intends to unify all iterable objects, be it a built-in iterable (e.g. Array, String, Map) or a user-made iterable (e.g. user-defined generators, objects with Symbol.iterator property), acting as the de-facto superset.\n\nBy taking advantage of the Iteration Protocol, Iterable can provide operators that allows to transform any iterable objects.\n\nIterable operators are not strict to Iterable instance, they expect the first parameters to be an iterable object, regardless of the implementation. For example,\n\n```js\nIterable.concat('Hello', [1, 2, 3, 4, 5]);\n```\n\ncreates an iterable that yields the characters of 'Hello' and the values of ```[1, 2, 3, 4, 5]``` sequentially.\n\n### Iterable vs IxJS\n\nFirst, I would like to point out that at the time I have written almost half of the library, I stumbled upon the library [IxJS](https://github.com/ReactiveX/IxJS) while looking for Rx libraries, and to my surprise, it has the same goal as my library's.\n\nSo, what are the differences?\n\nIterable doesn't/isn't:\n\n* support async.\n* expose the operators as an individual module.\n* written in TypeScript.\n* have operators that returns a single value from an aggregation (e.g reduce), instead, they are considered as a singular Iterable (an Iterable with one element).\n* handle errors.\n\nIterable does/is:\n\n* support chaining operators for an Iterable as well as provide these operators as a static member, allowing class deconstruction.\n* allow bracket notation for accessing the nth-yield of the Iterable.\n* throw runtime errors. If an error occurs, the errors are thrown synchronously on iteration.\n* know if an object is iterable by concept or not, allowing non-Iterable instances to have access with the Iterable operators.\n\nMethod Counterparts\n\n| Iterable | IxJS | Notes |\n| --- | --- | --- |\n| ```all``` | ```every``` | Returns a singular Iterable that yields the boolean result. |\n| ```any``` | ```some``` | Returns a singular Iterable that yields the boolean result.  |\n| ```average``` | ```average``` | Returns a singular Iterable that yields the number result. |\n| ```breadthFirst``` | | |\n| ```breakWith``` | | |\n| ```buffer``` | ```buffer``` | Doesn't have the skip mechanism. |\n| ```cache``` | | |\n| ```compose``` | ```pipe``` | Iterable ```compose``` doesn't bind to the given transformer. |\n| ```concat``` | ```concat```, ```of```, ```endWith``` | Unlike the IxJS ```concat```, Iterable ```concat``` allows to concat non-Iterable values. |\n| ```contains``` | ```includes``` | Doesn't have the skip mechanism. Returns a singular Iterable that yields the boolean result. |\n| ```count``` | ```count``` | Returns a singular Iterable that yields the number result. |\n| ```defaultIfEmpty``` | ```defaultIfEmpty``` | |\n| ```depthFirst``` | | |\n| ```diff``` | | |\n| ```distinct``` | ```distinct``` | Doesn't have the compare mechanism. Strict equality is used. |\n| ```distinctAdjacent``` | ```distinctUntilChanged``` | Doesn't have the compare mechanism. Strict equality is used. |\n| ```doWhile``` | ```doWhile``` | |\n| ```elementAt``` | ```elementAt``` | Returns a singular Iterable that yields the result. |\n| ```empty``` | ```empty``` | |\n| ```equal``` | ```sequenceEqual``` | Returns a singular Iterable that yields the boolean result. |\n| ```filter``` | ```filter``` | |\n| ```find``` | ```find``` | Instead of yielding the passing value, ```find`` yields the index. Returns a singular Iterable that yields the number result. |\n| ```first``` | ```first``` | Returns a singular Iterable that yields the result. |\n| ```flat``` | ```flatten``` | Iterable ```flat``` only flattens a single layer. To flatten all layers, use ```depthFirst``` |\n| ```flatMap``` | ```flatMap``` | |\n| ```ignoreElements``` | ```ignoreElements``` | |\n| ```indexOf``` | | |\n| ```innerJoin``` | ```innerJoin``` | |\n| ```intercalate``` | | |\n| ```intersect``` | ```intersect``` | |\n| ```intersperse``` | | |\n| ```isEmpty``` | ```isEmpty``` | Returns a singular Iterable that yields the boolean result. |\n| ```just``` | | |\n| ```last``` | ```last``` | |\n| ```leftJoin``` | | |\n| ```map``` | ```map``` | |\n| ```max``` | ```max``` | Returns a singular Iterable that yields the result. |\n| ```min``` | ```min``` | Returns a singular Iterable that yields the result. |\n| ```onDone``` | | |\n| ```onStart``` | | |\n| ```onYield``` | | |\n| ```outerJoin``` | | |\n| ```partition``` | ```partition``` | |\n| ```range``` | ```range``` | Unlike IxJS, Iterable ```range``` allows negative slope, and custom step size. |\n| ```reduce``` | ```reduce``` | Returns a singular Iterable that yields the result. |\n| ```reduceRight``` | ```reduceRight``` | Returns a singular Iterable that yields the result. |\n| ```repeat``` | ```repeat``` | |\n| ```replace``` | | |\n| ```reverse```  |```reverse``` | |\n| ```scan``` | ```scan``` | |\n| ```scanRight``` | ```scanRight``` | |\n| ```skip``` | ```skip``` | |\n| ```skipLast``` | ```skipLast``` | |\n| ```skipUntil``` | | |\n| ```skipWhile``` | ```skipWhile``` | |\n| ```sort``` | ```orderBy``` | |\n| ```sorted``` | | Returns a singular Iterable that yields the boolean result. |\n| ```spanWith``` | | |\n| ```split``` | | |\n| ```startWith``` | ```startWith``` | |\n| ```step``` | | |\n| ```sum``` | ```sum``` | Returns a singular Iterable that yields the result. |\n| ```take``` | ```take``` | |\n| ```takeLast``` | ```takeLast``` | |\n| ```takeUntil``` | | |\n| ```takeWhile``` | ```takeWhile``` | |\n| ```toArray``` | ```toArray``` | |\n| ```whileDo``` | ```while``` | |\n| ```zip``` | ```zip``` | |\n| | ```case``` | |\n| | ```catch``` | Iterable throws the error synchronously. |\n| | ```catchWith``` | Iterable throws the error synchronously. |\n| | ```chain``` | |\n| | ```concatAll``` | |\n| | ```defer``` | Meh |\n| | ```expand``` | |\n| | ```find``` | |\n| | ```for``` | |\n| | ```generate``` | Iterable supports Generators. |\n| | ```groupBy``` | |\n| | ```groupJoin``` | |\n| | ```if``` | |\n| | ```memoize``` | |\n| | ```ofEntries``` | Use ```Object.entries``` instead. |\n| | ```ofKeys``` | Use ```Object.keys``` instead. |\n| | ```ofValues``` | Use ```Object.values``` instead. |\n| | ```onErrorResumeNext``` | Iterable doesn't support fallbacks. |\n| | ```pairwise``` | |\n| | ```pluck``` | |\n| | ```publish``` | |\n| | ```retry``` | Iterable doesn't support fallbacks. |\n| | ```share``` | |\n| | ```single``` | Isn't encouraged. |\n| | ```tap``` | use the ```doXXXX``` operators. |\n| | ```union``` | |\n\n## Usage\n\n### Installing\n\nNPM\n```\nnpm install @lxsmnsyc/iterable-js\n```\n\nCDN\n\n* jsDelivr\n  \n```html\n<script src=\"https://cdn.jsdelivr.net/npm/@lxsmnsyc/iterable-js/dist/index.min.js\"></script>\n```\n\n* unpkg\n  \n```html\n<script src=\"https://unpkg.com/@lxsmnsyc/iterable-js/dist/index.min.js\"></script>\n```\n\n\n### Loading the module\n\n#### CommonJS\n\n```js\nconst Iterable = require('iterable-js');\n```\n\nLoading the CommonJS module provides the Iterable class.\n\n#### Browser\n\nLoading the JavaScript file for the iterable-js provides the Iterable class.\n\n### Example\n\nCreates a partition of iterables in which the first iterable yields the even numbers, while the second iterable yields the odd numbers.\n```js\nconst evenOdd = Iterable.range(1, 200).partition(x => x % 2 === 0);\n\nfor (const i of evenOdd[0].map(x => `Next Even: ${x}`)) {\n  console.log(i);\n}\nfor (const i of evenOdd[1].map(x => `Next Odd: ${x}`)) {\n  console.log(i);\n}\n```\n\n### Static and non-Static\n\nAll operators of Iterable are both static and non-static (except for a few ones), allowing chainable and direct transformations.\n\nBoth examples below does the same thing.\n\n```js\nfor (const i of Iterable.filter('Hello World', x => x === x.toUpperCase())) {\n  console.log(i);\n}\n```\n\n```js\nfor (const i of new Iterable('Hello World').filter(x => x === x.toUpperCase())) {\n  console.log(i);\n}\n```\n\n### Generators\n\nIterable treats generator functions as an iterable object, even if it doesn't implement the iterable protocol.\n\n```js\nconst iterable = new Iterable(function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n});\nfor (const i of iterable) {\n  console.log(i);\n}\n```\n\n### Creating your own operators\n\nTo create your own operator, you must pass functions to the ```compose``` method. The functions provided must receive a single parameter, which refers to the chained Iterable, and must return an Iterable.\n\n```js\nconst getOdds = source => source.filter(x => x % 2 === 1);\n\nfor (const i of Iterable.range(1, 1000).compose(getOdds)) {\n  console.log(i);\n}\n```\n\n```compose``` can accept multiple functions, allowing to build pipelines of operators.\n\n## Build\n\nClone the repo then run\n\n```bash\nnpm install\n```\n\nTo build distributables, coverages and tests:\n```bash\nnpm run build\n```\n",
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@lxsmnsyc/iterable-js\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Extensions for objects with Iteration Protocol for JS\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"linux-mocha\": \"./node_modules/.bin/mocha --require @babel/register -R spec --recursive\",\n    \"linux-test\": \"./node_modules/.bin/nyc --reporter=html npm run linux-mocha\",\n    \"linux-docs\": \"./node_modules/.bin/esdoc\",\n    \"linux-cjs\": \"./node_modules/.bin/rollup src/index.js --format cjs --name \\\"Iterable\\\" --file index.js\",\n    \"linux-browser\": \"./node_modules/.bin/rollup src/index.js --format iife --name \\\"Iterable\\\" --file dist/index.js\",\n    \"linux-minify\": \"npm run linux-browser && ./node_modules/.bin/terser dist/index.js --compress --mangle --output dist/index.min.js\",\n    \"linux-build\": \"npm run linux-cjs && npm run linux-minify && npm run linux-docs && npm run linux-test\",\n    \"win-mocha\": \"node node_modules/mocha/bin/mocha --require @babel/register -R spec --recursive\",\n    \"win-test\": \"node node_modules/nyc/bin/nyc.js --reporter=html npm run win-mocha\",\n    \"win-docs\": \"node node_modules/esdoc/out/src/ESDocCLI.js\",\n    \"win-cjs\": \"node node_modules/.bin/rollup src/index.js --format cjs --name \\\"Iterable\\\" --file index.js\",\n    \"win-browser\": \"node node_modules/.bin/rollup src/index.js --format iife --name \\\"Iterable\\\" --file dist/index.js\",\n    \"win-minify\": \"npm run win-browser && node node_modules/.bin/terser dist/index.js --compress --mangle --output dist/index.min.js\",\n    \"win-build\": \"npm run win-cjs && npm run win-minify && npm run win-docs && npm run win-test\",\n    \"mocha\": \"npm run linux-mocha || npm run win-mocha\",\n    \"test\": \"npm run linux-test || npm run win-test\",\n    \"docs\": \"npm run linux-docs || npm run win-docs\",\n    \"cjs\": \"npm run linux-cjs || npm run win-cjs\",\n    \"browser\": \"npm run linux-browser || npm run win-browser\",\n    \"minify\": \"npm run linux-minify || npm run win-minify\",\n    \"build\": \"npm run cjs && npm run minify && npm run docs && npm test\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/LXSMNSYC/iterable-js.git\"\n  },\n  \"keywords\": [\n    \"iterable\",\n    \"iterator\",\n    \"array\",\n    \"immutable\",\n    \"lodash\"\n  ],\n  \"author\": \"LXSMNSYC (alexis.munsayac@gmail.com)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/LXSMNSYC/iterable-js/issues\"\n  },\n  \"homepage\": \"https://github.com/LXSMNSYC/iterable-js#readme\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.4.0\",\n    \"@babel/plugin-transform-regenerator\": \"^7.4.0\",\n    \"@babel/polyfill\": \"^7.4.0\",\n    \"@babel/preset-env\": \"^7.4.2\",\n    \"@babel/register\": \"^7.4.0\",\n    \"acorn\": \"^6.1.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-integrate-test-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.15.3\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-plugin-import\": \"^2.16.0\",\n    \"mocha\": \"^6.0.2\",\n    \"nyc\": \"^13.3.0\",\n    \"rollup\": \"^1.7.2\",\n    \"terser\": \"^3.17.0\"\n  },\n  \"dependencies\": {}\n}\n",
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 433,
    "kind": "testFile",
    "name": "test/brackets.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../src/iterable';\n\n/* eslint-disable no-undef */\ndescribe('<brackets>', () => {\n  it('should return the nth-yield of the given Iterable', () => {\n    const base = [1, 2, 3, 4];\n    assert(new Iterable(base)[0] === base[0]);\n  });\n  it('should return the undefined if the index is out of bounds', () => {\n    const base = [1, 2, 3, 4];\n    assert(typeof new Iterable(base)[5] === 'undefined');\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/brackets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/brackets.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/brackets.js~describe0",
    "access": "public",
    "description": "<brackets>",
    "lineNumber": 7
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/brackets.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/brackets.js~describe0.it1",
    "access": "public",
    "description": "should return the nth-yield of the given Iterable",
    "lineNumber": 8
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/brackets.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/brackets.js~describe0.it2",
    "access": "public",
    "description": "should return the undefined if the index is out of bounds",
    "lineNumber": 12
  },
  {
    "__docId__": 437,
    "kind": "testFile",
    "name": "test/constructor.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../src/iterable';\nimport { BadArgumentError } from '../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('<constructor>', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      const i = new Iterable();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/constructor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/constructor.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/constructor.js~describe3",
    "access": "public",
    "description": "<constructor>",
    "lineNumber": 8
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/constructor.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/constructor.js~describe3.it4",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 440,
    "kind": "testFile",
    "name": "test/internal/all.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#all', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.all();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.all([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.all([1, 2, 3], x => typeof x === 'number');\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield true if the Iterable passes the predicate.', () => {\n    const iterable = Iterable.all([1, 2, 3], x => typeof x === 'number');\n    for (const i of iterable) {\n      assert(i === true);\n    }\n  });\n  it('should yield false if the Iterable fails the predicate.', () => {\n    const iterable = new Iterable([1, 2, 3]).all(x => typeof x === 'string');\n    for (const i of iterable) {\n      assert(i === false);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/all.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "test/internal/all.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/all.js~describe5",
    "access": "public",
    "description": "#all",
    "lineNumber": 8
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/internal/all.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/all.js~describe5.it6",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/internal/all.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/all.js~describe5.it7",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/internal/all.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/all.js~describe5.it8",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/internal/all.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/all.js~describe5.it9",
    "access": "public",
    "description": "should yield true if the Iterable passes the predicate.",
    "lineNumber": 27
  },
  {
    "__docId__": 446,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/internal/all.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/all.js~describe5.it10",
    "access": "public",
    "description": "should yield false if the Iterable fails the predicate.",
    "lineNumber": 33
  },
  {
    "__docId__": 447,
    "kind": "testFile",
    "name": "test/internal/any.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#any', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.any();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.any([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.any([1, 2, 3], x => typeof x === 'number');\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield true if the Iterable passes the predicate.', () => {\n    const iterable = Iterable.any([1, 2, 3], x => typeof x === 'number');\n    for (const i of iterable) {\n      assert(i === true);\n    }\n  });\n  it('should yield false if the Iterable fails the predicate.', () => {\n    const iterable = new Iterable([1, 2, 3]).any(x => typeof x === 'string');\n    for (const i of iterable) {\n      assert(i === false);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/any.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/internal/any.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/any.js~describe11",
    "access": "public",
    "description": "#any",
    "lineNumber": 8
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/internal/any.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/any.js~describe11.it12",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/internal/any.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/any.js~describe11.it13",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 451,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/internal/any.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/any.js~describe11.it14",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 452,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/internal/any.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/any.js~describe11.it15",
    "access": "public",
    "description": "should yield true if the Iterable passes the predicate.",
    "lineNumber": 27
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/internal/any.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/any.js~describe11.it16",
    "access": "public",
    "description": "should yield false if the Iterable fails the predicate.",
    "lineNumber": 33
  },
  {
    "__docId__": 454,
    "kind": "testFile",
    "name": "test/internal/average.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#average', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.average();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable', () => {\n    assert(Iterable.average([1, 2, 3]) instanceof Iterable);\n  });\n  it('should yield the correct average if the Iterable yields the value', () => {\n    const base = [1, 2, 3];\n    for (const c of new Iterable(base).average()) {\n      assert(c === base.reduce((x, y) => x + y) / base.length);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/average.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 455,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/internal/average.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/average.js~describe17",
    "access": "public",
    "description": "#average",
    "lineNumber": 8
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/internal/average.js~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/average.js~describe17.it18",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/internal/average.js~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/average.js~describe17.it19",
    "access": "public",
    "description": "should return an Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/internal/average.js~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/average.js~describe17.it20",
    "access": "public",
    "description": "should yield the correct average if the Iterable yields the value",
    "lineNumber": 19
  },
  {
    "__docId__": 459,
    "kind": "testFile",
    "name": "test/internal/breadthFirst.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#breadthFirst', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.breadthFirst();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.breadthFirst([1, 2, 3, 4]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, [2, 3], 4];\n    const expected = [1, 4, 2, 3];\n    const iterable = new Iterable(base).breadthFirst();\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/breadthFirst.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 460,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/internal/breadthFirst.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/breadthFirst.js~describe21",
    "access": "public",
    "description": "#breadthFirst",
    "lineNumber": 8
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/internal/breadthFirst.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/breadthFirst.js~describe21.it22",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/internal/breadthFirst.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/breadthFirst.js~describe21.it23",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/internal/breadthFirst.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/breadthFirst.js~describe21.it24",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 20
  },
  {
    "__docId__": 464,
    "kind": "testFile",
    "name": "test/internal/breakWith.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#breakWith', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.breakWith();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.breakWith([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Array of 2 Iterables if no errors.', () => {\n    const iterable = new Iterable([1, 2, 3]).breakWith(x => typeof x === 'number');\n    assert(iterable instanceof Array);\n    assert(iterable.length === 2);\n    assert(iterable[0] instanceof Iterable);\n    assert(iterable[1] instanceof Iterable);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/breakWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 465,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/internal/breakWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/breakWith.js~describe25",
    "access": "public",
    "description": "#breakWith",
    "lineNumber": 8
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/internal/breakWith.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/breakWith.js~describe25.it26",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/internal/breakWith.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/breakWith.js~describe25.it27",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/internal/breakWith.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/breakWith.js~describe25.it28",
    "access": "public",
    "description": "should return an Array of 2 Iterables if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 469,
    "kind": "testFile",
    "name": "test/internal/buffer.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#buffer', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.buffer();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.buffer([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.buffer([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.buffer([1, 2, 3, 4], 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield Arrays of the given length.', () => {\n    const iterable = Iterable.buffer([1, 2, 3, 4], 2);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i instanceof Array;\n      acc = acc && i.length === 2;\n    }\n    assert(acc);\n  });\n  it('should yield Arrays of the given length along with an excess.', () => {\n    const iterable = new Iterable([1, 2, 3, 4, 5]).buffer(2);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i instanceof Array;\n    }\n    assert(acc);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/buffer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/internal/buffer.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/buffer.js~describe29",
    "access": "public",
    "description": "#buffer",
    "lineNumber": 8
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/internal/buffer.js~describe29",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/buffer.js~describe29.it30",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/internal/buffer.js~describe29",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/buffer.js~describe29.it31",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/internal/buffer.js~describe29",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/buffer.js~describe29.it32",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/internal/buffer.js~describe29",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/buffer.js~describe29.it33",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/internal/buffer.js~describe29",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/buffer.js~describe29.it34",
    "access": "public",
    "description": "should yield Arrays of the given length.",
    "lineNumber": 34
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/internal/buffer.js~describe29",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/buffer.js~describe29.it35",
    "access": "public",
    "description": "should yield Arrays of the given length along with an excess.",
    "lineNumber": 43
  },
  {
    "__docId__": 477,
    "kind": "testFile",
    "name": "test/internal/cache.js",
    "content": "/* eslint-disable no-unused-vars */\n/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#cache', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.cache();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should cache the source Iterable', () => {\n    const cache1 = new Iterable([1, 2, 3, 4]).cache();\n\n    let flag = 2;\n    for (const c of cache1) {\n      flag -= 1;\n      if (flag === 0) {\n        break;\n      }\n    }\n    // eslint-disable-next-line no-empty\n    for (const c of cache1) {\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "test/internal/cache.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/cache.js~describe36",
    "access": "public",
    "description": "#cache",
    "lineNumber": 9
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/internal/cache.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/cache.js~describe36.it37",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 10
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/internal/cache.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/cache.js~describe36.it38",
    "access": "public",
    "description": "should cache the source Iterable",
    "lineNumber": 17
  },
  {
    "__docId__": 481,
    "kind": "testFile",
    "name": "test/internal/compose.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#compose', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.compose();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid composer', () => {\n    try {\n      Iterable.compose([1, 2, 3, 4], []);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a TypeError if there is a composer that returns a non-Iterable', () => {\n    try {\n      Iterable.compose([1, 2, 3, 4], () => {});\n    } catch (e) {\n      assert(e instanceof TypeError);\n    }\n  });\n  it('should return an Iterable', () => {\n    assert(Iterable.compose([1, 2, 3, 4], Iterable.reverse) instanceof Iterable);\n  });\n  it('should return an Iterable (Iteration Protocol)', () => {\n    assert(Iterable.is(new Iterable([1, 2, 3, 4]).compose(() => [1, 2, 3, 4])));\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/compose.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 482,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "test/internal/compose.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/compose.js~describe39",
    "access": "public",
    "description": "#compose",
    "lineNumber": 8
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/internal/compose.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/compose.js~describe39.it40",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/internal/compose.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/compose.js~describe39.it41",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid composer",
    "lineNumber": 16
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/internal/compose.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/compose.js~describe39.it42",
    "access": "public",
    "description": "should throw a TypeError if there is a composer that returns a non-Iterable",
    "lineNumber": 23
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/internal/compose.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/compose.js~describe39.it43",
    "access": "public",
    "description": "should return an Iterable",
    "lineNumber": 30
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/internal/compose.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/compose.js~describe39.it44",
    "access": "public",
    "description": "should return an Iterable (Iteration Protocol)",
    "lineNumber": 33
  },
  {
    "__docId__": 488,
    "kind": "testFile",
    "name": "test/internal/concat.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\n\n/* eslint-disable no-undef */\ndescribe('#concat', () => {\n  it('should return an Iterable', () => {\n    assert(Iterable.concat(1, 2, 3, 4) instanceof Iterable);\n    assert(new Iterable([1, 2]).concat(3, 4) instanceof Iterable);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/concat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/internal/concat.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/concat.js~describe45",
    "access": "public",
    "description": "#concat",
    "lineNumber": 7
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/internal/concat.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/concat.js~describe45.it46",
    "access": "public",
    "description": "should return an Iterable",
    "lineNumber": 8
  },
  {
    "__docId__": 491,
    "kind": "testFile",
    "name": "test/internal/contains.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#contains', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.contains();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable', () => {\n    assert(Iterable.contains([1, 2, 3, 4], 3) instanceof Iterable);\n  });\n  it('should yield true if the Iterable yields the value', () => {\n    for (const c of Iterable.contains([1, 2, 3, 4], 3)) {\n      assert(c === true);\n    }\n  });\n  it('should yield false if the Iterable does not yield the value', () => {\n    for (const c of new Iterable([1, 2, 3, 4]).contains(5)) {\n      assert(c === false);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/contains.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "test/internal/contains.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/contains.js~describe47",
    "access": "public",
    "description": "#contains",
    "lineNumber": 8
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/internal/contains.js~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/contains.js~describe47.it48",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/internal/contains.js~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/contains.js~describe47.it49",
    "access": "public",
    "description": "should return an Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/internal/contains.js~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/contains.js~describe47.it50",
    "access": "public",
    "description": "should yield true if the Iterable yields the value",
    "lineNumber": 19
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/internal/contains.js~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/contains.js~describe47.it51",
    "access": "public",
    "description": "should yield false if the Iterable does not yield the value",
    "lineNumber": 24
  },
  {
    "__docId__": 497,
    "kind": "testFile",
    "name": "test/internal/count.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#count', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.count();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable', () => {\n    assert(Iterable.count([1, 2, 3, 4]) instanceof Iterable);\n  });\n  it('should yield the correct size if the Iterable yields the value', () => {\n    for (const c of new Iterable([1, 2, 3, 4]).count()) {\n      assert(c === 4);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/count.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 498,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/internal/count.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/count.js~describe52",
    "access": "public",
    "description": "#count",
    "lineNumber": 8
  },
  {
    "__docId__": 499,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/internal/count.js~describe52",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/count.js~describe52.it53",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 500,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/internal/count.js~describe52",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/count.js~describe52.it54",
    "access": "public",
    "description": "should return an Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/internal/count.js~describe52",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/count.js~describe52.it55",
    "access": "public",
    "description": "should yield the correct size if the Iterable yields the value",
    "lineNumber": 19
  },
  {
    "__docId__": 502,
    "kind": "testFile",
    "name": "test/internal/defaultIfEmpty.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#defaultIfEmpty', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.defaultIfEmpty();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable', () => {\n    assert(Iterable.defaultIfEmpty([], 100) instanceof Iterable);\n  });\n  it('should yield the default value if the Iterable is Empty', () => {\n    for (const c of Iterable.empty().defaultIfEmpty(100)) {\n      assert(c === 100);\n    }\n  });\n  it('should yield the values if the Iterable is not empty', () => {\n    const base = [10, 20, 30, 40];\n    for (const c of new Iterable(base.slice(0)).defaultIfEmpty(100)) {\n      assert(c === base.shift());\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/defaultIfEmpty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "test/internal/defaultIfEmpty.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/defaultIfEmpty.js~describe56",
    "access": "public",
    "description": "#defaultIfEmpty",
    "lineNumber": 8
  },
  {
    "__docId__": 504,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/internal/defaultIfEmpty.js~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/defaultIfEmpty.js~describe56.it57",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/internal/defaultIfEmpty.js~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/defaultIfEmpty.js~describe56.it58",
    "access": "public",
    "description": "should return an Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 506,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/internal/defaultIfEmpty.js~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/defaultIfEmpty.js~describe56.it59",
    "access": "public",
    "description": "should yield the default value if the Iterable is Empty",
    "lineNumber": 19
  },
  {
    "__docId__": 507,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/internal/defaultIfEmpty.js~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/defaultIfEmpty.js~describe56.it60",
    "access": "public",
    "description": "should yield the values if the Iterable is not empty",
    "lineNumber": 24
  },
  {
    "__docId__": 508,
    "kind": "testFile",
    "name": "test/internal/depthFirst.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#depthFirst', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.depthFirst();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.depthFirst([1, 2, 3, 4]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, [2, 3], 4];\n    const expected = [1, 2, 3, 4];\n    const iterable = new Iterable(base).depthFirst();\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/depthFirst.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 509,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/internal/depthFirst.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/depthFirst.js~describe61",
    "access": "public",
    "description": "#depthFirst",
    "lineNumber": 8
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/internal/depthFirst.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/depthFirst.js~describe61.it62",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 511,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/internal/depthFirst.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/depthFirst.js~describe61.it63",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 512,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/internal/depthFirst.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/depthFirst.js~describe61.it64",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 20
  },
  {
    "__docId__": 513,
    "kind": "testFile",
    "name": "test/internal/diff.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#diff', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.diff();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a second invalid Iterable', () => {\n    try {\n      Iterable.diff(Iterable.just(10));\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should yield the correct sequence', () => {\n    const expected = [1, 3];\n    const iterable = new Iterable([1, 2, 2, 3, 4]).diff([6, 4, 4, 2]);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/diff.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "describe65",
    "testId": 65,
    "memberof": "test/internal/diff.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/diff.js~describe65",
    "access": "public",
    "description": "#diff",
    "lineNumber": 8
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/internal/diff.js~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/diff.js~describe65.it66",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 516,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/internal/diff.js~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/diff.js~describe65.it67",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a second invalid Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/internal/diff.js~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/diff.js~describe65.it68",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 23
  },
  {
    "__docId__": 518,
    "kind": "testFile",
    "name": "test/internal/distinct.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#distinct', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.distinct();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.distinct([1, 2, 3, 4]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 2, 3, 3, 4];\n    const expected = [1, 2, 3, 4];\n    const iterable = new Iterable(base).distinct();\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/distinct.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "test/internal/distinct.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/distinct.js~describe69",
    "access": "public",
    "description": "#distinct",
    "lineNumber": 8
  },
  {
    "__docId__": 520,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/internal/distinct.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/distinct.js~describe69.it70",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 521,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/internal/distinct.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/distinct.js~describe69.it71",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 522,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/internal/distinct.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/distinct.js~describe69.it72",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 20
  },
  {
    "__docId__": 523,
    "kind": "testFile",
    "name": "test/internal/distinctAdjacent.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#distinctAdjacent', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.distinctAdjacent();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.distinctAdjacent([1, 2, 3, 4]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 2, 3, 3, 4];\n    const expected = [1, 2, 3, 4];\n    const iterable = new Iterable(base).distinctAdjacent();\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/distinctAdjacent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 524,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "test/internal/distinctAdjacent.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/distinctAdjacent.js~describe73",
    "access": "public",
    "description": "#distinctAdjacent",
    "lineNumber": 8
  },
  {
    "__docId__": 525,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/internal/distinctAdjacent.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/distinctAdjacent.js~describe73.it74",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 526,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/internal/distinctAdjacent.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/distinctAdjacent.js~describe73.it75",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 527,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/internal/distinctAdjacent.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/distinctAdjacent.js~describe73.it76",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 20
  },
  {
    "__docId__": 528,
    "kind": "testFile",
    "name": "test/internal/doWhile.js",
    "content": "/* eslint-disable no-plusplus */\n/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#doWhile', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.doWhile();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.doWhile([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.doWhile([1, 2, 3, 4], () => c++ < 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 2, 3, 4, 1, 2, 3, 4];\n\n    let c = 0;\n    const iterable = new Iterable(base).doWhile(() => c++ < 1);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/doWhile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 529,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "test/internal/doWhile.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/doWhile.js~describe77",
    "access": "public",
    "description": "#doWhile",
    "lineNumber": 9
  },
  {
    "__docId__": 530,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/internal/doWhile.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/doWhile.js~describe77.it78",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 10
  },
  {
    "__docId__": 531,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/internal/doWhile.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/doWhile.js~describe77.it79",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 17
  },
  {
    "__docId__": 532,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/internal/doWhile.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/doWhile.js~describe77.it80",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 24
  },
  {
    "__docId__": 533,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/internal/doWhile.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/doWhile.js~describe77.it81",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 28
  },
  {
    "__docId__": 534,
    "kind": "testFile",
    "name": "test/internal/elementAt.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#elementAt', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.elementAt();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.elementAt([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.elementAt([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.elementAt([1, 2, 3, 4], 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const x = 2;\n    const iterable = new Iterable(base).elementAt(x);\n    for (const c of iterable) {\n      assert(c === base[x]);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/elementAt.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 535,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "test/internal/elementAt.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/elementAt.js~describe82",
    "access": "public",
    "description": "#elementAt",
    "lineNumber": 8
  },
  {
    "__docId__": 536,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/internal/elementAt.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/elementAt.js~describe82.it83",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 537,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/internal/elementAt.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/elementAt.js~describe82.it84",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 538,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/internal/elementAt.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/elementAt.js~describe82.it85",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 539,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/internal/elementAt.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/elementAt.js~describe82.it86",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 540,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/internal/elementAt.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/elementAt.js~describe82.it87",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 34
  },
  {
    "__docId__": 541,
    "kind": "testFile",
    "name": "test/internal/empty.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\n\n/* eslint-disable no-undef */\ndescribe('#empty', () => {\n  it('should be empty.', () => {\n    for (const i of Iterable.empty()) {\n      assert(!i);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/empty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 542,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "test/internal/empty.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/empty.js~describe88",
    "access": "public",
    "description": "#empty",
    "lineNumber": 7
  },
  {
    "__docId__": 543,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/internal/empty.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/empty.js~describe88.it89",
    "access": "public",
    "description": "should be empty.",
    "lineNumber": 8
  },
  {
    "__docId__": 544,
    "kind": "testFile",
    "name": "test/internal/equal.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#equal', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.equal();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a second invalid Iterable', () => {\n    try {\n      Iterable.equal(Iterable.just(10));\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should yield the true if both iterables yield the same sequence', () => {\n    for (const c of Iterable.equal([10], [10])) {\n      assert(c === true);\n    }\n  });\n\n  it('should yield the true if both iterables yield the same sequence', () => {\n    for (const c of new Iterable([10]).equal([11])) {\n      assert(c === false);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/equal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 545,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "test/internal/equal.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/equal.js~describe90",
    "access": "public",
    "description": "#equal",
    "lineNumber": 8
  },
  {
    "__docId__": 546,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/internal/equal.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/equal.js~describe90.it91",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 547,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/internal/equal.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/equal.js~describe90.it92",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a second invalid Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 548,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/internal/equal.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/equal.js~describe90.it93",
    "access": "public",
    "description": "should yield the true if both iterables yield the same sequence",
    "lineNumber": 23
  },
  {
    "__docId__": 549,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/internal/equal.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/equal.js~describe90.it94",
    "access": "public",
    "description": "should yield the true if both iterables yield the same sequence",
    "lineNumber": 29
  },
  {
    "__docId__": 550,
    "kind": "testFile",
    "name": "test/internal/filter.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#filter', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.filter();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.filter([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.filter([1, 2, 3], x => typeof x === 'number');\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, 3];\n    const expected = [1, 2, 3];\n    const iterable = new Iterable(base).filter(x => typeof x === 'number');\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/filter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 551,
    "kind": "test",
    "name": "describe95",
    "testId": 95,
    "memberof": "test/internal/filter.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/filter.js~describe95",
    "access": "public",
    "description": "#filter",
    "lineNumber": 8
  },
  {
    "__docId__": 552,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/internal/filter.js~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/filter.js~describe95.it96",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 553,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/internal/filter.js~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/filter.js~describe95.it97",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 554,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/internal/filter.js~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/filter.js~describe95.it98",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 555,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/internal/filter.js~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/filter.js~describe95.it99",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 27
  },
  {
    "__docId__": 556,
    "kind": "testFile",
    "name": "test/internal/find.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#find', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.find();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.find([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.find([1, 2, 3], x => typeof x === 'number');\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, 3];\n    const iterable = new Iterable(base.slice(0)).find(x => x === 3);\n\n    for (const i of iterable) {\n      assert(base.indexOf(3) === i);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/find.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 557,
    "kind": "test",
    "name": "describe100",
    "testId": 100,
    "memberof": "test/internal/find.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/find.js~describe100",
    "access": "public",
    "description": "#find",
    "lineNumber": 8
  },
  {
    "__docId__": 558,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/internal/find.js~describe100",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/find.js~describe100.it101",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 559,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/internal/find.js~describe100",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/find.js~describe100.it102",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 560,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/internal/find.js~describe100",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/find.js~describe100.it103",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 561,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/internal/find.js~describe100",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/find.js~describe100.it104",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 27
  },
  {
    "__docId__": 562,
    "kind": "testFile",
    "name": "test/internal/first.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#first', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.first();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-function provided (except undefined)', () => {\n    try {\n      Iterable.first([1, 2, 3], 1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.first([1, 2, 3]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, 3];\n    const iterable = new Iterable(base.slice(0)).first(x => typeof x === 'number');\n\n    for (const i of iterable) {\n      assert(base[0] === i);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/first.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 563,
    "kind": "test",
    "name": "describe105",
    "testId": 105,
    "memberof": "test/internal/first.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/first.js~describe105",
    "access": "public",
    "description": "#first",
    "lineNumber": 8
  },
  {
    "__docId__": 564,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/internal/first.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/first.js~describe105.it106",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 565,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/internal/first.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/first.js~describe105.it107",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-function provided (except undefined)",
    "lineNumber": 16
  },
  {
    "__docId__": 566,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/internal/first.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/first.js~describe105.it108",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 567,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/internal/first.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/first.js~describe105.it109",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 27
  },
  {
    "__docId__": 568,
    "kind": "testFile",
    "name": "test/internal/flat.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#flat', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.flat();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.flat([1, 2, 3]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, [3, 4, 5]];\n    const expected = [1, 2, 3, 4, 5];\n    const iterable = new Iterable(base).flat();\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/flat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 569,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "test/internal/flat.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/flat.js~describe110",
    "access": "public",
    "description": "#flat",
    "lineNumber": 8
  },
  {
    "__docId__": 570,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/internal/flat.js~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/flat.js~describe110.it111",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 571,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/internal/flat.js~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/flat.js~describe110.it112",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 572,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/internal/flat.js~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/flat.js~describe110.it113",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 20
  },
  {
    "__docId__": 573,
    "kind": "testFile",
    "name": "test/internal/flatMap.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#flatMap', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.flatMap();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.flatMap([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.flatMap([1, 2, 3], x => [x]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, 3];\n    const expected = [1, 2, 3];\n    const iterable = new Iterable(base).flatMap(x => [x]);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/flatMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 574,
    "kind": "test",
    "name": "describe114",
    "testId": 114,
    "memberof": "test/internal/flatMap.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/flatMap.js~describe114",
    "access": "public",
    "description": "#flatMap",
    "lineNumber": 8
  },
  {
    "__docId__": 575,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/internal/flatMap.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/flatMap.js~describe114.it115",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 576,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/internal/flatMap.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/flatMap.js~describe114.it116",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 577,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/internal/flatMap.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/flatMap.js~describe114.it117",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 578,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/internal/flatMap.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/flatMap.js~describe114.it118",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 27
  },
  {
    "__docId__": 579,
    "kind": "testFile",
    "name": "test/internal/ignoreElements.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#ignoreElements', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.ignoreElements();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.ignoreElements([1, 2, 3, 4]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct sequence', () => {\n    const base = [1, 2, 3, 4];\n    const iterable = new Iterable(base).ignoreElements();\n    let acc = true;\n    for (const i of iterable) {\n      acc = false;\n    }\n    assert(acc);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/ignoreElements.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 580,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/internal/ignoreElements.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/ignoreElements.js~describe119",
    "access": "public",
    "description": "#ignoreElements",
    "lineNumber": 8
  },
  {
    "__docId__": 581,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/internal/ignoreElements.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/ignoreElements.js~describe119.it120",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 582,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/internal/ignoreElements.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/ignoreElements.js~describe119.it121",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 583,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/internal/ignoreElements.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/ignoreElements.js~describe119.it122",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 20
  },
  {
    "__docId__": 584,
    "kind": "testFile",
    "name": "test/internal/indexOf.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#indexOf', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.indexOf();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.indexOf([1, 2, 3], 3);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, 3];\n    const iterable = new Iterable(base.slice(0)).indexOf(3);\n\n    for (const i of iterable) {\n      assert(base.indexOf(3) === i);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/indexOf.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 585,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "test/internal/indexOf.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/indexOf.js~describe123",
    "access": "public",
    "description": "#indexOf",
    "lineNumber": 8
  },
  {
    "__docId__": 586,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/internal/indexOf.js~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/indexOf.js~describe123.it124",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 587,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/internal/indexOf.js~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/indexOf.js~describe123.it125",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 588,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/internal/indexOf.js~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/indexOf.js~describe123.it126",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 20
  },
  {
    "__docId__": 589,
    "kind": "testFile",
    "name": "test/internal/innerJoin.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#innerJoin', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.innerJoin();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a second invalid Iterable', () => {\n    try {\n      Iterable.innerJoin(Iterable.just(10));\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should yield the correct sequence', () => {\n    const expected = [2, 2, 4, 4, 4, 2];\n    const iterable = new Iterable([1, 2, 2, 3, 4]).innerJoin([6, 4, 4, 2]);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/innerJoin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 590,
    "kind": "test",
    "name": "describe127",
    "testId": 127,
    "memberof": "test/internal/innerJoin.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/innerJoin.js~describe127",
    "access": "public",
    "description": "#innerJoin",
    "lineNumber": 8
  },
  {
    "__docId__": 591,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/internal/innerJoin.js~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/innerJoin.js~describe127.it128",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 592,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/internal/innerJoin.js~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/innerJoin.js~describe127.it129",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a second invalid Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 593,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/internal/innerJoin.js~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/innerJoin.js~describe127.it130",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 23
  },
  {
    "__docId__": 594,
    "kind": "testFile",
    "name": "test/internal/intercalate.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#intercalate', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.intercalate();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a second invalid Iterable', () => {\n    try {\n      Iterable.intercalate(Iterable.just(10));\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should yield the correct sequence', () => {\n    const expected = [10, 20, 30];\n    const iterable = new Iterable([10, 30]).intercalate([20]);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/intercalate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 595,
    "kind": "test",
    "name": "describe131",
    "testId": 131,
    "memberof": "test/internal/intercalate.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/intercalate.js~describe131",
    "access": "public",
    "description": "#intercalate",
    "lineNumber": 8
  },
  {
    "__docId__": 596,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "test/internal/intercalate.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/intercalate.js~describe131.it132",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 597,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/internal/intercalate.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/intercalate.js~describe131.it133",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a second invalid Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 598,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/internal/intercalate.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/intercalate.js~describe131.it134",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 23
  },
  {
    "__docId__": 599,
    "kind": "testFile",
    "name": "test/internal/intersect.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#intersect', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.intersect();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a second invalid Iterable', () => {\n    try {\n      Iterable.intersect(Iterable.just(10));\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should yield the correct sequence', () => {\n    const expected = [2, 2, 4];\n    const iterable = new Iterable([1, 2, 2, 3, 4]).intersect([6, 4, 4, 2]);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/intersect.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 600,
    "kind": "test",
    "name": "describe135",
    "testId": 135,
    "memberof": "test/internal/intersect.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/intersect.js~describe135",
    "access": "public",
    "description": "#intersect",
    "lineNumber": 8
  },
  {
    "__docId__": 601,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/internal/intersect.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/intersect.js~describe135.it136",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 602,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/internal/intersect.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/intersect.js~describe135.it137",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a second invalid Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 603,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/internal/intersect.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/intersect.js~describe135.it138",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 23
  },
  {
    "__docId__": 604,
    "kind": "testFile",
    "name": "test/internal/intersperse.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#intersperse', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.intersperse();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should yield the correct sequence', () => {\n    const expected = [10, 20, 30];\n    const iterable = new Iterable([10, 30]).intersperse(20);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/intersperse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 605,
    "kind": "test",
    "name": "describe139",
    "testId": 139,
    "memberof": "test/internal/intersperse.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/intersperse.js~describe139",
    "access": "public",
    "description": "#intersperse",
    "lineNumber": 8
  },
  {
    "__docId__": 606,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/internal/intersperse.js~describe139",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/intersperse.js~describe139.it140",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 607,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/internal/intersperse.js~describe139",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/intersperse.js~describe139.it141",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 16
  },
  {
    "__docId__": 608,
    "kind": "testFile",
    "name": "test/internal/isEmpty.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#isEmpty', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.isEmpty();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.isEmpty([1, 2, 3]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield true if the Iterable is empty', () => {\n    const iterable = Iterable.isEmpty([]);\n    for (const c of iterable) {\n      assert(c === true);\n    }\n  });\n  it('should yield false if the Iterable is not empty', () => {\n    const iterable = new Iterable([1, 2, 3]).isEmpty();\n    for (const c of iterable) {\n      assert(c === false);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/isEmpty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 609,
    "kind": "test",
    "name": "describe142",
    "testId": 142,
    "memberof": "test/internal/isEmpty.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/isEmpty.js~describe142",
    "access": "public",
    "description": "#isEmpty",
    "lineNumber": 8
  },
  {
    "__docId__": 610,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/internal/isEmpty.js~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/isEmpty.js~describe142.it143",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 611,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/internal/isEmpty.js~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/isEmpty.js~describe142.it144",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 612,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/internal/isEmpty.js~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/isEmpty.js~describe142.it145",
    "access": "public",
    "description": "should yield true if the Iterable is empty",
    "lineNumber": 20
  },
  {
    "__docId__": 613,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/internal/isEmpty.js~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/isEmpty.js~describe142.it146",
    "access": "public",
    "description": "should yield false if the Iterable is not empty",
    "lineNumber": 26
  },
  {
    "__docId__": 614,
    "kind": "testFile",
    "name": "test/internal/just.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#just', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.just();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.just(100);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const x = 100;\n    const iterable = Iterable.just(x);\n\n    for (const i of iterable) {\n      assert(x === i);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/just.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 615,
    "kind": "test",
    "name": "describe147",
    "testId": 147,
    "memberof": "test/internal/just.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/just.js~describe147",
    "access": "public",
    "description": "#just",
    "lineNumber": 8
  },
  {
    "__docId__": 616,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/internal/just.js~describe147",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/just.js~describe147.it148",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 617,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/internal/just.js~describe147",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/just.js~describe147.it149",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 618,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/internal/just.js~describe147",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/just.js~describe147.it150",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 20
  },
  {
    "__docId__": 619,
    "kind": "testFile",
    "name": "test/internal/last.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#last', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.last();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-function provided (except undefined)', () => {\n    try {\n      Iterable.last([1, 2, 3], 1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.last([1, 2, 3]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, 3];\n    const iterable = new Iterable(base.slice(0)).last(x => typeof x === 'number');\n\n    for (const i of iterable) {\n      assert(base.pop() === i);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/last.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 620,
    "kind": "test",
    "name": "describe151",
    "testId": 151,
    "memberof": "test/internal/last.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/last.js~describe151",
    "access": "public",
    "description": "#last",
    "lineNumber": 8
  },
  {
    "__docId__": 621,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/internal/last.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/last.js~describe151.it152",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 622,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/internal/last.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/last.js~describe151.it153",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-function provided (except undefined)",
    "lineNumber": 16
  },
  {
    "__docId__": 623,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/internal/last.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/last.js~describe151.it154",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 624,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/internal/last.js~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/last.js~describe151.it155",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 27
  },
  {
    "__docId__": 625,
    "kind": "testFile",
    "name": "test/internal/leftJoin.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#leftJoin', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.leftJoin();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a second invalid Iterable', () => {\n    try {\n      Iterable.leftJoin(Iterable.just(10));\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should yield the correct sequence', () => {\n    const expected = [1, 2, 2, 3, 4, 4, 4, 2];\n    const iterable = new Iterable([1, 2, 2, 3, 4]).leftJoin([6, 4, 4, 2]);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/leftJoin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 626,
    "kind": "test",
    "name": "describe156",
    "testId": 156,
    "memberof": "test/internal/leftJoin.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/leftJoin.js~describe156",
    "access": "public",
    "description": "#leftJoin",
    "lineNumber": 8
  },
  {
    "__docId__": 627,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/internal/leftJoin.js~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/leftJoin.js~describe156.it157",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 628,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/internal/leftJoin.js~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/leftJoin.js~describe156.it158",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a second invalid Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 629,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "test/internal/leftJoin.js~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/leftJoin.js~describe156.it159",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 23
  },
  {
    "__docId__": 630,
    "kind": "testFile",
    "name": "test/internal/map.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#map', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.map();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.map([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.map([1, 2, 3], x => x);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, 3];\n    const expected = [2, 4, 6];\n    const iterable = new Iterable(base).map(x => x * 2);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 631,
    "kind": "test",
    "name": "describe160",
    "testId": 160,
    "memberof": "test/internal/map.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/map.js~describe160",
    "access": "public",
    "description": "#map",
    "lineNumber": 8
  },
  {
    "__docId__": 632,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/internal/map.js~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/map.js~describe160.it161",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 633,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "test/internal/map.js~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/map.js~describe160.it162",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 634,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/internal/map.js~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/map.js~describe160.it163",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 635,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/internal/map.js~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/map.js~describe160.it164",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 27
  },
  {
    "__docId__": 636,
    "kind": "testFile",
    "name": "test/internal/max.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n\nconst { max } = Math;\n\n/* eslint-disable no-undef */\ndescribe('#max', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.max();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable', () => {\n    assert(Iterable.max([1, 2, 3]) instanceof Iterable);\n  });\n  it('should yield the correct max if the Iterable yields the value', () => {\n    const base = [1, 2, 3];\n    for (const c of new Iterable(base).max()) {\n      assert(c === base.reduce((x, y) => max(x, y)));\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/max.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 637,
    "kind": "test",
    "name": "describe165",
    "testId": 165,
    "memberof": "test/internal/max.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/max.js~describe165",
    "access": "public",
    "description": "#max",
    "lineNumber": 11
  },
  {
    "__docId__": 638,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "test/internal/max.js~describe165",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/max.js~describe165.it166",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 12
  },
  {
    "__docId__": 639,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/internal/max.js~describe165",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/max.js~describe165.it167",
    "access": "public",
    "description": "should return an Iterable",
    "lineNumber": 19
  },
  {
    "__docId__": 640,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/internal/max.js~describe165",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/max.js~describe165.it168",
    "access": "public",
    "description": "should yield the correct max if the Iterable yields the value",
    "lineNumber": 22
  },
  {
    "__docId__": 641,
    "kind": "testFile",
    "name": "test/internal/min.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n\nconst { min } = Math;\n\n/* eslint-disable no-undef */\ndescribe('#min', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.min();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable', () => {\n    assert(Iterable.min([1, 2, 3]) instanceof Iterable);\n  });\n  it('should yield the correct min if the Iterable yields the value', () => {\n    const base = [1, 2, 3];\n    for (const c of new Iterable(base).min()) {\n      assert(c === base.reduce((x, y) => min(x, y)));\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/min.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 642,
    "kind": "test",
    "name": "describe169",
    "testId": 169,
    "memberof": "test/internal/min.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/min.js~describe169",
    "access": "public",
    "description": "#min",
    "lineNumber": 11
  },
  {
    "__docId__": 643,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "test/internal/min.js~describe169",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/min.js~describe169.it170",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 12
  },
  {
    "__docId__": 644,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/internal/min.js~describe169",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/min.js~describe169.it171",
    "access": "public",
    "description": "should return an Iterable",
    "lineNumber": 19
  },
  {
    "__docId__": 645,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "test/internal/min.js~describe169",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/min.js~describe169.it172",
    "access": "public",
    "description": "should yield the correct min if the Iterable yields the value",
    "lineNumber": 22
  },
  {
    "__docId__": 646,
    "kind": "testFile",
    "name": "test/internal/onDone.js",
    "content": "/* eslint-disable no-unused-vars */\n/* eslint-disable no-empty */\n/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#onDone', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.onDone();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.onDone([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.onDone([1, 2, 3], () => {});\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    let flag = false;\n    const iterable = new Iterable([1, 2, 3]).onDone(() => { flag = true; });\n\n    for (const i of iterable) {\n    }\n    assert(flag === true);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/onDone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 647,
    "kind": "test",
    "name": "describe173",
    "testId": 173,
    "memberof": "test/internal/onDone.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/onDone.js~describe173",
    "access": "public",
    "description": "#onDone",
    "lineNumber": 10
  },
  {
    "__docId__": 648,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "test/internal/onDone.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onDone.js~describe173.it174",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 11
  },
  {
    "__docId__": 649,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "test/internal/onDone.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onDone.js~describe173.it175",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 18
  },
  {
    "__docId__": 650,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/internal/onDone.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onDone.js~describe173.it176",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 25
  },
  {
    "__docId__": 651,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/internal/onDone.js~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onDone.js~describe173.it177",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 29
  },
  {
    "__docId__": 652,
    "kind": "testFile",
    "name": "test/internal/onStart.js",
    "content": "/* eslint-disable no-unused-vars */\n/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#onStart', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.onStart();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.onStart([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.onStart([1, 2, 3], () => {});\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    let flag = false;\n    const iterable = new Iterable([1, 2, 3]).onStart(() => { flag = true; });\n\n    for (const i of iterable) {\n      assert(flag === true);\n      return;\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/onStart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 653,
    "kind": "test",
    "name": "describe178",
    "testId": 178,
    "memberof": "test/internal/onStart.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/onStart.js~describe178",
    "access": "public",
    "description": "#onStart",
    "lineNumber": 9
  },
  {
    "__docId__": 654,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/internal/onStart.js~describe178",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onStart.js~describe178.it179",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 10
  },
  {
    "__docId__": 655,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/internal/onStart.js~describe178",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onStart.js~describe178.it180",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 17
  },
  {
    "__docId__": 656,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "test/internal/onStart.js~describe178",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onStart.js~describe178.it181",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 24
  },
  {
    "__docId__": 657,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/internal/onStart.js~describe178",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onStart.js~describe178.it182",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 28
  },
  {
    "__docId__": 658,
    "kind": "testFile",
    "name": "test/internal/onYield.js",
    "content": "/* eslint-disable no-unused-vars */\n/* eslint-disable no-empty */\n/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#onYield', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.onYield();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.onYield([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.onYield([1, 2, 3], () => {});\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    let flag = true;\n    const base = [1, 2, 3];\n    const iterable = new Iterable(base.slice(0)).onYield((x) => {\n      flag = flag && x === base.shift();\n    });\n\n    for (const i of iterable) {\n    }\n    assert(flag === true);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/onYield.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 659,
    "kind": "test",
    "name": "describe183",
    "testId": 183,
    "memberof": "test/internal/onYield.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/onYield.js~describe183",
    "access": "public",
    "description": "#onYield",
    "lineNumber": 10
  },
  {
    "__docId__": 660,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/internal/onYield.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onYield.js~describe183.it184",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 11
  },
  {
    "__docId__": 661,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "test/internal/onYield.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onYield.js~describe183.it185",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 18
  },
  {
    "__docId__": 662,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/internal/onYield.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onYield.js~describe183.it186",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 25
  },
  {
    "__docId__": 663,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "test/internal/onYield.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/onYield.js~describe183.it187",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 29
  },
  {
    "__docId__": 664,
    "kind": "testFile",
    "name": "test/internal/outerJoin.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#outerJoin', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.outerJoin();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a second invalid Iterable', () => {\n    try {\n      Iterable.outerJoin(Iterable.just(10));\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should yield the correct sequence', () => {\n    const expected = [1, 3, 6];\n    const iterable = new Iterable([1, 2, 2, 3, 4]).outerJoin([6, 4, 4, 2]);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/outerJoin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 665,
    "kind": "test",
    "name": "describe188",
    "testId": 188,
    "memberof": "test/internal/outerJoin.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/outerJoin.js~describe188",
    "access": "public",
    "description": "#outerJoin",
    "lineNumber": 8
  },
  {
    "__docId__": 666,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "test/internal/outerJoin.js~describe188",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/outerJoin.js~describe188.it189",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 667,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/internal/outerJoin.js~describe188",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/outerJoin.js~describe188.it190",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a second invalid Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 668,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/internal/outerJoin.js~describe188",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/outerJoin.js~describe188.it191",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 23
  },
  {
    "__docId__": 669,
    "kind": "testFile",
    "name": "test/internal/partition.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#partition', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.partition();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.partition([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Array of 2 Iterables if no errors.', () => {\n    const iterable = new Iterable([1, 2, 3, 4]).partition(x => x % 2 === 0);\n    assert(iterable instanceof Array);\n    assert(iterable.length === 2);\n    assert(iterable[0] instanceof Iterable);\n    for (const i of iterable[0]) {\n      assert(i % 2 === 0);\n    }\n    assert(iterable[1] instanceof Iterable);\n    for (const i of iterable[1]) {\n      assert(i % 2 === 1);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/partition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 670,
    "kind": "test",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/internal/partition.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/partition.js~describe192",
    "access": "public",
    "description": "#partition",
    "lineNumber": 8
  },
  {
    "__docId__": 671,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "test/internal/partition.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/partition.js~describe192.it193",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 672,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "test/internal/partition.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/partition.js~describe192.it194",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 673,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/internal/partition.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/partition.js~describe192.it195",
    "access": "public",
    "description": "should return an Array of 2 Iterables if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 674,
    "kind": "testFile",
    "name": "test/internal/range.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#range', () => {\n  it('should throw a BadArgumentError if there is a first invalid number', () => {\n    try {\n      Iterable.range();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a second invalid number', () => {\n    try {\n      Iterable.range(1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a third invalid number or undefined', () => {\n    try {\n      Iterable.range(1, 2, 'test');\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.range(1, 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const expected = [1, 2, 3, 4];\n    const iterable = Iterable.range(1, 4, 1);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/range.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 675,
    "kind": "test",
    "name": "describe196",
    "testId": 196,
    "memberof": "test/internal/range.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/range.js~describe196",
    "access": "public",
    "description": "#range",
    "lineNumber": 8
  },
  {
    "__docId__": 676,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/internal/range.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/range.js~describe196.it197",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a first invalid number",
    "lineNumber": 9
  },
  {
    "__docId__": 677,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "test/internal/range.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/range.js~describe196.it198",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a second invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 678,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "test/internal/range.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/range.js~describe196.it199",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a third invalid number or undefined",
    "lineNumber": 23
  },
  {
    "__docId__": 679,
    "kind": "test",
    "name": "it200",
    "testId": 200,
    "memberof": "test/internal/range.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/range.js~describe196.it200",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 680,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "test/internal/range.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/range.js~describe196.it201",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 34
  },
  {
    "__docId__": 681,
    "kind": "testFile",
    "name": "test/internal/reduce.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#reduce', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.reduce();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.reduce([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.reduce([1, 2, 3], (acc, i) => acc + i);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, 3];\n    const iterable = new Iterable(base).reduce((acc, i) => (acc == null ? 0 : acc) + i);\n    for (const i of iterable) {\n      assert(i === base.reduce((acc, x) => acc + x));\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/reduce.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 682,
    "kind": "test",
    "name": "describe202",
    "testId": 202,
    "memberof": "test/internal/reduce.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/reduce.js~describe202",
    "access": "public",
    "description": "#reduce",
    "lineNumber": 8
  },
  {
    "__docId__": 683,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "test/internal/reduce.js~describe202",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reduce.js~describe202.it203",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 684,
    "kind": "test",
    "name": "it204",
    "testId": 204,
    "memberof": "test/internal/reduce.js~describe202",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reduce.js~describe202.it204",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 685,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "test/internal/reduce.js~describe202",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reduce.js~describe202.it205",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 686,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "test/internal/reduce.js~describe202",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reduce.js~describe202.it206",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 27
  },
  {
    "__docId__": 687,
    "kind": "testFile",
    "name": "test/internal/reduceRight.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#reduceRight', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.reduceRight();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.reduceRight([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.reduceRight([1, 2, 3], (acc, i) => acc + i);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, 3];\n    const iterable = new Iterable(base).reduceRight((acc, i) => (acc == null ? 0 : acc) + i);\n    for (const i of iterable) {\n      assert(i === base.reduceRight((acc, x) => acc + x));\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/reduceRight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 688,
    "kind": "test",
    "name": "describe207",
    "testId": 207,
    "memberof": "test/internal/reduceRight.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/reduceRight.js~describe207",
    "access": "public",
    "description": "#reduceRight",
    "lineNumber": 8
  },
  {
    "__docId__": 689,
    "kind": "test",
    "name": "it208",
    "testId": 208,
    "memberof": "test/internal/reduceRight.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reduceRight.js~describe207.it208",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 690,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "test/internal/reduceRight.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reduceRight.js~describe207.it209",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 691,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "test/internal/reduceRight.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reduceRight.js~describe207.it210",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 692,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "test/internal/reduceRight.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reduceRight.js~describe207.it211",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 27
  },
  {
    "__docId__": 693,
    "kind": "testFile",
    "name": "test/internal/repeat.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#repeat', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.repeat();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.repeat([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.repeat([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.repeat([1, 2, 3, 4], 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 2, 3, 4, 1, 2, 3, 4];\n    const iterable = new Iterable(base).repeat(2);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/repeat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 694,
    "kind": "test",
    "name": "describe212",
    "testId": 212,
    "memberof": "test/internal/repeat.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/repeat.js~describe212",
    "access": "public",
    "description": "#repeat",
    "lineNumber": 8
  },
  {
    "__docId__": 695,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "test/internal/repeat.js~describe212",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/repeat.js~describe212.it213",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 696,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "test/internal/repeat.js~describe212",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/repeat.js~describe212.it214",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 697,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "test/internal/repeat.js~describe212",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/repeat.js~describe212.it215",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 698,
    "kind": "test",
    "name": "it216",
    "testId": 216,
    "memberof": "test/internal/repeat.js~describe212",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/repeat.js~describe212.it216",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 699,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "test/internal/repeat.js~describe212",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/repeat.js~describe212.it217",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 34
  },
  {
    "__docId__": 700,
    "kind": "testFile",
    "name": "test/internal/replace.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#replace', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.replace();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.replace([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.replace([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.replace([1, 2, 3, 4], 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 2, 5, 4];\n    const iterable = new Iterable(base).replace(2, 5);\n    for (const c of iterable) {\n      assert(c === expected.shift());\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/replace.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 701,
    "kind": "test",
    "name": "describe218",
    "testId": 218,
    "memberof": "test/internal/replace.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/replace.js~describe218",
    "access": "public",
    "description": "#replace",
    "lineNumber": 8
  },
  {
    "__docId__": 702,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "test/internal/replace.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/replace.js~describe218.it219",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 703,
    "kind": "test",
    "name": "it220",
    "testId": 220,
    "memberof": "test/internal/replace.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/replace.js~describe218.it220",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 704,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "test/internal/replace.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/replace.js~describe218.it221",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 705,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "test/internal/replace.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/replace.js~describe218.it222",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 706,
    "kind": "test",
    "name": "it223",
    "testId": 223,
    "memberof": "test/internal/replace.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/replace.js~describe218.it223",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 34
  },
  {
    "__docId__": 707,
    "kind": "testFile",
    "name": "test/internal/reverse.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#reverse', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.reverse();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.reverse([1, 2, 3, 4]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct sequence', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [4, 3, 2, 1];\n    const iterable = new Iterable(base).reverse();\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/reverse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 708,
    "kind": "test",
    "name": "describe224",
    "testId": 224,
    "memberof": "test/internal/reverse.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/reverse.js~describe224",
    "access": "public",
    "description": "#reverse",
    "lineNumber": 8
  },
  {
    "__docId__": 709,
    "kind": "test",
    "name": "it225",
    "testId": 225,
    "memberof": "test/internal/reverse.js~describe224",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reverse.js~describe224.it225",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 710,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "test/internal/reverse.js~describe224",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reverse.js~describe224.it226",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 711,
    "kind": "test",
    "name": "it227",
    "testId": 227,
    "memberof": "test/internal/reverse.js~describe224",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/reverse.js~describe224.it227",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 20
  },
  {
    "__docId__": 712,
    "kind": "testFile",
    "name": "test/internal/scan.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#scan', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.scan();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.scan([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.scan([1, 2, 3], (acc, i) => acc + i);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [1, 2, 3];\n    const expected = [1, 3, 6];\n    const iterable = new Iterable(base).scan((acc, i) => (acc == null ? 0 : acc) + i);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/scan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 713,
    "kind": "test",
    "name": "describe228",
    "testId": 228,
    "memberof": "test/internal/scan.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/scan.js~describe228",
    "access": "public",
    "description": "#scan",
    "lineNumber": 8
  },
  {
    "__docId__": 714,
    "kind": "test",
    "name": "it229",
    "testId": 229,
    "memberof": "test/internal/scan.js~describe228",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/scan.js~describe228.it229",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 715,
    "kind": "test",
    "name": "it230",
    "testId": 230,
    "memberof": "test/internal/scan.js~describe228",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/scan.js~describe228.it230",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 716,
    "kind": "test",
    "name": "it231",
    "testId": 231,
    "memberof": "test/internal/scan.js~describe228",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/scan.js~describe228.it231",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 717,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "test/internal/scan.js~describe228",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/scan.js~describe228.it232",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 27
  },
  {
    "__docId__": 718,
    "kind": "testFile",
    "name": "test/internal/scanRight.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#scanRight', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.scanRight();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.scanRight([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.scanRight([1, 2, 3], (acc, i) => acc + i);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct result.', () => {\n    const base = [3, 2, 1];\n    const expected = [1, 3, 6];\n    const iterable = new Iterable(base).scanRight((acc, i) => (acc == null ? 0 : acc) + i);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/scanRight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 719,
    "kind": "test",
    "name": "describe233",
    "testId": 233,
    "memberof": "test/internal/scanRight.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/scanRight.js~describe233",
    "access": "public",
    "description": "#scanRight",
    "lineNumber": 8
  },
  {
    "__docId__": 720,
    "kind": "test",
    "name": "it234",
    "testId": 234,
    "memberof": "test/internal/scanRight.js~describe233",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/scanRight.js~describe233.it234",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 721,
    "kind": "test",
    "name": "it235",
    "testId": 235,
    "memberof": "test/internal/scanRight.js~describe233",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/scanRight.js~describe233.it235",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 722,
    "kind": "test",
    "name": "it236",
    "testId": 236,
    "memberof": "test/internal/scanRight.js~describe233",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/scanRight.js~describe233.it236",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 723,
    "kind": "test",
    "name": "it237",
    "testId": 237,
    "memberof": "test/internal/scanRight.js~describe233",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/scanRight.js~describe233.it237",
    "access": "public",
    "description": "should yield the correct result.",
    "lineNumber": 27
  },
  {
    "__docId__": 724,
    "kind": "testFile",
    "name": "test/internal/skip.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#skip', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.skip();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.skip([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.skip([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.skip([1, 2, 3, 4], 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [3, 4];\n    const iterable = new Iterable(base).skip(2);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n  it('should yield the same if 0 is received', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 2, 3, 4];\n    const iterable = new Iterable(base).skip(0);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/skip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 725,
    "kind": "test",
    "name": "describe238",
    "testId": 238,
    "memberof": "test/internal/skip.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/skip.js~describe238",
    "access": "public",
    "description": "#skip",
    "lineNumber": 8
  },
  {
    "__docId__": 726,
    "kind": "test",
    "name": "it239",
    "testId": 239,
    "memberof": "test/internal/skip.js~describe238",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skip.js~describe238.it239",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 727,
    "kind": "test",
    "name": "it240",
    "testId": 240,
    "memberof": "test/internal/skip.js~describe238",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skip.js~describe238.it240",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 728,
    "kind": "test",
    "name": "it241",
    "testId": 241,
    "memberof": "test/internal/skip.js~describe238",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skip.js~describe238.it241",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 729,
    "kind": "test",
    "name": "it242",
    "testId": 242,
    "memberof": "test/internal/skip.js~describe238",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skip.js~describe238.it242",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 730,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "test/internal/skip.js~describe238",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skip.js~describe238.it243",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 34
  },
  {
    "__docId__": 731,
    "kind": "test",
    "name": "it244",
    "testId": 244,
    "memberof": "test/internal/skip.js~describe238",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skip.js~describe238.it244",
    "access": "public",
    "description": "should yield the same if 0 is received",
    "lineNumber": 45
  },
  {
    "__docId__": 732,
    "kind": "testFile",
    "name": "test/internal/skipLast.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#skipLast', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.skipLast();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.skipLast([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.skipLast([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.skipLast([1, 2, 3, 4], 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 2];\n    const iterable = new Iterable(base).skipLast(2);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n  it('should yield the same if 0 is received', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 2, 3, 4];\n    const iterable = new Iterable(base).skipLast(0);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/skipLast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 733,
    "kind": "test",
    "name": "describe245",
    "testId": 245,
    "memberof": "test/internal/skipLast.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/skipLast.js~describe245",
    "access": "public",
    "description": "#skipLast",
    "lineNumber": 8
  },
  {
    "__docId__": 734,
    "kind": "test",
    "name": "it246",
    "testId": 246,
    "memberof": "test/internal/skipLast.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipLast.js~describe245.it246",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 735,
    "kind": "test",
    "name": "it247",
    "testId": 247,
    "memberof": "test/internal/skipLast.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipLast.js~describe245.it247",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 736,
    "kind": "test",
    "name": "it248",
    "testId": 248,
    "memberof": "test/internal/skipLast.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipLast.js~describe245.it248",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 737,
    "kind": "test",
    "name": "it249",
    "testId": 249,
    "memberof": "test/internal/skipLast.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipLast.js~describe245.it249",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 738,
    "kind": "test",
    "name": "it250",
    "testId": 250,
    "memberof": "test/internal/skipLast.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipLast.js~describe245.it250",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 34
  },
  {
    "__docId__": 739,
    "kind": "test",
    "name": "it251",
    "testId": 251,
    "memberof": "test/internal/skipLast.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipLast.js~describe245.it251",
    "access": "public",
    "description": "should yield the same if 0 is received",
    "lineNumber": 45
  },
  {
    "__docId__": 740,
    "kind": "testFile",
    "name": "test/internal/skipUntil.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#skipUntil', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.skipUntil();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.skipUntil([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.skipUntil([1, 2, 3, 4], x => x === 3);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [3, 4];\n    const iterable = new Iterable(base).skipUntil(x => x === 3);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/skipUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 741,
    "kind": "test",
    "name": "describe252",
    "testId": 252,
    "memberof": "test/internal/skipUntil.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/skipUntil.js~describe252",
    "access": "public",
    "description": "#skipUntil",
    "lineNumber": 8
  },
  {
    "__docId__": 742,
    "kind": "test",
    "name": "it253",
    "testId": 253,
    "memberof": "test/internal/skipUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipUntil.js~describe252.it253",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 743,
    "kind": "test",
    "name": "it254",
    "testId": 254,
    "memberof": "test/internal/skipUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipUntil.js~describe252.it254",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 744,
    "kind": "test",
    "name": "it255",
    "testId": 255,
    "memberof": "test/internal/skipUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipUntil.js~describe252.it255",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 745,
    "kind": "test",
    "name": "it256",
    "testId": 256,
    "memberof": "test/internal/skipUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipUntil.js~describe252.it256",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 27
  },
  {
    "__docId__": 746,
    "kind": "testFile",
    "name": "test/internal/skipWhile.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#skipWhile', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.skipWhile();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.skipWhile([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.skipWhile([1, 2, 3, 4], x => x < 3);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [3, 4];\n    const iterable = new Iterable(base).skipWhile(x => x < 3);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/skipWhile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 747,
    "kind": "test",
    "name": "describe257",
    "testId": 257,
    "memberof": "test/internal/skipWhile.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/skipWhile.js~describe257",
    "access": "public",
    "description": "#skipWhile",
    "lineNumber": 8
  },
  {
    "__docId__": 748,
    "kind": "test",
    "name": "it258",
    "testId": 258,
    "memberof": "test/internal/skipWhile.js~describe257",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipWhile.js~describe257.it258",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 749,
    "kind": "test",
    "name": "it259",
    "testId": 259,
    "memberof": "test/internal/skipWhile.js~describe257",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipWhile.js~describe257.it259",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 750,
    "kind": "test",
    "name": "it260",
    "testId": 260,
    "memberof": "test/internal/skipWhile.js~describe257",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipWhile.js~describe257.it260",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 751,
    "kind": "test",
    "name": "it261",
    "testId": 261,
    "memberof": "test/internal/skipWhile.js~describe257",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/skipWhile.js~describe257.it261",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 27
  },
  {
    "__docId__": 752,
    "kind": "testFile",
    "name": "test/internal/slice.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#slice', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.slice();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.slice([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.slice([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a second invalid number', () => {\n    try {\n      Iterable.slice([1, 2, 3], 0);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a second non-positive number', () => {\n    try {\n      Iterable.slice([1, 2, 3], 0, -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.slice([1, 2, 3, 4], 0, 4);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [3, 4];\n    const iterable = new Iterable(base).slice(2, 4);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/slice.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 753,
    "kind": "test",
    "name": "describe262",
    "testId": 262,
    "memberof": "test/internal/slice.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/slice.js~describe262",
    "access": "public",
    "description": "#slice",
    "lineNumber": 8
  },
  {
    "__docId__": 754,
    "kind": "test",
    "name": "it263",
    "testId": 263,
    "memberof": "test/internal/slice.js~describe262",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/slice.js~describe262.it263",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 755,
    "kind": "test",
    "name": "it264",
    "testId": 264,
    "memberof": "test/internal/slice.js~describe262",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/slice.js~describe262.it264",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 756,
    "kind": "test",
    "name": "it265",
    "testId": 265,
    "memberof": "test/internal/slice.js~describe262",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/slice.js~describe262.it265",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 757,
    "kind": "test",
    "name": "it266",
    "testId": 266,
    "memberof": "test/internal/slice.js~describe262",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/slice.js~describe262.it266",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a second invalid number",
    "lineNumber": 30
  },
  {
    "__docId__": 758,
    "kind": "test",
    "name": "it267",
    "testId": 267,
    "memberof": "test/internal/slice.js~describe262",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/slice.js~describe262.it267",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a second non-positive number",
    "lineNumber": 37
  },
  {
    "__docId__": 759,
    "kind": "test",
    "name": "it268",
    "testId": 268,
    "memberof": "test/internal/slice.js~describe262",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/slice.js~describe262.it268",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 44
  },
  {
    "__docId__": 760,
    "kind": "test",
    "name": "it269",
    "testId": 269,
    "memberof": "test/internal/slice.js~describe262",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/slice.js~describe262.it269",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 48
  },
  {
    "__docId__": 761,
    "kind": "testFile",
    "name": "test/internal/sort.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#sort', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.sort();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-function provided (except undefined)', () => {\n    try {\n      Iterable.sort([1, 2, 3], 1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.sort([1, 2, 3, 4]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct sequence', () => {\n    const base = [1, 3, 2, 4];\n    const expected = [1, 2, 3, 4];\n    const iterable = new Iterable(base).sort();\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n  it('should yield the correct sequence with comparator', () => {\n    const base = [1, 3, 2, 4];\n    const expected = [1, 2, 3, 4];\n    const iterable = new Iterable(base).sort((a, b) => a - b);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/sort.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 762,
    "kind": "test",
    "name": "describe270",
    "testId": 270,
    "memberof": "test/internal/sort.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/sort.js~describe270",
    "access": "public",
    "description": "#sort",
    "lineNumber": 8
  },
  {
    "__docId__": 763,
    "kind": "test",
    "name": "it271",
    "testId": 271,
    "memberof": "test/internal/sort.js~describe270",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sort.js~describe270.it271",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 764,
    "kind": "test",
    "name": "it272",
    "testId": 272,
    "memberof": "test/internal/sort.js~describe270",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sort.js~describe270.it272",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-function provided (except undefined)",
    "lineNumber": 16
  },
  {
    "__docId__": 765,
    "kind": "test",
    "name": "it273",
    "testId": 273,
    "memberof": "test/internal/sort.js~describe270",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sort.js~describe270.it273",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 766,
    "kind": "test",
    "name": "it274",
    "testId": 274,
    "memberof": "test/internal/sort.js~describe270",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sort.js~describe270.it274",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 27
  },
  {
    "__docId__": 767,
    "kind": "test",
    "name": "it275",
    "testId": 275,
    "memberof": "test/internal/sort.js~describe270",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sort.js~describe270.it275",
    "access": "public",
    "description": "should yield the correct sequence with comparator",
    "lineNumber": 37
  },
  {
    "__docId__": 768,
    "kind": "testFile",
    "name": "test/internal/sorted.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#sorted', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.sorted();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-function provided (except undefined)', () => {\n    try {\n      Iterable.sorted([1, 2, 3], 1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.sorted([1, 2, 3, 4]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield true if the sequence is sorted by ascending.', () => {\n    const base = [1, 2, 3, 4];\n    const iterable = new Iterable(base).sorted();\n    for (const c of iterable) {\n      assert(c === true);\n    }\n  });\n  it('should yield true if the sequence is sorted by comparator.', () => {\n    const base = [1, 2, 3, 4];\n    const iterable = new Iterable(base).sorted((a, b) => a - b);\n    for (const c of iterable) {\n      assert(c === true);\n    }\n  });\n  it('should yield false if the sequence is not sorted by ascending.', () => {\n    const base = [1, 3, 2, 4];\n    const iterable = new Iterable(base).sorted();\n    for (const c of iterable) {\n      assert(c === false);\n    }\n  });\n  it('should yield false if the sequence is not sorted by comparator.', () => {\n    const base = [1, 2, 3, 4];\n    const iterable = new Iterable(base).sorted((a, b) => b - a);\n    for (const c of iterable) {\n      assert(c === false);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/sorted.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 769,
    "kind": "test",
    "name": "describe276",
    "testId": 276,
    "memberof": "test/internal/sorted.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/sorted.js~describe276",
    "access": "public",
    "description": "#sorted",
    "lineNumber": 8
  },
  {
    "__docId__": 770,
    "kind": "test",
    "name": "it277",
    "testId": 277,
    "memberof": "test/internal/sorted.js~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sorted.js~describe276.it277",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 771,
    "kind": "test",
    "name": "it278",
    "testId": 278,
    "memberof": "test/internal/sorted.js~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sorted.js~describe276.it278",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-function provided (except undefined)",
    "lineNumber": 16
  },
  {
    "__docId__": 772,
    "kind": "test",
    "name": "it279",
    "testId": 279,
    "memberof": "test/internal/sorted.js~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sorted.js~describe276.it279",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 773,
    "kind": "test",
    "name": "it280",
    "testId": 280,
    "memberof": "test/internal/sorted.js~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sorted.js~describe276.it280",
    "access": "public",
    "description": "should yield true if the sequence is sorted by ascending.",
    "lineNumber": 27
  },
  {
    "__docId__": 774,
    "kind": "test",
    "name": "it281",
    "testId": 281,
    "memberof": "test/internal/sorted.js~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sorted.js~describe276.it281",
    "access": "public",
    "description": "should yield true if the sequence is sorted by comparator.",
    "lineNumber": 34
  },
  {
    "__docId__": 775,
    "kind": "test",
    "name": "it282",
    "testId": 282,
    "memberof": "test/internal/sorted.js~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sorted.js~describe276.it282",
    "access": "public",
    "description": "should yield false if the sequence is not sorted by ascending.",
    "lineNumber": 41
  },
  {
    "__docId__": 776,
    "kind": "test",
    "name": "it283",
    "testId": 283,
    "memberof": "test/internal/sorted.js~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sorted.js~describe276.it283",
    "access": "public",
    "description": "should yield false if the sequence is not sorted by comparator.",
    "lineNumber": 48
  },
  {
    "__docId__": 777,
    "kind": "testFile",
    "name": "test/internal/spanWith.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#spanWith', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.spanWith();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.spanWith([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Array of 2 Iterables if no errors.', () => {\n    const iterable = new Iterable([1, 2, 3]).spanWith(x => typeof x === 'number');\n    assert(iterable instanceof Array);\n    assert(iterable.length === 2);\n    assert(iterable[0] instanceof Iterable);\n    assert(iterable[1] instanceof Iterable);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/spanWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 778,
    "kind": "test",
    "name": "describe284",
    "testId": 284,
    "memberof": "test/internal/spanWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/spanWith.js~describe284",
    "access": "public",
    "description": "#spanWith",
    "lineNumber": 8
  },
  {
    "__docId__": 779,
    "kind": "test",
    "name": "it285",
    "testId": 285,
    "memberof": "test/internal/spanWith.js~describe284",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/spanWith.js~describe284.it285",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 780,
    "kind": "test",
    "name": "it286",
    "testId": 286,
    "memberof": "test/internal/spanWith.js~describe284",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/spanWith.js~describe284.it286",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 781,
    "kind": "test",
    "name": "it287",
    "testId": 287,
    "memberof": "test/internal/spanWith.js~describe284",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/spanWith.js~describe284.it287",
    "access": "public",
    "description": "should return an Array of 2 Iterables if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 782,
    "kind": "testFile",
    "name": "test/internal/split.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#split', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.split();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.split([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.split([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Array if no errors.', () => {\n    const iterable = Iterable.split([1, 2, 3, 4], 2);\n    assert(iterable instanceof Array);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const iterable = new Iterable(base).split(2);\n\n    assert(iterable instanceof Array);\n    assert(iterable.length === 2);\n    assert(iterable[0] instanceof Iterable);\n    assert(iterable[1] instanceof Iterable);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/split.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 783,
    "kind": "test",
    "name": "describe288",
    "testId": 288,
    "memberof": "test/internal/split.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/split.js~describe288",
    "access": "public",
    "description": "#split",
    "lineNumber": 8
  },
  {
    "__docId__": 784,
    "kind": "test",
    "name": "it289",
    "testId": 289,
    "memberof": "test/internal/split.js~describe288",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/split.js~describe288.it289",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 785,
    "kind": "test",
    "name": "it290",
    "testId": 290,
    "memberof": "test/internal/split.js~describe288",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/split.js~describe288.it290",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 786,
    "kind": "test",
    "name": "it291",
    "testId": 291,
    "memberof": "test/internal/split.js~describe288",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/split.js~describe288.it291",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 787,
    "kind": "test",
    "name": "it292",
    "testId": 292,
    "memberof": "test/internal/split.js~describe288",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/split.js~describe288.it292",
    "access": "public",
    "description": "should return an Array if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 788,
    "kind": "test",
    "name": "it293",
    "testId": 293,
    "memberof": "test/internal/split.js~describe288",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/split.js~describe288.it293",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 34
  },
  {
    "__docId__": 789,
    "kind": "testFile",
    "name": "test/internal/startWith.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#startWith', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.startWith();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.startWith([1, 2, 3, 4], 5, 6);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct sequence', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [5, 6, 1, 2, 3, 4];\n    const iterable = new Iterable(base).startWith(5, 6);\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/startWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 790,
    "kind": "test",
    "name": "describe294",
    "testId": 294,
    "memberof": "test/internal/startWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/startWith.js~describe294",
    "access": "public",
    "description": "#startWith",
    "lineNumber": 8
  },
  {
    "__docId__": 791,
    "kind": "test",
    "name": "it295",
    "testId": 295,
    "memberof": "test/internal/startWith.js~describe294",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/startWith.js~describe294.it295",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 792,
    "kind": "test",
    "name": "it296",
    "testId": 296,
    "memberof": "test/internal/startWith.js~describe294",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/startWith.js~describe294.it296",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 16
  },
  {
    "__docId__": 793,
    "kind": "test",
    "name": "it297",
    "testId": 297,
    "memberof": "test/internal/startWith.js~describe294",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/startWith.js~describe294.it297",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 20
  },
  {
    "__docId__": 794,
    "kind": "testFile",
    "name": "test/internal/step.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#step', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.step();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.step([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.step([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.step([1, 2, 3, 4], 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 3];\n    const iterable = new Iterable(base).step(2);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n  it('should yield nothing if 0 is received', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [];\n    const iterable = new Iterable(base).step(0);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = false;\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/step.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 795,
    "kind": "test",
    "name": "describe298",
    "testId": 298,
    "memberof": "test/internal/step.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/step.js~describe298",
    "access": "public",
    "description": "#step",
    "lineNumber": 8
  },
  {
    "__docId__": 796,
    "kind": "test",
    "name": "it299",
    "testId": 299,
    "memberof": "test/internal/step.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/step.js~describe298.it299",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 797,
    "kind": "test",
    "name": "it300",
    "testId": 300,
    "memberof": "test/internal/step.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/step.js~describe298.it300",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 798,
    "kind": "test",
    "name": "it301",
    "testId": 301,
    "memberof": "test/internal/step.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/step.js~describe298.it301",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 799,
    "kind": "test",
    "name": "it302",
    "testId": 302,
    "memberof": "test/internal/step.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/step.js~describe298.it302",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 800,
    "kind": "test",
    "name": "it303",
    "testId": 303,
    "memberof": "test/internal/step.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/step.js~describe298.it303",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 34
  },
  {
    "__docId__": 801,
    "kind": "test",
    "name": "it304",
    "testId": 304,
    "memberof": "test/internal/step.js~describe298",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/step.js~describe298.it304",
    "access": "public",
    "description": "should yield nothing if 0 is received",
    "lineNumber": 45
  },
  {
    "__docId__": 802,
    "kind": "testFile",
    "name": "test/internal/sum.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#sum', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.sum();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable', () => {\n    assert(Iterable.sum([1, 2, 3]) instanceof Iterable);\n  });\n  it('should yield the correct sum if the Iterable yields the value', () => {\n    const base = [1, 2, 3];\n    for (const c of new Iterable(base).sum()) {\n      assert(c === base.reduce((x, y) => x + y));\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/sum.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 803,
    "kind": "test",
    "name": "describe305",
    "testId": 305,
    "memberof": "test/internal/sum.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/sum.js~describe305",
    "access": "public",
    "description": "#sum",
    "lineNumber": 8
  },
  {
    "__docId__": 804,
    "kind": "test",
    "name": "it306",
    "testId": 306,
    "memberof": "test/internal/sum.js~describe305",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sum.js~describe305.it306",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 805,
    "kind": "test",
    "name": "it307",
    "testId": 307,
    "memberof": "test/internal/sum.js~describe305",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sum.js~describe305.it307",
    "access": "public",
    "description": "should return an Iterable",
    "lineNumber": 16
  },
  {
    "__docId__": 806,
    "kind": "test",
    "name": "it308",
    "testId": 308,
    "memberof": "test/internal/sum.js~describe305",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/sum.js~describe305.it308",
    "access": "public",
    "description": "should yield the correct sum if the Iterable yields the value",
    "lineNumber": 19
  },
  {
    "__docId__": 807,
    "kind": "testFile",
    "name": "test/internal/take.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#take', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.take();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.take([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.take([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.take([1, 2, 3, 4], 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 2];\n    const iterable = new Iterable(base).take(2);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n  it('should yield nothing if 0 is received', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [];\n    const iterable = new Iterable(base).take(0);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = false;\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/take.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 808,
    "kind": "test",
    "name": "describe309",
    "testId": 309,
    "memberof": "test/internal/take.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/take.js~describe309",
    "access": "public",
    "description": "#take",
    "lineNumber": 8
  },
  {
    "__docId__": 809,
    "kind": "test",
    "name": "it310",
    "testId": 310,
    "memberof": "test/internal/take.js~describe309",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/take.js~describe309.it310",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 810,
    "kind": "test",
    "name": "it311",
    "testId": 311,
    "memberof": "test/internal/take.js~describe309",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/take.js~describe309.it311",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 811,
    "kind": "test",
    "name": "it312",
    "testId": 312,
    "memberof": "test/internal/take.js~describe309",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/take.js~describe309.it312",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 812,
    "kind": "test",
    "name": "it313",
    "testId": 313,
    "memberof": "test/internal/take.js~describe309",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/take.js~describe309.it313",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 813,
    "kind": "test",
    "name": "it314",
    "testId": 314,
    "memberof": "test/internal/take.js~describe309",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/take.js~describe309.it314",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 34
  },
  {
    "__docId__": 814,
    "kind": "test",
    "name": "it315",
    "testId": 315,
    "memberof": "test/internal/take.js~describe309",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/take.js~describe309.it315",
    "access": "public",
    "description": "should yield nothing if 0 is received",
    "lineNumber": 45
  },
  {
    "__docId__": 815,
    "kind": "testFile",
    "name": "test/internal/takeLast.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#takeLast', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.takeLast();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid number', () => {\n    try {\n      Iterable.takeLast([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-positive number', () => {\n    try {\n      Iterable.takeLast([1, 2, 3], -1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.takeLast([1, 2, 3, 4], 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [3, 4];\n    const iterable = new Iterable(base).takeLast(2);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n  it('should yield nothing if 0 is received', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [];\n    const iterable = new Iterable(base).takeLast(0);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = false;\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/takeLast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 816,
    "kind": "test",
    "name": "describe316",
    "testId": 316,
    "memberof": "test/internal/takeLast.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/takeLast.js~describe316",
    "access": "public",
    "description": "#takeLast",
    "lineNumber": 8
  },
  {
    "__docId__": 817,
    "kind": "test",
    "name": "it317",
    "testId": 317,
    "memberof": "test/internal/takeLast.js~describe316",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeLast.js~describe316.it317",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 818,
    "kind": "test",
    "name": "it318",
    "testId": 318,
    "memberof": "test/internal/takeLast.js~describe316",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeLast.js~describe316.it318",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid number",
    "lineNumber": 16
  },
  {
    "__docId__": 819,
    "kind": "test",
    "name": "it319",
    "testId": 319,
    "memberof": "test/internal/takeLast.js~describe316",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeLast.js~describe316.it319",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-positive number",
    "lineNumber": 23
  },
  {
    "__docId__": 820,
    "kind": "test",
    "name": "it320",
    "testId": 320,
    "memberof": "test/internal/takeLast.js~describe316",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeLast.js~describe316.it320",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 30
  },
  {
    "__docId__": 821,
    "kind": "test",
    "name": "it321",
    "testId": 321,
    "memberof": "test/internal/takeLast.js~describe316",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeLast.js~describe316.it321",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 34
  },
  {
    "__docId__": 822,
    "kind": "test",
    "name": "it322",
    "testId": 322,
    "memberof": "test/internal/takeLast.js~describe316",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeLast.js~describe316.it322",
    "access": "public",
    "description": "should yield nothing if 0 is received",
    "lineNumber": 45
  },
  {
    "__docId__": 823,
    "kind": "testFile",
    "name": "test/internal/takeUntil.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#takeUntil', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.takeUntil();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.takeUntil([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.takeUntil([1, 2, 3, 4], x => x === 3);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 2];\n    const iterable = new Iterable(base).takeUntil(x => x === 3);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/takeUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 824,
    "kind": "test",
    "name": "describe323",
    "testId": 323,
    "memberof": "test/internal/takeUntil.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/takeUntil.js~describe323",
    "access": "public",
    "description": "#takeUntil",
    "lineNumber": 8
  },
  {
    "__docId__": 825,
    "kind": "test",
    "name": "it324",
    "testId": 324,
    "memberof": "test/internal/takeUntil.js~describe323",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeUntil.js~describe323.it324",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 826,
    "kind": "test",
    "name": "it325",
    "testId": 325,
    "memberof": "test/internal/takeUntil.js~describe323",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeUntil.js~describe323.it325",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 827,
    "kind": "test",
    "name": "it326",
    "testId": 326,
    "memberof": "test/internal/takeUntil.js~describe323",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeUntil.js~describe323.it326",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 828,
    "kind": "test",
    "name": "it327",
    "testId": 327,
    "memberof": "test/internal/takeUntil.js~describe323",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeUntil.js~describe323.it327",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 27
  },
  {
    "__docId__": 829,
    "kind": "testFile",
    "name": "test/internal/takeWhile.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#takeWhile', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.takeWhile();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.takeWhile([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.takeWhile([1, 2, 3, 4], x => x < 3);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 2];\n    const iterable = new Iterable(base).takeWhile(x => x < 3);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/takeWhile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 830,
    "kind": "test",
    "name": "describe328",
    "testId": 328,
    "memberof": "test/internal/takeWhile.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/takeWhile.js~describe328",
    "access": "public",
    "description": "#takeWhile",
    "lineNumber": 8
  },
  {
    "__docId__": 831,
    "kind": "test",
    "name": "it329",
    "testId": 329,
    "memberof": "test/internal/takeWhile.js~describe328",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeWhile.js~describe328.it329",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 832,
    "kind": "test",
    "name": "it330",
    "testId": 330,
    "memberof": "test/internal/takeWhile.js~describe328",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeWhile.js~describe328.it330",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 16
  },
  {
    "__docId__": 833,
    "kind": "test",
    "name": "it331",
    "testId": 331,
    "memberof": "test/internal/takeWhile.js~describe328",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeWhile.js~describe328.it331",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 834,
    "kind": "test",
    "name": "it332",
    "testId": 332,
    "memberof": "test/internal/takeWhile.js~describe328",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/takeWhile.js~describe328.it332",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 27
  },
  {
    "__docId__": 835,
    "kind": "testFile",
    "name": "test/internal/toArray.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#toArray', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.toArray();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Array', () => {\n    const iterable = new Iterable([1, 2, 3, 4]).toArray();\n    assert(iterable instanceof Array);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/toArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 836,
    "kind": "test",
    "name": "describe333",
    "testId": 333,
    "memberof": "test/internal/toArray.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/toArray.js~describe333",
    "access": "public",
    "description": "#toArray",
    "lineNumber": 8
  },
  {
    "__docId__": 837,
    "kind": "test",
    "name": "it334",
    "testId": 334,
    "memberof": "test/internal/toArray.js~describe333",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/toArray.js~describe333.it334",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 838,
    "kind": "test",
    "name": "it335",
    "testId": 335,
    "memberof": "test/internal/toArray.js~describe333",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/toArray.js~describe333.it335",
    "access": "public",
    "description": "should return an Array",
    "lineNumber": 16
  },
  {
    "__docId__": 839,
    "kind": "testFile",
    "name": "test/internal/whileDo.js",
    "content": "/* eslint-disable no-plusplus */\n/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#whileDo', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.whileDo();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is an invalid predicate', () => {\n    try {\n      Iterable.whileDo([1, 2, 3]);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.whileDo([1, 2, 3, 4], () => c++ < 2);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct value', () => {\n    const base = [1, 2, 3, 4];\n    const expected = [1, 2, 3, 4, 1, 2, 3, 4];\n\n    let c = 0;\n    const iterable = new Iterable(base).whileDo(() => c++ < 2);\n\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/whileDo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 840,
    "kind": "test",
    "name": "describe336",
    "testId": 336,
    "memberof": "test/internal/whileDo.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/whileDo.js~describe336",
    "access": "public",
    "description": "#whileDo",
    "lineNumber": 9
  },
  {
    "__docId__": 841,
    "kind": "test",
    "name": "it337",
    "testId": 337,
    "memberof": "test/internal/whileDo.js~describe336",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/whileDo.js~describe336.it337",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 10
  },
  {
    "__docId__": 842,
    "kind": "test",
    "name": "it338",
    "testId": 338,
    "memberof": "test/internal/whileDo.js~describe336",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/whileDo.js~describe336.it338",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid predicate",
    "lineNumber": 17
  },
  {
    "__docId__": 843,
    "kind": "test",
    "name": "it339",
    "testId": 339,
    "memberof": "test/internal/whileDo.js~describe336",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/whileDo.js~describe336.it339",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 24
  },
  {
    "__docId__": 844,
    "kind": "test",
    "name": "it340",
    "testId": 340,
    "memberof": "test/internal/whileDo.js~describe336",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/whileDo.js~describe336.it340",
    "access": "public",
    "description": "should yield the correct value",
    "lineNumber": 28
  },
  {
    "__docId__": 845,
    "kind": "testFile",
    "name": "test/internal/zip.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport '@babel/polyfill';\nimport assert from 'assert';\nimport Iterable from '../../src/iterable';\nimport { BadArgumentError } from '../../src/internal/utils';\n\n/* eslint-disable no-undef */\ndescribe('#zip', () => {\n  it('should throw a BadArgumentError if there is an invalid Iterable', () => {\n    try {\n      Iterable.zip();\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should throw a BadArgumentError if there is a non-function provided (except undefined)', () => {\n    try {\n      Iterable.zip([[1, 2, 3]], 1);\n    } catch (e) {\n      assert(e instanceof BadArgumentError);\n    }\n  });\n  it('should return an Iterable if no errors.', () => {\n    const iterable = Iterable.zip([[1, 2, 3, 4]]);\n    assert(iterable instanceof Iterable);\n  });\n  it('should yield the correct sequence', () => {\n    const base1 = 'Hello';\n    const base2 = 'World';\n    const expected = ['HW', 'eo', 'lr', 'll', 'od'];\n    const iterable = new Iterable(base1).zip([base2]);\n    let acc = true;\n    for (const [a, b] of iterable) {\n      acc = acc && a + b === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n  it('should yield the correct sequence with the given zipper', () => {\n    const base1 = 'Hello';\n    const base2 = 'World';\n    const expected = ['HW', 'eo', 'lr', 'll', 'od'];\n    const iterable = new Iterable(base1).zip([base2], x => x.reduce((a, b) => a + b));\n    let acc = true;\n    for (const i of iterable) {\n      acc = acc && i === expected.shift();\n    }\n    assert(acc && expected.length === 0);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/iterable-js/test/internal/zip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 846,
    "kind": "test",
    "name": "describe341",
    "testId": 341,
    "memberof": "test/internal/zip.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/internal/zip.js~describe341",
    "access": "public",
    "description": "#zip",
    "lineNumber": 8
  },
  {
    "__docId__": 847,
    "kind": "test",
    "name": "it342",
    "testId": 342,
    "memberof": "test/internal/zip.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/zip.js~describe341.it342",
    "access": "public",
    "description": "should throw a BadArgumentError if there is an invalid Iterable",
    "lineNumber": 9
  },
  {
    "__docId__": 848,
    "kind": "test",
    "name": "it343",
    "testId": 343,
    "memberof": "test/internal/zip.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/zip.js~describe341.it343",
    "access": "public",
    "description": "should throw a BadArgumentError if there is a non-function provided (except undefined)",
    "lineNumber": 16
  },
  {
    "__docId__": 849,
    "kind": "test",
    "name": "it344",
    "testId": 344,
    "memberof": "test/internal/zip.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/zip.js~describe341.it344",
    "access": "public",
    "description": "should return an Iterable if no errors.",
    "lineNumber": 23
  },
  {
    "__docId__": 850,
    "kind": "test",
    "name": "it345",
    "testId": 345,
    "memberof": "test/internal/zip.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/zip.js~describe341.it345",
    "access": "public",
    "description": "should yield the correct sequence",
    "lineNumber": 27
  },
  {
    "__docId__": 851,
    "kind": "test",
    "name": "it346",
    "testId": 346,
    "memberof": "test/internal/zip.js~describe341",
    "testDepth": 1,
    "static": true,
    "longname": "test/internal/zip.js~describe341.it346",
    "access": "public",
    "description": "should yield the correct sequence with the given zipper",
    "lineNumber": 38
  }
]