[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/completable.js",
    "content": "/**\n * @license\n * MIT License\n *\n * Copyright (c) 2019 Alexis Munsayac\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n * @author Alexis Munsayac <alexis.munsayac@gmail.com>\n * @copyright Alexis Munsayac 2019\n */\n\n/**\n * @external {Iterable} https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n */\n/**\n * @external {Thennable} https://promisesaplus.com/\n */\n/**\n * @external {PromiseLike} https://promisesaplus.com/\n */\n/**\n * @external {AbortController} https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n */\nimport AbortController from 'abort-controller';\nimport { isObserver } from './internal/utils';\nimport {\n  amb, ambWith, andThen, cache, complete,\n  compose, concat, create, defer, delay,\n  delaySubscription, doAfterTerminate,\n  doFinally, doOnAbort, doOnComplete,\n  doOnError, doOnEvent, doOnSubscribe,\n  doOnTerminate, error, fromCallable,\n  fromPromise, fromResolvable, lift, merge,\n  mergeWith, never, onErrorComplete,\n  onErrorResumeNext, repeat, retry,\n  startWith, timeout, timer, takeUntil, repeatUntil,\n} from './internal/operators';\n\n/**\n * The Completable class represents a deferred computation\n * without any value but only indication for completion\n * or exception.\n *\n * Completable behaves similarly to Observable except that\n * it can only emit either a completion or error signal\n * (there is no onNext or onSuccess as with the other\n * reactive types).\n *\n * The Completable operates with the following sequential protocol:\n *\n * onSubscribe (onError | onComplete)?\n *\n * Note that as with the Observable protocol, onError and\n * onComplete are mutually exclusive events.\n *\n * Like Observable, a running Completable can be stopped through\n * the AbortController instance provided to consumers through\n * Observer.onSubscribe(AbortController).\n *\n * Like an Observable, a Completable is lazy, can be either\n * \"hot\" or \"cold\", synchronous or asynchronous.\n * Completable instances returned by the methods of this class are\n * cold.\n *\n * The documentation for this class makes use of marble diagrams.\n * The following legend explains these diagrams:\n *\n * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.png\" class=\"diagram\">\n */\nexport default class Completable {\n  /**\n   * Returns a Completable which terminates as soon as\n   * one of the source Completables terminates\n   * (normally or with an error) and disposes all\n   * other Completables.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.amb.png\" class=\"diagram\">\n   *\n   * @param {!Iterable} sources\n   * the array of source Completables.\n   * A subscription to each source will occur in the\n   * same order as in this Iterable.\n   * @returns {Completable}\n   */\n  static amb(sources) {\n    return amb(sources);\n  }\n\n  /**\n   * Returns a Completable that emits the a terminated\n   * event of either this Completable or the other\n   * Completable whichever fires first.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.ambWith.png\" class=\"diagram\">\n   *\n   * @param {!Completable} other\n   * the other Completable, not null. A subscription to\n   * this provided source will occur after subscribing\n   * to the current source.\n   * @returns {Completable}\n   */\n  ambWith(other) {\n    return ambWith(this, other);\n  }\n\n  /**\n   * Returns a Completable that first runs this Completable\n   * and then the other completable.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.andThen.c.png\" class=\"diagram\">\n   *\n   * @param {!Completable} other\n   * the other Completable, not null\n   * @returns {Completable}\n   */\n  andThen(other) {\n    return andThen(this, other);\n  }\n\n  /**\n   * Subscribes to this Completable only once, when the first\n   * Observer subscribes to the result Completable, caches its\n   * terminal event and relays/replays it to observers.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.cache.png\" class=\"diagram\">\n   *\n   * @returns {Completable}\n   */\n  cache() {\n    return cache(this);\n  }\n\n  /**\n   * Returns a Completable instance that completes immediately\n   * when subscribed to.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.complete.png\" class=\"diagram\">\n   *\n   * @returns {Completable}\n   */\n  static complete() {\n    return complete();\n  }\n\n  /**\n   * Calls the given transformer function with this instance an\n   * returns the function's resulting Completable.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.compose.png\" class=\"diagram\">\n   *\n   * @param {!function(completable: Completable):Completable} transformer\n   * the transformer function, not null\n   * @returns {Completable}\n   */\n  compose(transformer) {\n    return compose(this, transformer);\n  }\n\n  /**\n   * Returns a Completable which completes only when all sources\n   * complete, one after another.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.concat.png\" class=\"diagram\">\n   *\n   * @param {!Iterable} sources\n   * the sources to concatenate\n   * @returns {Completable}\n   */\n  static concat(sources) {\n    return concat(sources);\n  }\n\n  /**\n   * Concatenates this Completable with another Completable.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.concatWith.png\" class=\"diagram\">\n   *\n   * This is an alias for andThen.\n   * @param {!Completable} other\n   * the other Completable, not null\n   * @returns {Completable}\n   */\n  concatWith(other) {\n    return andThen(this, other);\n  }\n\n  /**\n   * Provides an API (via a cold Completable) that bridges the\n   * reactive world with the callback-style world.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.create.png\" class=\"diagram\">\n   *\n   * @param {!function(e: Emitter)} subscriber\n   * the emitter that is called when a Observer subscribes\n   * to the returned Completable\n   * @returns {Completable}\n   */\n  static create(subscriber) {\n    return create(subscriber);\n  }\n\n  /**\n   * Defers the subscription to a Completable instance returned\n   * by a supplier.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.defer.png\" class=\"diagram\">\n   *\n   * @param {function():Completable} supplier\n   * the supplier that returns the Completable that will be subscribed to.\n   * @returns {Completable}\n   */\n  static defer(supplier) {\n    return defer(supplier);\n  }\n\n  /**\n   * Returns a Completable which delays the emission of the\n   * completion event by the given time.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.delay.png\" class=\"diagram\">\n   *\n   * @param {!number} amount\n   * the amount of time the success signal should be\n   * delayed for (in milliseconds).\n   * @param {?boolean} doDelayOnError\n   * if true, both success and error signals are delayed.\n   * if false, only success signals are delayed.\n   * @returns {Completable}\n   */\n  delay(amount, doDelayOnError) {\n    return delay(this, amount, doDelayOnError);\n  }\n\n  /**\n   * Delays the actual subscription to the current\n   * Completable until the given time delay elapsed.\n   *\n   * @param {!Number} amount\n   * the time amount to wait with the subscription\n   * (in milliseconds).\n   * @returns {Completable}\n   */\n  delaySubscription(amount) {\n    return delaySubscription(this, amount);\n  }\n\n  /**\n   * Returns a Completable instance that calls the given\n   * onTerminate callback after this Completable completes\n   * normally or with an exception.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doAfterTerminate.png\" class=\"diagram\">\n   *\n   * @param {!function} action\n   * the callback to call after this Completable terminates\n   * @returns {Completable}\n   */\n  doAfterTerminate(action) {\n    return doAfterTerminate(this, action);\n  }\n\n  /**\n   * Calls the specified action after this Completable\n   * signals onError or onComplete or gets aborted by\n   * the downstream.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doFinally.png\" class=\"diagram\">\n   *\n   * In case of a race between a terminal event and\n   * a dispose call, the provided onFinally action\n   * is executed once per subscription.\n   * @param {!function} action\n   * the action called when this Completable terminates or gets aborted.\n   * @returns {Completable}\n   */\n  doFinally(action) {\n    return doFinally(this, action);\n  }\n\n  /**\n   * Calls the shared Action if a Observer subscribed\n   * to the current Completable aborts the common\n   * Disposable it received via onSubscribe.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnDispose.png\" class=\"diagram\">\n   *\n   * @param {!function} action\n   * the action to call when the child subscriber aborts the subscription.\n   * @returns {Completable}\n   */\n  doOnAbort(action) {\n    return doOnAbort(this, action);\n  }\n\n  /**\n   * Returns a Completable which calls the given onComplete\n   * callback if this Completable completes.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnComplete.png\" class=\"diagram\">\n   *\n   * @param {!function} action\n   * the callback to call when this emits an onComplete event\n   * @returns {Completable}\n   */\n  doOnComplete(action) {\n    return doOnComplete(this, action);\n  }\n\n  /**\n   * Returns a Completable which calls the given onError\n   * callback if this Completable emits an error.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnError.png\" class=\"diagram\">\n   *\n   * @param {!function(x: Error)} consumer\n   * the error callback\n   * @returns {Completable}\n   */\n  doOnError(consumer) {\n    return doOnError(this, consumer);\n  }\n\n  /**\n   * Returns a Completable which calls the given onEvent callback\n   * with the Error for an onError or undefined for an onComplete\n   * signal from this Completable before delivering said signal\n   * to the downstream.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnEvent.png\" class=\"diagram\">\n   *\n   * @param {!function(x: Error)} consumer\n   * the event callback\n   * @returns {Completable}\n   */\n  doOnEvent(consumer) {\n    return doOnEvent(this, consumer);\n  }\n\n  /**\n   * Returns a Completable instance that calls the given onSubscribe\n   * callback with the AbortController that child subscribers receive\n   * on subscription.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnSubscribe.png\" class=\"diagram\">\n   *\n   * @param {!function(ac: AbortController)} consumer\n   * the callback called when a child subscriber subscribes\n   * @returns {Completable}\n   */\n  doOnSubscribe(consumer) {\n    return doOnSubscribe(this, consumer);\n  }\n\n  /**\n   * Returns a Completable instance that calls the given onTerminate\n   * callback just before this Completable completes normally or with\n   * an exception.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnTerminate.png\" class=\"diagram\">\n   *\n   * @param {!function} action\n   * the callback to call just before this Completable terminates\n   * @returns {Completable}\n   */\n  doOnTerminate(action) {\n    return doOnTerminate(this, action);\n  }\n\n  /**\n   * Creates a Completable with an error.\n   *\n   * Signals an error returned by the callback function\n   * for each individual Observer or returns a Completable\n   * that invokes a subscriber's onError method when\n   * the subscriber subscribes to it.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.error.png\" class=\"diagram\">\n   *\n   * @param {!(function():Error|Error)} err\n   * - the callable that is called for each individual\n   * Observer and returns or throws a value to be emitted.\n   * - the particular value to pass to onError\n   * @returns {Completable}\n   */\n  static error(err) {\n    return error(err);\n  }\n\n  /**\n   * Returns a Completable which when subscribed, executes\n   * the callable function, ignores its normal result and\n   * emits onError or onComplete only.\n   *\n   * If the result is a Promise-like instance, the\n   * Observer is then subscribed to the Promise through\n   * the fromPromise operator.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.fromCallable.png\" class=\"diagram\">\n   * If the callable throws an exception, the respective Error\n   * is delivered to the downstream via Observer.onError(Error),\n   * except when the downstream has aborted this Completable source.\n   *\n   * @param {!function} callable\n   * the callable instance to execute for each subscriber\n   * @returns {Completable}\n   */\n  static fromCallable(callable) {\n    return fromCallable(callable);\n  }\n\n  /**\n   * Converts a Promise-like instance into a Completable.\n   *\n   * @param {!(Promise|Thennable|PromiseLike)} promise\n   * The promise to be converted into a Completable.\n   * @returns {Completable}\n   */\n  static fromPromise(promise) {\n    return fromPromise(promise);\n  }\n\n  /**\n   * Provides a Promise-like interface for emitting signals.\n   *\n   * @param {!function(resolve: function, reject:function))} fulfillable\n   * A function that accepts two parameters: resolve and reject,\n   * similar to a Promise construct.\n   * @returns {Completable}\n   */\n  static fromResolvable(fulfillable) {\n    return fromResolvable(fulfillable);\n  }\n\n  /**\n   * This method requires advanced knowledge about building operators,\n   * please consider other standard composition methods first;\n   *\n   * Returns a Completable which, when subscribed to, invokes the operator\n   * method for each individual downstream Completable and allows the\n   * insertion of a custom operator by accessing the downstream's\n   * Observer during this subscription phase and providing a new Observer,\n   * containing the custom operator's intended business logic,\n   * that will be used in the subscription process going further upstream.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.lift.png\" class=\"diagram\">\n   *\n   * Generally, such a new Observer will wrap the downstream's Observer\n   * and forwards the onError and onComplete events from the upstream\n   * directly or according to the emission pattern the custom operator's\n   * business logic requires. In addition, such operator can intercept\n   * the flow control calls of abort and signal.abort that would have\n   * traveled upstream and perform additional actions depending on\n   * the same business logic requirements.\n   *\n   * Note that implementing custom operators via this lift()\n   * method adds slightly more overhead by requiring an additional\n   * allocation and indirection per assembled flows. Instead,\n   * using compose() method and  creating a transformer function\n   * with it is recommended.\n   *\n   * @param {!function(observer: Observer)} operator\n   * the callback called when a child subscriber subscribes\n   * @returns {Completable}\n   */\n  lift(operator) {\n    return lift(this, operator);\n  }\n\n  /**\n   * Returns a Completable instance that subscribes to all sources at once\n   * and completes only when all source Completables complete or one of them\n   * emits an error.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.merge.png\" class=\"diagram\">\n   *\n   * @param {Iterable} sources\n   * the iterable sequence of sources.\n   * @returns {Completable}\n   */\n  static merge(sources) {\n    return merge(sources);\n  }\n\n  /**\n   * Returns a Completable which subscribes to this and the other Completable\n   * and completes when both of them complete or one emits an error.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.mergeWith.png\" class=\"diagram\">\n   *\n   * @param {Completable} other\n   * the other Completable instance\n   * @returns {Completable}\n   */\n  mergeWith(other) {\n    return mergeWith(this, other);\n  }\n\n  /**\n   * Returns a Completable that never calls onError or onComplete.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.never.png\" class=\"diagram\">\n   *\n   * @returns {Completable}\n   * the singleton instance that never calls onError or onComplete\n   */\n  static never() {\n    return never();\n  }\n\n  /**\n   * Returns a Completable instance that if this Completable emits an\n   * error and the predicate returns true, it will emit an onComplete\n   * and swallow the throwable.\n   *\n   * If no predicate is provided, returns a Completable instance that\n   * if this Completable emits an error, it will emit an onComplete\n   * and swallow the error\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.onErrorComplete.png\" class=\"diagram\">\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.onErrorComplete.f.png\" class=\"diagram\">\n   *\n   * @param {?function(e: Error):boolean} completion\n   * the predicate to call when an Error is emitted which should return\n   * true if the Error should be swallowed and replaced with an onComplete.\n   * @returns {Completable}\n   */\n  onErrorComplete(completion) {\n    return onErrorComplete(this, completion);\n  }\n\n  /**\n   * Returns a Completable instance that when encounters an error from\n   * this Completable, calls the specified mapper function that returns\n   * another Completable instance for it and resumes the execution with it.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.onErrorResumeNext.png\" class=\"diagram\">\n   *\n   * @param {function(e:Error):Completable} other\n   * the mapper function that takes the error and should return a\n   * Completable as continuation.\n   * @returns {Completable}\n   */\n  onErrorResumeNext(other) {\n    return onErrorResumeNext(this, other);\n  }\n\n  /**\n   * Returns a Completable that subscribes repeatedly at most\n   * the given times to this Completable. If no amount is given,\n   * subscribes repeatedly until aborted.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.repeat.png\" class=\"diagram\">\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.repeat.n.png\" class=\"diagram\">\n   *\n   * @param {?number} times\n   * the number of times the resubscription should happen\n   * @returns {Completable}\n   */\n  repeat(times) {\n    return repeat(this, times);\n  }\n\n  /**\n   * Re-subscribe to the current Completable if the given predicate\n   * returns true when the Completable fails with an onError.\n   *\n   * If no predicate is provided, repeatedly re-subscribes to\n   * the current Completable indefinitely if it fails with an onError.\n   *\n   * @param {?function(retries: number, err: Error):boolean} predicate\n   * the predicate called with the resubscription count and the failure\n   * value and should return true if a resubscription should happen.\n   * @returns {Completable}\n   */\n  retry(predicate) {\n    return retry(this, predicate);\n  }\n\n  /**\n   * Returns a Completable that repeatedly subscribes to this Completable\n   * so long as the given stop supplier returns false.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.repeatUntil.png\" class=\"diagram\">\n   *\n   * @param {!function():boolean} stopper\n   * the supplier that should return true to stop resubscribing.\n   * @returns {Completable}\n   */\n  repeatUntil(stopper) {\n    return repeatUntil(this, stopper);\n  }\n\n  /**\n   * Returns a Completable which first runs the other Completable\n   * then this completable if the other completed normally.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.startWith.png\" class=\"diagram\">\n   *\n   * @param {Completable} other\n   *  the other completable to run first\n   * @returns {Completable}\n   */\n  startWith(other) {\n    return startWith(this, other);\n  }\n\n  /**\n   * Returns a Completable that emits the item emitted by\n   * the source Completable until a second Completable emits an\n   * item. Upon emission of an item from other,\n   * this will emit an error rather than go to\n   * Observer.onSuccess.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.takeuntil.c.png\" class=\"diagram\">\n   *\n   * @param {Completable} other\n   * the Completable whose emitted item will cause takeUntil\n   * to emit the item from the source Completable\n   * @returns {Completable}\n   * a Completable that emits the item emitted by the source\n   * Completable until such time as other emits its item\n   */\n  takeUntil(other) {\n    return takeUntil(this, other);\n  }\n\n  /**\n   * Signals a TimeoutException if the current Completable\n   * doesn't signal a completion within the specified\n   * timeout window.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.timeout.png\" class=\"diagram\">\n   *\n   * @param {!Number} amount\n   * amount of time in milliseconds.\n   * @returns {Completable}\n   */\n  timeout(amount) {\n    return timeout(this, amount);\n  }\n\n  /**\n   * Signals completion after the given delay for each Observer.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.timer.png\" class=\"diagram\">\n   *\n   * @param {!Number} amount\n   * the amount of time in milliseconds.\n   * @returns {Completable}\n   */\n  static timer(amount) {\n    return timer(amount);\n  }\n\n  /**\n   * @desc\n   * Subscribes with an Object that is an Observer.\n   *\n   * An Object is considered as an Observer if:\n   *  - if it has the method onSubscribe\n   *  - if it has the method onComplete (optional)\n   *  - if it has the method onError (optional)\n   *\n   * The onSubscribe method is called when subscribeWith\n   * or subscribe is executed. This method receives an\n   * AbortController instance.\n   *\n   * @param {!Object} observer\n   * @returns {undefined}\n   */\n  subscribeWith(observer) {\n    if (isObserver(observer)) {\n      this.subscribeActual(observer);\n    }\n  }\n\n  /**\n   * @desc\n   * Subscribes to a Completable instance with an onComplete\n   * and an onError method.\n   *\n   * onError receives a string(or an Error object).\n   *\n   * Both are called once.\n   * @param {?function(x: any)} onComplete\n   * the function you have designed to accept the emission\n   * from the Completable\n   * @param {?function(x: any)} onError\n   * the function you have designed to accept any error\n   * notification from the Completable\n   * @returns {AbortController}\n   * an AbortController reference can request the Completable to abort.\n   */\n  subscribe(onComplete, onError) {\n    const controller = new AbortController();\n    let once = false;\n    this.subscribeActual({\n      onSubscribe(ac) {\n        ac.signal.addEventListener('abort', () => {\n          if (!once) {\n            once = true;\n            if (!controller.signal.aborted) {\n              controller.abort();\n            }\n          }\n        });\n        controller.signal.addEventListener('abort', () => {\n          if (!once) {\n            once = true;\n            if (!ac.signal.aborted) {\n              ac.abort();\n            }\n          }\n        });\n      },\n      onComplete,\n      onError,\n    });\n    return controller;\n  }\n\n  /**\n   * Converts the Completable to a Promise instance.\n   *\n   * @returns {Promise}\n   */\n  toPromise() {\n    return new Promise((res, rej) => {\n      this.subscribe(res, rej);\n    });\n  }\n\n  /**\n   * Converts the Completable to a Promise instance\n   * and attaches callbacks to it.\n   *\n   * @param {!function():any} onFulfill\n   * @param {?function(x: Error):any} onReject\n   * @returns {Promise}\n   */\n  then(onFulfill, onReject) {\n    return this.toPromise().then(onFulfill, onReject);\n  }\n\n  /**\n   * Converts the Completable to a Promise instance\n   * and attaches an onRejection callback to it.\n   *\n   * @param {!function(x: Error):any} onReject\n   * @returns {Promise}\n   */\n  catch(onReject) {\n    return this.toPromise().catch(onReject);\n  }\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/completable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "Iterable",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols",
    "memberof": "src/completable.js",
    "static": true,
    "longname": "src/completable.js~Iterable",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "Thennable",
    "externalLink": "https://promisesaplus.com/",
    "memberof": "src/completable.js",
    "static": true,
    "longname": "src/completable.js~Thennable",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 51,
    "kind": "external",
    "name": "PromiseLike",
    "externalLink": "https://promisesaplus.com/",
    "memberof": "src/completable.js",
    "static": true,
    "longname": "src/completable.js~PromiseLike",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 52,
    "kind": "external",
    "name": "AbortController",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/AbortController",
    "memberof": "src/completable.js",
    "static": true,
    "longname": "src/completable.js~AbortController",
    "access": "public",
    "description": "",
    "lineNumber": 41
  },
  {
    "__docId__": 53,
    "kind": "class",
    "name": "Completable",
    "memberof": "src/completable.js",
    "static": true,
    "longname": "src/completable.js~Completable",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/completable.js",
    "importStyle": "Completable",
    "description": "The Completable class represents a deferred computation\nwithout any value but only indication for completion\nor exception.\n\nCompletable behaves similarly to Observable except that\nit can only emit either a completion or error signal\n(there is no onNext or onSuccess as with the other\nreactive types).\n\nThe Completable operates with the following sequential protocol:\n\nonSubscribe (onError | onComplete)?\n\nNote that as with the Observable protocol, onError and\nonComplete are mutually exclusive events.\n\nLike Observable, a running Completable can be stopped through\nthe AbortController instance provided to consumers through\nObserver.onSubscribe(AbortController).\n\nLike an Observable, a Completable is lazy, can be either\n\"hot\" or \"cold\", synchronous or asynchronous.\nCompletable instances returned by the methods of this class are\ncold.\n\nThe documentation for this class makes use of marble diagrams.\nThe following legend explains these diagrams:\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.png\" class=\"diagram\">",
    "lineNumber": 87,
    "interface": false
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "amb",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.amb",
    "access": "public",
    "description": "Returns a Completable which terminates as soon as\none of the source Completables terminates\n(normally or with an error) and disposes all\nother Completables.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.amb.png\" class=\"diagram\">",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "the array of source Completables.\nA subscription to each source will occur in the\nsame order as in this Iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "ambWith",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#ambWith",
    "access": "public",
    "description": "Returns a Completable that emits the a terminated\nevent of either this Completable or the other\nCompletable whichever fires first.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.ambWith.png\" class=\"diagram\">",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Completable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other Completable, not null. A subscription to\nthis provided source will occur after subscribing\nto the current source."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "andThen",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#andThen",
    "access": "public",
    "description": "Returns a Completable that first runs this Completable\nand then the other completable.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.andThen.c.png\" class=\"diagram\">",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Completable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other Completable, not null"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "cache",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#cache",
    "access": "public",
    "description": "Subscribes to this Completable only once, when the first\nObserver subscribes to the result Completable, caches its\nterminal event and relays/replays it to observers.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.cache.png\" class=\"diagram\">",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "complete",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.complete",
    "access": "public",
    "description": "Returns a Completable instance that completes immediately\nwhen subscribed to.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.complete.png\" class=\"diagram\">",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "compose",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#compose",
    "access": "public",
    "description": "Calls the given transformer function with this instance an\nreturns the function's resulting Completable.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.compose.png\" class=\"diagram\">",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(completable: Completable):Completable"
        ],
        "spread": false,
        "optional": false,
        "name": "transformer",
        "description": "the transformer function, not null"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "concat",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.concat",
    "access": "public",
    "description": "Returns a Completable which completes only when all sources\ncomplete, one after another.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.concat.png\" class=\"diagram\">",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "the sources to concatenate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "concatWith",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#concatWith",
    "access": "public",
    "description": "Concatenates this Completable with another Completable.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.concatWith.png\" class=\"diagram\">\n\nThis is an alias for andThen.",
    "lineNumber": 200,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Completable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other Completable, not null"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "create",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.create",
    "access": "public",
    "description": "Provides an API (via a cold Completable) that bridges the\nreactive world with the callback-style world.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.create.png\" class=\"diagram\">",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(e: Emitter)"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriber",
        "description": "the emitter that is called when a Observer subscribes\nto the returned Completable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "defer",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.defer",
    "access": "public",
    "description": "Defers the subscription to a Completable instance returned\nby a supplier.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.defer.png\" class=\"diagram\">",
    "lineNumber": 229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function():Completable"
        ],
        "spread": false,
        "optional": false,
        "name": "supplier",
        "description": "the supplier that returns the Completable that will be subscribed to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "delay",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#delay",
    "access": "public",
    "description": "Returns a Completable which delays the emission of the\ncompletion event by the given time.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.delay.png\" class=\"diagram\">",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "the amount of time the success signal should be\ndelayed for (in milliseconds)."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "doDelayOnError",
        "description": "if true, both success and error signals are delayed.\nif false, only success signals are delayed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "delaySubscription",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#delaySubscription",
    "access": "public",
    "description": "Delays the actual subscription to the current\nCompletable until the given time delay elapsed.",
    "lineNumber": 260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "the time amount to wait with the subscription\n(in milliseconds)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "doAfterTerminate",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#doAfterTerminate",
    "access": "public",
    "description": "Returns a Completable instance that calls the given\nonTerminate callback after this Completable completes\nnormally or with an exception.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doAfterTerminate.png\" class=\"diagram\">",
    "lineNumber": 275,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "the callback to call after this Completable terminates"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "doFinally",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#doFinally",
    "access": "public",
    "description": "Calls the specified action after this Completable\nsignals onError or onComplete or gets aborted by\nthe downstream.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doFinally.png\" class=\"diagram\">\n\nIn case of a race between a terminal event and\na dispose call, the provided onFinally action\nis executed once per subscription.",
    "lineNumber": 293,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "the action called when this Completable terminates or gets aborted."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "doOnAbort",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#doOnAbort",
    "access": "public",
    "description": "Calls the shared Action if a Observer subscribed\nto the current Completable aborts the common\nDisposable it received via onSubscribe.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnDispose.png\" class=\"diagram\">",
    "lineNumber": 308,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "the action to call when the child subscriber aborts the subscription."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "doOnComplete",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#doOnComplete",
    "access": "public",
    "description": "Returns a Completable which calls the given onComplete\ncallback if this Completable completes.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnComplete.png\" class=\"diagram\">",
    "lineNumber": 322,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "the callback to call when this emits an onComplete event"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "doOnError",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#doOnError",
    "access": "public",
    "description": "Returns a Completable which calls the given onError\ncallback if this Completable emits an error.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnError.png\" class=\"diagram\">",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: Error)"
        ],
        "spread": false,
        "optional": false,
        "name": "consumer",
        "description": "the error callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "doOnEvent",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#doOnEvent",
    "access": "public",
    "description": "Returns a Completable which calls the given onEvent callback\nwith the Error for an onError or undefined for an onComplete\nsignal from this Completable before delivering said signal\nto the downstream.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnEvent.png\" class=\"diagram\">",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: Error)"
        ],
        "spread": false,
        "optional": false,
        "name": "consumer",
        "description": "the event callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "doOnSubscribe",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#doOnSubscribe",
    "access": "public",
    "description": "Returns a Completable instance that calls the given onSubscribe\ncallback with the AbortController that child subscribers receive\non subscription.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnSubscribe.png\" class=\"diagram\">",
    "lineNumber": 367,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(ac: AbortController)"
        ],
        "spread": false,
        "optional": false,
        "name": "consumer",
        "description": "the callback called when a child subscriber subscribes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "doOnTerminate",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#doOnTerminate",
    "access": "public",
    "description": "Returns a Completable instance that calls the given onTerminate\ncallback just before this Completable completes normally or with\nan exception.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.doOnTerminate.png\" class=\"diagram\">",
    "lineNumber": 382,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "the callback to call just before this Completable terminates"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "error",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.error",
    "access": "public",
    "description": "Creates a Completable with an error.\n\nSignals an error returned by the callback function\nfor each individual Observer or returns a Completable\nthat invokes a subscriber's onError method when\nthe subscriber subscribes to it.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.error.png\" class=\"diagram\">",
    "lineNumber": 402,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():Error",
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "the callable that is called for each individual\nObserver and returns or throws a value to be emitted.\n- the particular value to pass to onError"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "fromCallable",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.fromCallable",
    "access": "public",
    "description": "Returns a Completable which when subscribed, executes\nthe callable function, ignores its normal result and\nemits onError or onComplete only.\n\nIf the result is a Promise-like instance, the\nObserver is then subscribed to the Promise through\nthe fromPromise operator.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.fromCallable.png\" class=\"diagram\">\nIf the callable throws an exception, the respective Error\nis delivered to the downstream via Observer.onError(Error),\nexcept when the downstream has aborted this Completable source.",
    "lineNumber": 424,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "the callable instance to execute for each subscriber"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "fromPromise",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.fromPromise",
    "access": "public",
    "description": "Converts a Promise-like instance into a Completable.",
    "lineNumber": 435,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Promise",
          "Thennable",
          "PromiseLike"
        ],
        "spread": false,
        "optional": false,
        "name": "promise",
        "description": "The promise to be converted into a Completable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "fromResolvable",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.fromResolvable",
    "access": "public",
    "description": "Provides a Promise-like interface for emitting signals.",
    "lineNumber": 447,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(resolve: function, reject:function))"
        ],
        "spread": false,
        "optional": false,
        "name": "fulfillable",
        "description": "A function that accepts two parameters: resolve and reject,\nsimilar to a Promise construct."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "lift",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#lift",
    "access": "public",
    "description": "This method requires advanced knowledge about building operators,\nplease consider other standard composition methods first;\n\nReturns a Completable which, when subscribed to, invokes the operator\nmethod for each individual downstream Completable and allows the\ninsertion of a custom operator by accessing the downstream's\nObserver during this subscription phase and providing a new Observer,\ncontaining the custom operator's intended business logic,\nthat will be used in the subscription process going further upstream.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.lift.png\" class=\"diagram\">\n\nGenerally, such a new Observer will wrap the downstream's Observer\nand forwards the onError and onComplete events from the upstream\ndirectly or according to the emission pattern the custom operator's\nbusiness logic requires. In addition, such operator can intercept\nthe flow control calls of abort and signal.abort that would have\ntraveled upstream and perform additional actions depending on\nthe same business logic requirements.\n\nNote that implementing custom operators via this lift()\nmethod adds slightly more overhead by requiring an additional\nallocation and indirection per assembled flows. Instead,\nusing compose() method and  creating a transformer function\nwith it is recommended.",
    "lineNumber": 482,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(observer: Observer)"
        ],
        "spread": false,
        "optional": false,
        "name": "operator",
        "description": "the callback called when a child subscriber subscribes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "merge",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.merge",
    "access": "public",
    "description": "Returns a Completable instance that subscribes to all sources at once\nand completes only when all source Completables complete or one of them\nemits an error.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.merge.png\" class=\"diagram\">",
    "lineNumber": 497,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "the iterable sequence of sources."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "mergeWith",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#mergeWith",
    "access": "public",
    "description": "Returns a Completable which subscribes to this and the other Completable\nand completes when both of them complete or one emits an error.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.mergeWith.png\" class=\"diagram\">",
    "lineNumber": 511,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Completable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other Completable instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "never",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.never",
    "access": "public",
    "description": "Returns a Completable that never calls onError or onComplete.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.never.png\" class=\"diagram\">",
    "lineNumber": 523,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}\nthe singleton instance that never calls onError or onComplete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": "the singleton instance that never calls onError or onComplete"
    },
    "params": []
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "onErrorComplete",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#onErrorComplete",
    "access": "public",
    "description": "Returns a Completable instance that if this Completable emits an\nerror and the predicate returns true, it will emit an onComplete\nand swallow the throwable.\n\nIf no predicate is provided, returns a Completable instance that\nif this Completable emits an error, it will emit an onComplete\nand swallow the error\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.onErrorComplete.png\" class=\"diagram\">\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.onErrorComplete.f.png\" class=\"diagram\">",
    "lineNumber": 544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "function(e: Error):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "completion",
        "description": "the predicate to call when an Error is emitted which should return\ntrue if the Error should be swallowed and replaced with an onComplete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "onErrorResumeNext",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#onErrorResumeNext",
    "access": "public",
    "description": "Returns a Completable instance that when encounters an error from\nthis Completable, calls the specified mapper function that returns\nanother Completable instance for it and resumes the execution with it.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.onErrorResumeNext.png\" class=\"diagram\">",
    "lineNumber": 560,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(e:Error):Completable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the mapper function that takes the error and should return a\nCompletable as continuation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "repeat",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#repeat",
    "access": "public",
    "description": "Returns a Completable that subscribes repeatedly at most\nthe given times to this Completable. If no amount is given,\nsubscribes repeatedly until aborted.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.repeat.png\" class=\"diagram\">\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.repeat.n.png\" class=\"diagram\">",
    "lineNumber": 576,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "times",
        "description": "the number of times the resubscription should happen"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "retry",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#retry",
    "access": "public",
    "description": "Re-subscribe to the current Completable if the given predicate\nreturns true when the Completable fails with an onError.\n\nIf no predicate is provided, repeatedly re-subscribes to\nthe current Completable indefinitely if it fails with an onError.",
    "lineNumber": 592,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "function(retries: number, err: Error):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "the predicate called with the resubscription count and the failure\nvalue and should return true if a resubscription should happen."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "repeatUntil",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#repeatUntil",
    "access": "public",
    "description": "Returns a Completable that repeatedly subscribes to this Completable\nso long as the given stop supplier returns false.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.repeatUntil.png\" class=\"diagram\">",
    "lineNumber": 606,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "stopper",
        "description": "the supplier that should return true to stop resubscribing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "startWith",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#startWith",
    "access": "public",
    "description": "Returns a Completable which first runs the other Completable\nthen this completable if the other completed normally.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.startWith.png\" class=\"diagram\">",
    "lineNumber": 620,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Completable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other completable to run first"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "takeUntil",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#takeUntil",
    "access": "public",
    "description": "Returns a Completable that emits the item emitted by\nthe source Completable until a second Completable emits an\nitem. Upon emission of an item from other,\nthis will emit an error rather than go to\nObserver.onSuccess.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.takeuntil.c.png\" class=\"diagram\">",
    "lineNumber": 640,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}\na Completable that emits the item emitted by the source\nCompletable until such time as other emits its item"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Completable"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the Completable whose emitted item will cause takeUntil\nto emit the item from the source Completable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": "a Completable that emits the item emitted by the source\nCompletable until such time as other emits its item"
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "timeout",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#timeout",
    "access": "public",
    "description": "Signals a TimeoutException if the current Completable\ndoesn't signal a completion within the specified\ntimeout window.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.timeout.png\" class=\"diagram\">",
    "lineNumber": 655,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "amount of time in milliseconds."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "timer",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/completable.js~Completable.timer",
    "access": "public",
    "description": "Signals completion after the given delay for each Observer.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-completable/master/assets/images/Completable.timer.png\" class=\"diagram\">",
    "lineNumber": 668,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Completable}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "the amount of time in milliseconds."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Completable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "subscribeWith",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#subscribeWith",
    "access": "public",
    "description": "Subscribes with an Object that is an Observer.\n\nAn Object is considered as an Observer if:\n - if it has the method onSubscribe\n - if it has the method onComplete (optional)\n - if it has the method onError (optional)\n\nThe onSubscribe method is called when subscribeWith\nor subscribe is executed. This method receives an\nAbortController instance.",
    "lineNumber": 688,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#subscribe",
    "access": "public",
    "description": "Subscribes to a Completable instance with an onComplete\nand an onError method.\n\nonError receives a string(or an Error object).\n\nBoth are called once.",
    "lineNumber": 711,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AbortController}\nan AbortController reference can request the Completable to abort."
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "function(x: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "the function you have designed to accept the emission\nfrom the Completable"
      },
      {
        "nullable": true,
        "types": [
          "function(x: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "the function you have designed to accept any error\nnotification from the Completable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbortController"
      ],
      "spread": false,
      "description": "an AbortController reference can request the Completable to abort."
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "toPromise",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#toPromise",
    "access": "public",
    "description": "Converts the Completable to a Promise instance.",
    "lineNumber": 744,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "then",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#then",
    "access": "public",
    "description": "Converts the Completable to a Promise instance\nand attaches callbacks to it.",
    "lineNumber": 758,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():any"
        ],
        "spread": false,
        "optional": false,
        "name": "onFulfill",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "function(x: Error):any"
        ],
        "spread": false,
        "optional": false,
        "name": "onReject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "catch",
    "memberof": "src/completable.js~Completable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/completable.js~Completable#catch",
    "access": "public",
    "description": "Converts the Completable to a Promise instance\nand attaches an onRejection callback to it.",
    "lineNumber": 769,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: Error):any"
        ],
        "spread": false,
        "optional": false,
        "name": "onReject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/emitter.js",
    "content": "/**\n * @interface\n * Represents an object that receives notification to\n * an Observer.\n *\n * Emitter is an abstraction layer of the Observer\n */\n// eslint-disable-next-line no-unused-vars\nexport default class Emitter extends AbortController {\n  /**\n   * Emits a completion signal.\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onComplete() {}\n\n  /**\n   * Emits an error value.\n   * @param {!Error} err\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onError(err) {}\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/emitter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "class",
    "name": "Emitter",
    "memberof": "src/emitter.js",
    "static": true,
    "longname": "src/emitter.js~Emitter",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/emitter.js",
    "importStyle": "Emitter",
    "description": "",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "AbortController"
    ]
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "onComplete",
    "memberof": "src/emitter.js~Emitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~Emitter#onComplete",
    "access": "public",
    "description": "Emits a completion signal.",
    "lineNumber": 15,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "onError",
    "memberof": "src/emitter.js~Emitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~Emitter#onError",
    "access": "public",
    "description": "Emits an error value.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": false,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/index.js",
    "content": "/* eslint-disable no-unused-vars */\nimport Completable from './completable';\nimport Emitter from './emitter';\nimport Observer from './observer';\n\nexport default Completable;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/internal/operators/amb.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { isIterable, cleanObserver } from '../utils';\nimport error from './error';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const { sources } = this;\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const completable of sources) {\n    if (signal.aborted) {\n      return;\n    }\n\n    if (completable instanceof Completable) {\n      completable.subscribeWith({\n        onSubscribe(ac) {\n          signal.addEventListener('abort', () => ac.abort());\n        },\n        // eslint-disable-next-line no-loop-func\n        onComplete() {\n          onComplete();\n          controller.abort();\n        },\n        onError(x) {\n          onError(x);\n          controller.abort();\n        },\n      });\n    } else {\n      onError(new Error('Completable.amb: One of the sources is a non-Completable.'));\n      controller.abort();\n      break;\n    }\n  }\n}\n/**\n * @ignore\n */\nexport default (sources) => {\n  if (!isIterable(sources)) {\n    return error(new Error('Completable.amb: sources is not Iterable.'));\n  }\n  const completable = new Completable();\n  completable.sources = sources;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/amb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/amb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/amb.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/amb.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "amb",
    "memberof": "src/internal/operators/amb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/amb.js~amb",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/amb.js",
    "importStyle": "amb",
    "description": "",
    "lineNumber": 55,
    "ignore": true,
    "params": [
      {
        "name": "sources",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "src/internal/operators/ambWith.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const sharedComplete = () => {\n    if (!signal.aborted) {\n      onComplete();\n      controller.abort();\n    }\n  };\n  const sharedError = (x) => {\n    if (!signal.aborted) {\n      onError(x);\n      controller.abort();\n    }\n  };\n\n  const { source, other } = this;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      signal.addEventListener('abort', () => ac.abort());\n    },\n    onComplete: sharedComplete,\n    onError: sharedError,\n  });\n  other.subscribeWith({\n    onSubscribe(ac) {\n      if (signal.aborted) {\n        ac.abort();\n      } else {\n        signal.addEventListener('abort', () => ac.abort());\n      }\n    },\n    onComplete: sharedComplete,\n    onError: sharedError,\n  });\n}\n/**\n * @ignore\n */\nexport default (source, other) => {\n  if (!(other instanceof Completable)) {\n    return source;\n  }\n  const completable = new Completable();\n  completable.source = source;\n  completable.other = other;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/ambWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/ambWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/ambWith.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/ambWith.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "ambWith",
    "memberof": "src/internal/operators/ambWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/ambWith.js~ambWith",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/ambWith.js",
    "importStyle": "ambWith",
    "description": "",
    "lineNumber": 58,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/internal/operators/andThen.js",
    "content": "import AbortController from 'abort-controller';\nimport { cleanObserver } from '../utils';\nimport Completable from '../../completable';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const { source, other } = this;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      signal.addEventListener('abort', () => ac.abort());\n    },\n    onComplete() {\n      other.subscribeWith({\n        onSubscribe(ac) {\n          signal.addEventListener('abort', () => ac.abort());\n        },\n        onComplete() {\n          onComplete();\n          controller.abort();\n        },\n        onError(x) {\n          onError(x);\n          controller.abort();\n        },\n      });\n    },\n    onError(x) {\n      onError(x);\n      controller.abort();\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, other) => {\n  if (!(other instanceof Completable)) {\n    return source;\n  }\n  const completable = new Completable();\n  completable.source = source;\n  completable.other = other;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/andThen.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/andThen.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/andThen.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/andThen.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "andThen",
    "memberof": "src/internal/operators/andThen.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/andThen.js~andThen",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/andThen.js",
    "importStyle": "andThen",
    "description": "",
    "lineNumber": 52,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/internal/operators/cache.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const {\n    source, cached, observers, subscribed,\n  } = this;\n\n  if (!cached) {\n    const index = observers.length;\n    observers[index] = observer;\n\n    const controller = new AbortController();\n\n    controller.signal.addEventListener('abort', () => {\n      observers.splice(index, 1);\n    });\n\n    onSubscribe(controller);\n\n    if (!subscribed) {\n      source.subscribeWith({\n        onSubscribe() {\n          // not applicable\n        },\n        onComplete: () => {\n          this.cached = true;\n\n          // eslint-disable-next-line no-restricted-syntax\n          for (const obs of observers) {\n            obs.onComplete();\n          }\n          this.observers = undefined;\n        },\n        onError: (x) => {\n          this.cached = true;\n          this.error = x;\n\n          // eslint-disable-next-line no-restricted-syntax\n          for (const obs of observers) {\n            obs.onError(x);\n          }\n          this.observers = undefined;\n        },\n      });\n      this.subscribed = true;\n    }\n  } else {\n    const controller = new AbortController();\n    onSubscribe(controller);\n\n    const { error } = this;\n    if (error != null) {\n      onError(error);\n    } else {\n      onComplete();\n    }\n    controller.abort();\n  }\n}\n\n/**\n * @ignore\n */\nexport default (source) => {\n  const completable = new Completable();\n  completable.source = source;\n  completable.cached = false;\n  completable.subscribed = false;\n  completable.observers = [];\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/cache.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/cache.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/cache.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "cache",
    "memberof": "src/internal/operators/cache.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/cache.js~cache",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/cache.js",
    "importStyle": "cache",
    "description": "",
    "lineNumber": 71,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/internal/operators/complete.js",
    "content": "import Completable from '../../completable';\nimport { immediateComplete } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  immediateComplete(observer);\n}\n\nlet INSTANCE;\n/**\n * @ignore\n */\nexport default () => {\n  if (typeof INSTANCE === 'undefined') {\n    INSTANCE = new Completable();\n    INSTANCE.subscribeActual = subscribeActual.bind(INSTANCE);\n  }\n  return INSTANCE;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/complete.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/complete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/complete.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/complete.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "complete",
    "memberof": "src/internal/operators/complete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/complete.js~complete",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/complete.js",
    "importStyle": "complete",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/internal/operators/compose.js",
    "content": "import Completable from '../../completable';\nimport error from './error';\n\n/**\n * @ignore\n */\nexport default (source, transformer) => {\n  if (typeof transformer !== 'function') {\n    return source;\n  }\n\n  let result;\n\n  try {\n    result = transformer(source);\n\n    if (!(result instanceof Completable)) {\n      throw new Error('Completable.compose: transformer returned a non-Completable.');\n    }\n  } catch (e) {\n    result = error(e);\n  }\n\n  return result;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/compose.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "compose",
    "memberof": "src/internal/operators/compose.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/compose.js~compose",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/compose.js",
    "importStyle": "compose",
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "transformer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/internal/operators/concat.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { isIterable, cleanObserver } from '../utils';\nimport error from './error';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const { sources } = this;\n\n  const buffer = [];\n  // eslint-disable-next-line no-restricted-syntax\n  for (const completable of sources) {\n    if (signal.aborted) {\n      return;\n    }\n    if (completable instanceof Completable) {\n      buffer.unshift(completable);\n    } else {\n      onError(new Error('Completable.amb: One of the sources is a non-Completable.'));\n      controller.abort();\n      break;\n    }\n  }\n\n  if (signal.aborted) {\n    return;\n  }\n\n  let current;\n  for (const completable of buffer) {\n    if (typeof current === 'undefined') {\n      current = () => {\n        completable.subscribeWith({\n          onSubscribe(ac) {\n            signal.addEventListener('abort', () => ac.abort());\n          },\n          onComplete() {\n            onComplete();\n            controller.abort();\n          },\n          onError(x) {\n            onError(x);\n            controller.abort();\n          },\n        });\n      };\n    } else {\n      const prev = current;\n      current = () => {\n        completable.subscribeWith({\n          onSubscribe(ac) {\n            signal.addEventListener('abort', () => ac.abort());\n          },\n          onComplete() {\n            prev();\n          },\n          onError(x) {\n            onError(x);\n            controller.abort();\n          },\n        });\n      };\n    }\n  }\n\n  current();\n}\n/**\n * @ignore\n */\nexport default (sources) => {\n  if (!isIterable(sources)) {\n    return error(new Error('Completable.concat: sources is not Iterable.'));\n  }\n  const completable = new Completable();\n  completable.sources = sources;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/concat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/concat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/concat.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/concat.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "concat",
    "memberof": "src/internal/operators/concat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/concat.js~concat",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/concat.js",
    "importStyle": "concat",
    "description": "",
    "lineNumber": 86,
    "ignore": true,
    "params": [
      {
        "name": "sources",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "src/internal/operators/create.js",
    "content": "import AbortController from 'abort-controller';\nimport {\n  onErrorHandler, onCompleteHandler, cleanObserver,\n} from '../utils';\nimport Completable from '../../completable';\nimport error from './error';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const emitter = new AbortController();\n  emitter.onComplete = onCompleteHandler.bind(this);\n  emitter.onError = onErrorHandler.bind(this);\n\n  this.controller = emitter;\n  this.onComplete = onComplete;\n  this.onError = onError;\n\n  onSubscribe(emitter);\n\n  try {\n    this.subscriber(emitter);\n  } catch (ex) {\n    emitter.onError(ex);\n  }\n}\n/**\n * @ignore\n */\nexport default (subscriber) => {\n  if (typeof subscriber !== 'function') {\n    return error(new Error('Completable.create: There are no subscribers.'));\n  }\n  const single = new Completable();\n  single.subscriber = subscriber;\n  single.subscribeActual = subscribeActual.bind(single);\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/create.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/create.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/create.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "create",
    "memberof": "src/internal/operators/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/create.js~create",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/create.js",
    "importStyle": "create",
    "description": "",
    "lineNumber": 33,
    "ignore": true,
    "params": [
      {
        "name": "subscriber",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/internal/operators/defer.js",
    "content": "import Completable from '../../completable';\nimport { immediateError, cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  let result;\n\n  let err;\n  try {\n    result = this.supplier();\n    if (!(result instanceof Completable)) {\n      throw new Error('Completable.defer: supplier returned a non-Completable.');\n    }\n  } catch (e) {\n    err = e;\n  }\n\n  if (err != null) {\n    immediateError(observer, err);\n  } else {\n    result.subscribeWith({\n      onSubscribe,\n      onComplete,\n      onError,\n    });\n  }\n}\n/**\n * @ignore\n */\nexport default (supplier) => {\n  const completable = new Completable();\n  completable.supplier = supplier;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/defer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/defer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/defer.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/defer.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "defer",
    "memberof": "src/internal/operators/defer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/defer.js~defer",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/defer.js",
    "importStyle": "defer",
    "description": "",
    "lineNumber": 35,
    "ignore": true,
    "params": [
      {
        "name": "supplier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/internal/operators/delay.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { amount, doDelayError } = this;\n\n  let timeout;\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  signal.addEventListener('abort', () => {\n    if (typeof timeout !== 'undefined') {\n      clearTimeout(timeout);\n    }\n  });\n\n  this.source.subscribeWith({\n    onSubscribe(ac) {\n      signal.addEventListener('abort', () => {\n        ac.abort();\n      });\n    },\n    onComplete() {\n      timeout = setTimeout(() => {\n        onComplete();\n        controller.abort();\n      }, amount);\n    },\n    onError(x) {\n      timeout = setTimeout(() => {\n        onError(x);\n        controller.abort();\n      }, doDelayError ? amount : 0);\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, amount, doDelayError) => {\n  if (typeof amount !== 'number') {\n    return source;\n  }\n  const completable = new Completable();\n  completable.source = source;\n  completable.amount = amount;\n  completable.doDelayError = doDelayError;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/delay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/delay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delay.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/delay.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "delay",
    "memberof": "src/internal/operators/delay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delay.js~delay",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/delay.js",
    "importStyle": "delay",
    "description": "",
    "lineNumber": 54,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "types": [
          "*"
        ]
      },
      {
        "name": "doDelayError",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/internal/operators/delaySubscription.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { amount } = this;\n\n  let timeout;\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  signal.addEventListener('abort', () => {\n    if (typeof timeout !== 'undefined') {\n      clearTimeout(timeout);\n    }\n  });\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  timeout = setTimeout(() => {\n    this.source.subscribeWith({\n      onSubscribe(ac) {\n        signal.addEventListener('abort', () => ac.abort());\n      },\n      onComplete() {\n        onComplete();\n        controller.abort();\n      },\n      onError(x) {\n        onError(x);\n        controller.abort();\n      },\n    });\n  }, amount);\n}\n/**\n * @ignore\n */\nexport default (source, amount) => {\n  if (typeof amount !== 'number') {\n    return source;\n  }\n  const completable = new Completable();\n  completable.source = source;\n  completable.amount = amount;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/delaySubscription.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/delaySubscription.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delaySubscription.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/delaySubscription.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "delaySubscription",
    "memberof": "src/internal/operators/delaySubscription.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delaySubscription.js~delaySubscription",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/delaySubscription.js",
    "importStyle": "delaySubscription",
    "description": "",
    "lineNumber": 50,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/internal/operators/doAfterTerminate.js",
    "content": "import Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete() {\n      onComplete();\n      callable();\n    },\n    onError(x) {\n      onError(x);\n      callable();\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (typeof callable !== 'function') {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.callable = callable;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/doAfterTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doAfterTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doAfterTerminate.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/doAfterTerminate.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "doAfterTerminate",
    "memberof": "src/internal/operators/doAfterTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doAfterTerminate.js~doAfterTerminate",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/doAfterTerminate.js",
    "importStyle": "doAfterTerminate",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/internal/operators/doFinally.js",
    "content": "import Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  let called = false;\n  source.subscribeWith({\n    onSubscribe(ac) {\n      ac.signal.addEventListener('abort', () => {\n        if (!called) {\n          callable();\n          called = true;\n        }\n      });\n      onSubscribe(ac);\n    },\n    onComplete() {\n      onComplete();\n      if (!called) {\n        callable();\n        called = true;\n      }\n    },\n    onError(x) {\n      onError(x);\n      if (!called) {\n        callable();\n        called = true;\n      }\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (typeof callable !== 'function') {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.callable = callable;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/doFinally.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doFinally.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doFinally.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/doFinally.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "doFinally",
    "memberof": "src/internal/operators/doFinally.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doFinally.js~doFinally",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/doFinally.js",
    "importStyle": "doFinally",
    "description": "",
    "lineNumber": 43,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/internal/operators/doOnAbort.js",
    "content": "import Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      ac.signal.addEventListener('abort', callable);\n      onSubscribe(ac);\n    },\n    onComplete,\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (typeof callable !== 'function') {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.callable = callable;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/doOnAbort.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnAbort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnAbort.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/doOnAbort.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "doOnAbort",
    "memberof": "src/internal/operators/doOnAbort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnAbort.js~doOnAbort",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/doOnAbort.js",
    "importStyle": "doOnAbort",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/internal/operators/doOnComplete.js",
    "content": "import Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete() {\n      callable();\n      onComplete();\n    },\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (typeof callable !== 'function') {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.callable = callable;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/doOnComplete.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnComplete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnComplete.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/doOnComplete.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "doOnComplete",
    "memberof": "src/internal/operators/doOnComplete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnComplete.js~doOnComplete",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/doOnComplete.js",
    "importStyle": "doOnComplete",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/internal/operators/doOnError.js",
    "content": "import Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete,\n    onError(x) {\n      callable(x);\n      onError(x);\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (typeof callable !== 'function') {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.callable = callable;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/doOnError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnError.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/doOnError.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "doOnError",
    "memberof": "src/internal/operators/doOnError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnError.js~doOnError",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/doOnError.js",
    "importStyle": "doOnError",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/internal/operators/doOnEvent.js",
    "content": "import Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete() {\n      callable();\n      onComplete();\n    },\n    onError(x) {\n      callable(undefined, x);\n      onError(x);\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (typeof callable !== 'function') {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.callable = callable;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/doOnEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnEvent.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnEvent.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/doOnEvent.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "doOnEvent",
    "memberof": "src/internal/operators/doOnEvent.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnEvent.js~doOnEvent",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/doOnEvent.js",
    "importStyle": "doOnEvent",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/internal/operators/doOnSubscribe.js",
    "content": "import Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe(d) {\n      callable(d);\n      onSubscribe(d);\n    },\n    onComplete,\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (typeof callable !== 'function') {\n    return source;\n  }\n  const completable = new Completable();\n  completable.source = source;\n  completable.callable = callable;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/doOnSubscribe.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnSubscribe.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnSubscribe.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/doOnSubscribe.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "doOnSubscribe",
    "memberof": "src/internal/operators/doOnSubscribe.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnSubscribe.js~doOnSubscribe",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/doOnSubscribe.js",
    "importStyle": "doOnSubscribe",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/internal/operators/doOnTerminate.js",
    "content": "import Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete(x) {\n      callable();\n      onComplete(x);\n    },\n    onError(x) {\n      callable();\n      onError(x);\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (typeof callable !== 'function') {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.callable = callable;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/doOnTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnTerminate.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/doOnTerminate.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "doOnTerminate",
    "memberof": "src/internal/operators/doOnTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnTerminate.js~doOnTerminate",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/doOnTerminate.js",
    "importStyle": "doOnTerminate",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/internal/operators/error.js",
    "content": "import { toCallable, immediateError } from '../utils';\nimport Completable from '../../completable';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  let err;\n\n  try {\n    err = this.supplier();\n\n    if (err == null) {\n      throw new Error('Completable.error: Error supplier returned a null value.');\n    }\n  } catch (e) {\n    err = e;\n  }\n  immediateError(observer, err);\n}\n/**\n * @ignore\n */\nexport default (value) => {\n  let report = value;\n  if (!(value instanceof Error)) {\n    report = new Error('Completable.error received a non-Error value.');\n  }\n\n  if (typeof value !== 'function') {\n    report = toCallable(report);\n  }\n  const completable = new Completable();\n  completable.supplier = report;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/error.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/error.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "error",
    "memberof": "src/internal/operators/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/error.js~error",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/error.js",
    "importStyle": "error",
    "description": "",
    "lineNumber": 24,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/internal/operators/fromCallable.js",
    "content": "import AbortController from 'abort-controller';\nimport {\n  onErrorHandler, onCompleteHandler, isPromise, cleanObserver,\n} from '../utils';\nimport Completable from '../../completable';\nimport error from './error';\nimport fromPromise from './fromPromise';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  onSubscribe(controller);\n\n  if (controller.signal.aborted) {\n    return;\n  }\n\n  this.controller = controller;\n  this.onComplete = onComplete;\n  this.onError = onError;\n\n  const resolve = onCompleteHandler.bind(this);\n  const reject = onErrorHandler.bind(this);\n\n  let result;\n  try {\n    result = this.callable();\n  } catch (e) {\n    reject(e);\n    return;\n  }\n\n  if (isPromise(result)) {\n    fromPromise(result).subscribe(onComplete, onError);\n  } else {\n    resolve(result);\n  }\n}\n/**\n * @ignore\n */\nexport default (callable) => {\n  if (typeof callable !== 'function') {\n    return error(new Error('Completable.fromCallable: callable received is not a function.'));\n  }\n  const completable = new Completable();\n  completable.callable = callable;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/fromCallable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/fromCallable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromCallable.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/fromCallable.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "fromCallable",
    "memberof": "src/internal/operators/fromCallable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromCallable.js~fromCallable",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/fromCallable.js",
    "importStyle": "fromCallable",
    "description": "",
    "lineNumber": 47,
    "ignore": true,
    "params": [
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/internal/operators/fromPromise.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport {\n  isPromise, onCompleteHandler, onErrorHandler, cleanObserver,\n} from '../utils';\nimport error from './error';\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n  const controller = new AbortController();\n\n  onSubscribe(controller);\n\n  if (controller.signal.aborted) {\n    return;\n  }\n\n  this.controller = controller;\n  this.onComplete = onComplete;\n  this.onError = onError;\n\n  this.promise.then(\n    onCompleteHandler.bind(this),\n    onErrorHandler.bind(this),\n  );\n}\n/**\n * @ignore\n */\nexport default (promise) => {\n  if (!isPromise(promise)) {\n    return error(new Error('Completable.fromPromise: expects a Promise-like value.'));\n  }\n  const completable = new Completable();\n  completable.promise = promise;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/fromPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/fromPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromPromise.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/fromPromise.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "fromPromise",
    "memberof": "src/internal/operators/fromPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromPromise.js~fromPromise",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/fromPromise.js",
    "importStyle": "fromPromise",
    "description": "",
    "lineNumber": 32,
    "ignore": true,
    "params": [
      {
        "name": "promise",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/internal/operators/fromResolvable.js",
    "content": "import AbortController from 'abort-controller';\nimport { onErrorHandler, onCompleteHandler, cleanObserver } from '../utils';\nimport Completable from '../../completable';\nimport error from './error';\n\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  onSubscribe(controller);\n\n  if (controller.signal.aborted) {\n    return;\n  }\n\n  this.controller = controller;\n  this.onComplete = onComplete;\n  this.onError = onError;\n\n  const resolve = onCompleteHandler.bind(this);\n  const reject = onErrorHandler.bind(this);\n\n  this.subscriber(resolve, reject);\n}\n/**\n * @ignore\n */\nexport default (subscriber) => {\n  if (typeof subscriber !== 'function') {\n    return error(new Error('Completable.fromResolvable: expects a function.'));\n  }\n  const completable = new Completable();\n  completable.subscriber = subscriber;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/fromResolvable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/fromResolvable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromResolvable.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/fromResolvable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "fromResolvable",
    "memberof": "src/internal/operators/fromResolvable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromResolvable.js~fromResolvable",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/fromResolvable.js",
    "importStyle": "fromResolvable",
    "description": "",
    "lineNumber": 29,
    "ignore": true,
    "params": [
      {
        "name": "subscriber",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "src/internal/operators/lift.js",
    "content": "import Completable from '../../completable';\nimport { isObserver, immediateError } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  let result;\n\n  try {\n    result = this.operator(observer);\n\n    if (!isObserver(result)) {\n      throw new Error('Completable.lift: operator returned a non-Observer.');\n    }\n  } catch (e) {\n    immediateError(observer, e);\n    return;\n  }\n\n  this.source.subscribeWith(result);\n}\n\n/**\n * @ignore\n */\nexport default (source, operator) => {\n  if (typeof operator !== 'function') {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.operator = operator;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/lift.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/lift.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/lift.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/lift.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "lift",
    "memberof": "src/internal/operators/lift.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/lift.js~lift",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/lift.js",
    "importStyle": "lift",
    "description": "",
    "lineNumber": 27,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "operator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/internal/operators/merge.js",
    "content": "/* eslint-disable no-loop-func */\n/* eslint-disable no-restricted-syntax */\nimport AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { isIterable, cleanObserver } from '../utils';\nimport error from './error';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const { sources } = this;\n\n  const buffer = [];\n  // eslint-disable-next-line no-restricted-syntax\n  for (const completable of sources) {\n    if (signal.aborted) {\n      return;\n    }\n    if (completable instanceof Completable) {\n      buffer.unshift(completable);\n    } else {\n      onError(new Error('Completable.amb: One of the sources is a non-Completable.'));\n      controller.abort();\n      break;\n    }\n  }\n\n  if (signal.aborted) {\n    return;\n  }\n\n  let pending = buffer.length;\n  let current;\n  for (const completable of buffer) {\n    completable.subscribeWith({\n      onSubscribe(ac) {\n        signal.addEventListener('abort', () => ac.abort());\n      },\n      onComplete() {\n        pending -= 1;\n\n        if (pending === 0) {\n          onComplete();\n          controller.abort();\n        }\n      },\n      onError(x) {\n        onError(x);\n        controller.abort();\n      },\n    });\n  }\n\n  current();\n}\n/**\n * @ignore\n */\nexport default (sources) => {\n  if (!isIterable(sources)) {\n    return error(new Error('Completable.concat: sources is not Iterable.'));\n  }\n  const completable = new Completable();\n  completable.sources = sources;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/merge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/merge.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/merge.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/merge.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "merge",
    "memberof": "src/internal/operators/merge.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/merge.js~merge",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/merge.js",
    "importStyle": "merge",
    "description": "",
    "lineNumber": 72,
    "ignore": true,
    "params": [
      {
        "name": "sources",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/internal/operators/mergeWith.js",
    "content": "import AbortController from 'abort-controller';\nimport { cleanObserver } from '../utils';\nimport Completable from '../../completable';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const { source, other } = this;\n\n  let flagA = false;\n  let flagB = false;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      signal.addEventListener('abort', () => ac.abort());\n    },\n    onComplete() {\n      flagA = true;\n\n      if (flagB) {\n        onComplete();\n        controller.abort();\n      }\n    },\n    onError(x) {\n      onError(x);\n      controller.abort();\n    },\n  });\n\n  other.subscribeWith({\n    onSubscribe(ac) {\n      if (signal.aborted) {\n        ac.abort();\n      } else {\n        signal.addEventListener('abort', () => ac.abort());\n      }\n    },\n    onComplete() {\n      flagB = true;\n\n      if (flagA) {\n        onComplete();\n        controller.abort();\n      }\n    },\n    onError(x) {\n      onError(x);\n      controller.abort();\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, other) => {\n  if (!(other instanceof Completable)) {\n    return source;\n  }\n  const completable = new Completable();\n  completable.source = source;\n  completable.other = other;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/mergeWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/mergeWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/mergeWith.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/mergeWith.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "mergeWith",
    "memberof": "src/internal/operators/mergeWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/mergeWith.js~mergeWith",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/mergeWith.js",
    "importStyle": "mergeWith",
    "description": "",
    "lineNumber": 70,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/internal/operators/never.js",
    "content": "/* eslint-disable class-methods-use-this */\nimport Completable from '../../completable';\n\nconst SIGNAL = {\n  aborted: false,\n  addEventListener: () => {},\n  removeEventListener: () => {},\n  onabort: () => {},\n};\n\n\nconst CONTROLLER = {\n  signal: SIGNAL,\n  abort: () => {},\n};\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  observer.onSubscribe(CONTROLLER);\n}\n/**\n * @ignore\n */\nlet INSTANCE;\n/**\n * @ignore\n */\nexport default () => {\n  if (typeof INSTANCE === 'undefined') {\n    INSTANCE = new Completable();\n    INSTANCE.subscribeActual = subscribeActual.bind(INSTANCE);\n  }\n  return INSTANCE;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/never.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "SIGNAL",
    "memberof": "src/internal/operators/never.js",
    "static": true,
    "longname": "src/internal/operators/never.js~SIGNAL",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/never.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"aborted\": *, \"addEventListener\": *, \"removeEventListener\": *, \"onabort\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "CONTROLLER",
    "memberof": "src/internal/operators/never.js",
    "static": true,
    "longname": "src/internal/operators/never.js~CONTROLLER",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/never.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{\"signal\": *, \"abort\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/never.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/never.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/never.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 20,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "never",
    "memberof": "src/internal/operators/never.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/never.js~never",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/never.js",
    "importStyle": "never",
    "description": "",
    "lineNumber": 30,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/internal/operators/onErrorComplete.js",
    "content": "import Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, item } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete,\n    onError(x) {\n      let result;\n      try {\n        result = item(x);\n      } catch (e) {\n        onError([x, e]);\n        return;\n      }\n      if (result) {\n        onComplete();\n      } else {\n        onError(x);\n      }\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, item) => {\n  if (typeof item !== 'function') {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.item = item;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/onErrorComplete.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/onErrorComplete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorComplete.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/onErrorComplete.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "onErrorComplete",
    "memberof": "src/internal/operators/onErrorComplete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorComplete.js~onErrorComplete",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/onErrorComplete.js",
    "importStyle": "onErrorComplete",
    "description": "",
    "lineNumber": 31,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/internal/operators/onErrorResumeNext.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, resumeIfError } = this;\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      signal.addEventListener('abort', () => ac.abort());\n    },\n    onComplete() {\n      onComplete();\n      controller.abort();\n    },\n    onError(x) {\n      let result;\n\n      if (typeof resumeIfError === 'function') {\n        try {\n          result = resumeIfError(x);\n          if (!(result instanceof Completable)) {\n            throw new Error('Completable.onErrorResumeNext: returned an non-Completable.');\n          }\n        } catch (e) {\n          onError(new Error([x, e]));\n          return;\n        }\n      } else {\n        result = resumeIfError;\n      }\n\n      result.subscribeWith({\n        onSubscribe(ac) {\n          signal.addEventListener('abort', () => ac.abort());\n        },\n        onComplete() {\n          onComplete();\n          controller.abort();\n        },\n        onError(v) {\n          onError(v);\n          controller.abort();\n        },\n      });\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, resumeIfError) => {\n  if (!(typeof resumeIfError === 'function' || resumeIfError instanceof Completable)) {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.resumeIfError = resumeIfError;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/onErrorResumeNext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/onErrorResumeNext.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorResumeNext.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/onErrorResumeNext.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "onErrorResumeNext",
    "memberof": "src/internal/operators/onErrorResumeNext.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorResumeNext.js~onErrorResumeNext",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/onErrorResumeNext.js",
    "importStyle": "onErrorResumeNext",
    "description": "",
    "lineNumber": 64,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "resumeIfError",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/internal/operators/repeat.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSubscribe, onComplete, onError } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const { source, times } = this;\n\n  let retries = 0;\n\n  const sub = () => {\n    if (signal.aborted) {\n      return;\n    }\n    retries += 1;\n\n    source.subscribeWith({\n      onSubscribe(ac) {\n        signal.addEventListener('abort', () => ac.abort());\n      },\n      onComplete() {\n        if (typeof times === 'number') {\n          if (retries <= times) {\n            sub();\n          } else {\n            onComplete();\n          }\n        } else {\n          sub();\n        }\n      },\n      onError(x) {\n        onError(x);\n        controller.abort();\n      },\n    });\n  };\n\n  sub();\n}\n\n/**\n * @ignore\n */\nexport default (source, times) => {\n  if (times != null) {\n    if (typeof times !== 'number') {\n      return source;\n    }\n    if (times <= 0) {\n      return source;\n    }\n  }\n  const completable = new Completable();\n  completable.source = source;\n  completable.times = times;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/repeat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/repeat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/repeat.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/repeat.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "repeat",
    "memberof": "src/internal/operators/repeat.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/repeat.js~repeat",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/repeat.js",
    "importStyle": "repeat",
    "description": "",
    "lineNumber": 59,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "times",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "file",
    "name": "src/internal/operators/repeatUntil.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSubscribe, onComplete, onError } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const { source, predicate } = this;\n\n  const sub = () => {\n    if (signal.aborted) {\n      return;\n    }\n\n    source.subscribeWith({\n      onSubscribe(ac) {\n        signal.addEventListener('abort', () => ac.abort());\n      },\n      onComplete() {\n        if (typeof predicate === 'function') {\n          const result = predicate();\n\n          if (result) {\n            onComplete();\n          } else {\n            sub();\n          }\n        } else {\n          sub();\n        }\n      },\n      onError(x) {\n        onError(x);\n        controller.abort();\n      },\n    });\n  };\n\n  sub();\n}\n\n/**\n * @ignore\n */\nexport default (source, predicate) => {\n  const completable = new Completable();\n  completable.source = source;\n  completable.predicate = predicate;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/repeatUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/repeatUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/repeatUntil.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/repeatUntil.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "repeatUntil",
    "memberof": "src/internal/operators/repeatUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/repeatUntil.js~repeatUntil",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/repeatUntil.js",
    "importStyle": "repeatUntil",
    "description": "",
    "lineNumber": 58,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/internal/operators/retry.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSubscribe, onComplete, onError } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const { source, bipredicate } = this;\n\n  let retries = 0;\n\n  const sub = () => {\n    if (signal.aborted) {\n      return;\n    }\n    retries += 1;\n\n    source.subscribeWith({\n      onSubscribe(ac) {\n        signal.addEventListener('abort', () => ac.abort());\n      },\n      onComplete() {\n        onComplete();\n        controller.abort();\n      },\n      onError(x) {\n        if (typeof bipredicate === 'function') {\n          const result = bipredicate(retries, x);\n\n          if (result) {\n            sub();\n          } else {\n            onError(x);\n            controller.abort();\n          }\n        } else {\n          sub();\n        }\n      },\n    });\n  };\n\n  sub();\n}\n\n/**\n * @ignore\n */\nexport default (source, bipredicate) => {\n  const completable = new Completable();\n  completable.source = source;\n  completable.bipredicate = bipredicate;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/retry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/retry.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/retry.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "retry",
    "memberof": "src/internal/operators/retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/retry.js~retry",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/retry.js",
    "importStyle": "retry",
    "description": "",
    "lineNumber": 62,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "bipredicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "src/internal/operators/startWith.js",
    "content": "import AbortController from 'abort-controller';\nimport { cleanObserver } from '../utils';\nimport Completable from '../../completable';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const { source, other } = this;\n\n  other.subscribeWith({\n    onSubscribe(ac) {\n      signal.addEventListener('abort', () => ac.abort());\n    },\n    onComplete() {\n      source.subscribeWith({\n        onSubscribe(ac) {\n          signal.addEventListener('abort', () => ac.abort());\n        },\n        onComplete() {\n          onComplete();\n          controller.abort();\n        },\n        onError(x) {\n          onError(x);\n          controller.abort();\n        },\n      });\n    },\n    onError(x) {\n      onError(x);\n      controller.abort();\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, other) => {\n  if (!(other instanceof Completable)) {\n    return source;\n  }\n  const completable = new Completable();\n  completable.source = source;\n  completable.other = other;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/startWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/startWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/startWith.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/startWith.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "startWith",
    "memberof": "src/internal/operators/startWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/startWith.js~startWith",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/startWith.js",
    "importStyle": "startWith",
    "description": "",
    "lineNumber": 52,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "src/internal/operators/takeUntil.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSubscribe, onComplete, onError } = cleanObserver(observer);\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const { source, other } = this;\n\n  other.subscribeWith({\n    onSubscribe(ac) {\n      signal.addEventListener('abort', () => ac.abort());\n    },\n    onComplete() {\n      onError(new Error('Completable.takeUntil: Source cancelled by other Completable.'));\n      controller.abort();\n    },\n    onError(x) {\n      onError(new Error(['Completable.takeUntil: Source cancelled by other Completable.', x]));\n      controller.abort();\n    },\n  });\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      if (signal.aborted) {\n        ac.abort();\n      } else {\n        signal.addEventListener('abort', () => ac.abort());\n      }\n    },\n    onComplete() {\n      onComplete();\n      controller.abort();\n    },\n    onError(x) {\n      onError(x);\n      controller.abort();\n    },\n  });\n}\n\n/**\n * @ignore\n */\nconst takeUntil = (source, other) => {\n  if (!(other instanceof Completable)) {\n    return source;\n  }\n\n  const completable = new Completable();\n  completable.source = source;\n  completable.other = other;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n\nexport default takeUntil;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/takeUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/takeUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/takeUntil.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/takeUntil.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "takeUntil",
    "memberof": "src/internal/operators/takeUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/takeUntil.js~takeUntil",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/takeUntil.js",
    "importStyle": "takeUntil",
    "description": "",
    "lineNumber": 59,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/internal/operators/timeout.js",
    "content": "\nimport AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onError, onSubscribe } = cleanObserver(observer);\n\n  const { amount } = this;\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const timeout = setTimeout(\n    () => {\n      onError(new Error('Completable.timeout: TimeoutException (no complete signals within the specified timeout).'));\n      controller.abort();\n    },\n    amount,\n  );\n\n  signal.addEventListener('abort', () => {\n    clearTimeout(timeout);\n  });\n\n  this.source.subscribeWith({\n    onSubscribe(ac) {\n      signal.addEventListener('abort', () => ac.abort());\n    },\n    onComplete() {\n      onComplete();\n      controller.abort();\n    },\n    onError(x) {\n      onError(x);\n      controller.abort();\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, amount) => {\n  if (typeof amount !== 'number') {\n    return source;\n  }\n  const completable = new Completable();\n  completable.source = source;\n  completable.amount = amount;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/timeout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/timeout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timeout.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/timeout.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "timeout",
    "memberof": "src/internal/operators/timeout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timeout.js~timeout",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/timeout.js",
    "importStyle": "timeout",
    "description": "",
    "lineNumber": 53,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/internal/operators/timer.js",
    "content": "import AbortController from 'abort-controller';\nimport Completable from '../../completable';\nimport { cleanObserver } from '../utils';\nimport error from './error';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onComplete, onSubscribe } = cleanObserver(observer);\n\n\n  const controller = new AbortController();\n\n  const { signal } = controller;\n\n  onSubscribe(controller);\n\n  if (signal.aborted) {\n    return;\n  }\n\n  const timeout = setTimeout(onComplete, this.amount);\n\n  signal.addEventListener('abort', () => {\n    clearTimeout(timeout);\n  });\n}\n/**\n * @ignore\n */\nexport default (amount) => {\n  if (typeof amount !== 'number') {\n    return error(new Error('Completable.timer: \"amount\" is not a number.'));\n  }\n  const completable = new Completable();\n  completable.amount = amount;\n  completable.subscribeActual = subscribeActual.bind(completable);\n  return completable;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators/timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/timer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timer.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/operators/timer.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "timer",
    "memberof": "src/internal/operators/timer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timer.js~timer",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/operators/timer.js",
    "importStyle": "timer",
    "description": "",
    "lineNumber": 32,
    "ignore": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "src/internal/operators.js",
    "content": "/* eslint-disable import/no-cycle */\nexport { default as amb } from './operators/amb';\nexport { default as ambWith } from './operators/ambWith';\nexport { default as andThen } from './operators/andThen';\nexport { default as cache } from './operators/cache';\nexport { default as complete } from './operators/complete';\nexport { default as compose } from './operators/compose';\nexport { default as concat } from './operators/concat';\nexport { default as create } from './operators/create';\nexport { default as defer } from './operators/defer';\nexport { default as delay } from './operators/delay';\nexport { default as delaySubscription } from './operators/delaySubscription';\nexport { default as doAfterTerminate } from './operators/doAfterTerminate';\nexport { default as doFinally } from './operators/doFinally';\nexport { default as doOnAbort } from './operators/doOnAbort';\nexport { default as doOnComplete } from './operators/doOnComplete';\nexport { default as doOnError } from './operators/doOnError';\nexport { default as doOnEvent } from './operators/doOnEvent';\nexport { default as doOnSubscribe } from './operators/doOnSubscribe';\nexport { default as doOnTerminate } from './operators/doOnTerminate';\nexport { default as error } from './operators/error';\nexport { default as fromCallable } from './operators/fromCallable';\nexport { default as fromPromise } from './operators/fromPromise';\nexport { default as fromResolvable } from './operators/fromResolvable';\nexport { default as lift } from './operators/lift';\nexport { default as merge } from './operators/merge';\nexport { default as mergeWith } from './operators/mergeWith';\nexport { default as never } from './operators/never';\nexport { default as onErrorComplete } from './operators/onErrorComplete';\nexport { default as onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { default as repeat } from './operators/repeat';\nexport { default as repeatUntil } from './operators/repeatUntil';\nexport { default as retry } from './operators/retry';\nexport { default as startWith } from './operators/startWith';\nexport { default as takeUntil } from './operators/takeUntil';\nexport { default as timeout } from './operators/timeout';\nexport { default as timer } from './operators/timer';\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/operators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "src/internal/utils.js",
    "content": "import AbortController from 'abort-controller';\n/**\n * @ignore\n */\nexport const isIterable = obj => typeof obj === 'object' && typeof obj[Symbol.iterator] === 'function';\n/**\n * @ignore\n */\nexport const isObserver = obj => typeof obj === 'object' && typeof obj.onSubscribe === 'function';\n/**\n * @ignore\n */\nexport const toCallable = x => () => x;\n/**\n * @ignore\n */\nexport const isPromise = obj => (obj instanceof Promise) || (!!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function');\n/**\n * @ignore\n */\nexport function onCompleteHandler() {\n  const { onComplete, controller } = this;\n  if (controller.signal.aborted) {\n    return;\n  }\n  try {\n    onComplete();\n  } finally {\n    controller.abort();\n  }\n}\n/**\n * @ignore\n */\nexport function onErrorHandler(err) {\n  const { onError, controller } = this;\n  let report = err;\n  if (!(err instanceof Error)) {\n    report = new Error('onError called with a non-Error value.');\n  }\n  if (controller.signal.aborted) {\n    return;\n  }\n\n  try {\n    onError(report);\n  } finally {\n    controller.abort();\n  }\n}\n/**\n * @ignore\n */\nconst identity = x => x;\n/**\n * @ignore\n */\nconst throwError = (x) => { throw x; };\n/**\n * @ignore\n */\nexport const cleanObserver = x => ({\n  onSubscribe: x.onSubscribe,\n  onComplete: typeof x.onComplete === 'function' ? x.onComplete : identity,\n  onError: typeof x.onError === 'function' ? x.onError : throwError,\n});\n/**\n * @ignore\n */\nexport const immediateComplete = (o) => {\n  // const disposable = new SimpleDisposable();\n  const { onSubscribe, onComplete } = cleanObserver(o);\n  const controller = new AbortController();\n  onSubscribe(controller);\n\n  if (!controller.signal.aborted) {\n    onComplete();\n    controller.abort();\n  }\n};\n/**\n * @ignore\n */\nexport const immediateError = (o, x) => {\n  const { onSubscribe, onError } = cleanObserver(o);\n  const controller = new AbortController();\n  onSubscribe(controller);\n\n  if (!controller.signal.aborted) {\n    onError(x);\n    controller.abort();\n  }\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/internal/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "isIterable",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isIterable",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": "{isIterable}",
    "description": "",
    "lineNumber": 5,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "isObserver",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isObserver",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": "{isObserver}",
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "toCallable",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~toCallable",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": "{toCallable}",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "isPromise",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isPromise",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": "{isPromise}",
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "onCompleteHandler",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~onCompleteHandler",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": "{onCompleteHandler}",
    "description": "",
    "lineNumber": 21,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "onErrorHandler",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~onErrorHandler",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": "{onErrorHandler}",
    "description": "",
    "lineNumber": 35,
    "ignore": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "identity",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~identity",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 54,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "throwError",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~throwError",
    "access": "public",
    "export": false,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 58,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "cleanObserver",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~cleanObserver",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": "{cleanObserver}",
    "description": "",
    "lineNumber": 62,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "immediateComplete",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~immediateComplete",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": "{immediateComplete}",
    "description": "",
    "lineNumber": 70,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "immediateError",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~immediateError",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/internal/utils.js",
    "importStyle": "{immediateError}",
    "description": "",
    "lineNumber": 84,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "src/observer.js",
    "content": "/**\n * @interface\n * Represents an object that receives notification from\n * an Emitter.\n */\n// eslint-disable-next-line no-unused-vars\nexport default class Observer {\n  /**\n   * Receives the AbortController subscription.\n   * @param {!AbortController} d\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onSubscribe(d) {}\n\n  /**\n   * Receives a completion signal.\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onComplete() {}\n\n  /**\n   * Receives an error value.\n   * @param {!Error} err\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onError(err) {}\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/src/observer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "class",
    "name": "Observer",
    "memberof": "src/observer.js",
    "static": true,
    "longname": "src/observer.js~Observer",
    "access": "public",
    "export": true,
    "importPath": "rx-completable/src/observer.js",
    "importStyle": "Observer",
    "description": "",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "onSubscribe",
    "memberof": "src/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/observer.js~Observer#onSubscribe",
    "access": "public",
    "description": "Receives the AbortController subscription.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": false,
        "types": [
          "AbortController"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "onComplete",
    "memberof": "src/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/observer.js~Observer#onComplete",
    "access": "public",
    "description": "Receives a completion signal.",
    "lineNumber": 21,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "onError",
    "memberof": "src/observer.js~Observer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/observer.js~Observer#onError",
    "access": "public",
    "description": "Receives an error value.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": false,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "kind": "index",
    "content": "# rx-completable\n\nReactive Extensions - represents a deferred computation without any value but only indication for completion or exception. \n\n[![NPM](https://nodei.co/npm/rx-completable.png)](https://nodei.co/npm/rx-completable/)\n\n[![](https://data.jsdelivr.com/v1/package/npm/rx-completable/badge)](https://www.jsdelivr.com/package/npm/rx-completable)\n[![HitCount](http://hits.dwyl.io/lxsmnsyc/rx-completable.svg)](http://hits.dwyl.io/lxsmnsyc/rx-completable)\n\n| Platform | Build Status |\n| --- | --- |\n| Linux | [![Build Status](https://travis-ci.org/LXSMNSYC/rx-completable.svg?branch=master)](https://travis-ci.org/LXSMNSYC/rx-completable) |\n| Windows | [![Build status](https://ci.appveyor.com/api/projects/status/mkjwe462uk80axx4?svg=true)](https://ci.appveyor.com/project/LXSMNSYC/rx-completable) |\n\n\n[![codecov](https://codecov.io/gh/LXSMNSYC/rx-completable/branch/master/graph/badge.svg)](https://codecov.io/gh/LXSMNSYC/rx-completable)\n[![Known Vulnerabilities](https://snyk.io/test/github/LXSMNSYC/rx-completable/badge.svg?targetFile=package.json)](https://snyk.io/test/github/LXSMNSYC/rx-completable?targetFile=package.json)\n\n## Install\n\nNPM\n\n```bash\nnpm i rx-completable\n```\n\nCDN\n\n* jsDelivr\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/rx-completable/dist/index.min.js\"></script>\n```\n\n* unpkg\n```html\n<script src=\"https://unpkg.com/rx-completable/dist/index.min.js\"></script>\n```\n\n## Usage\n\n### Loading the module\n\n#### CommonJS\n\n```js\nconst Completable = require('rx-completable');\n```\n\nLoading the CommonJS module provides the Completable class.\n\n#### Browser\n\nLoading the JavaScript file for the rx-completable provides the Completable class\n\n## Documentation\n\nYou can read the documentation at the [official doc site](https://lxsmnsyc.github.io/rx-completable/)\n\n## Build\n\nClone the repo first, then run the following to install the dependencies\n\n```bash\nnpm install\n```\n\nTo build the coverages, run the test suite, the docs, and the distributable modules:\n\n```bash\nnpm run build\n```",
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"rx-completable\",\n  \"version\": \"0.2.1\",\n  \"description\": \"Reactive Extensions - represents a deferred computation without any value but only indication for completion or exception. \",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"linux-mocha\": \"./node_modules/.bin/mocha --require @babel/register -R spec --recursive\",\n    \"linux-test\": \"./node_modules/.bin/nyc --reporter=html npm run linux-mocha\",\n    \"linux-docs\": \"./node_modules/.bin/esdoc\",\n    \"linux-cjs\": \"./node_modules/.bin/rollup src/index.js --format cjs --name \\\"Completable\\\" --file index.js\",\n    \"linux-browser\": \"./node_modules/.bin/rollup src/index.js --format iife --name \\\"Completable\\\" --file dist/index.js\",\n    \"linux-minify\": \"npm run linux-browser && ./node_modules/.bin/terser dist/index.js --compress --mangle --output dist/index.min.js\",\n    \"linux-build\": \"npm run linux-cjs && npm run linux-minify && npm run linux-docs && npm run linux-test\",\n    \"win-mocha\": \"node node_modules/mocha/bin/mocha --require @babel/register -R spec --recursive\",\n    \"win-test\": \"node node_modules/nyc/bin/nyc.js --reporter=html npm run win-mocha\",\n    \"win-docs\": \"node node_modules/esdoc/out/src/ESDocCLI.js\",\n    \"win-cjs\": \"node node_modules/.bin/rollup src/index.js --format cjs --name \\\"Completable\\\" --file index.js\",\n    \"win-browser\": \"node node_modules/.bin/rollup src/index.js --format iife --name \\\"Completable\\\" --file dist/index.js\",\n    \"win-minify\": \"npm run win-browser && node node_modules/.bin/terser dist/index.js --compress --mangle --output dist/index.min.js\",\n    \"win-build\": \"npm run win-cjs && npm run win-minify && npm run win-docs && npm run win-test\",\n    \"mocha\": \"npm run linux-mocha || npm run win-mocha\",\n    \"test\": \"npm run linux-test || npm run win-test\",\n    \"docs\": \"npm run linux-docs || npm run win-docs\",\n    \"cjs\": \"npm run linux-cjs || npm run win-cjs\",\n    \"browser\": \"npm run linux-browser || npm run win-browser\",\n    \"minify\": \"npm run linux-minify || npm run win-minify\",\n    \"build\": \"npm run cjs && npm run minify && npm run docs && npm test\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/LXSMNSYC/rx-completable.git\"\n  },\n  \"keywords\": [\n    \"reactivex\",\n    \"reactive\",\n    \"rx\",\n    \"completable\",\n    \"rxjs\"\n  ],\n  \"author\": \"LXSMNSYC (alexis.munsayac@gmail.com)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/LXSMNSYC/rx-completable/issues\"\n  },\n  \"homepage\": \"https://github.com/LXSMNSYC/rx-completable#readme\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.4.0\",\n    \"@babel/preset-env\": \"^7.4.2\",\n    \"@babel/register\": \"^7.4.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"esdoc-integrate-test-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.15.3\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-plugin-import\": \"^2.16.0\",\n    \"mocha\": \"^6.0.2\",\n    \"nyc\": \"^13.3.0\",\n    \"rollup\": \"^1.7.4\",\n    \"terser\": \"^3.17.0\"\n  },\n  \"dependencies\": {\n    \"abort-controller\": \"^2.0.3\"\n  }\n}\n",
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 228,
    "kind": "testFile",
    "name": "test/amb.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#amb', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.amb([Completable.complete(), Completable.complete()]);\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should signal complete from the earliest source.', (done) => {\n    const completable = Completable.amb([Completable.complete(), Completable.timer(100)]);\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the earliest source.', (done) => {\n    const completable = Completable.amb([Completable.error(new Error('Hello')), Completable.timer(100)]);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if one of the source is non-Completable.', (done) => {\n    const completable = Completable.amb(['Hello', Completable.timer(100)]);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if given argument is not Iterable', (done) => {\n    const completable = Completable.amb();\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/amb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/amb.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/amb.js~describe0",
    "access": "public",
    "description": "#amb",
    "lineNumber": 8
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it1",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it2",
    "access": "public",
    "description": "should signal complete from the earliest source.",
    "lineNumber": 19
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it3",
    "access": "public",
    "description": "should signal error from the earliest source.",
    "lineNumber": 29
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it4",
    "access": "public",
    "description": "should signal error if one of the source is non-Completable.",
    "lineNumber": 39
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it5",
    "access": "public",
    "description": "should signal error if given argument is not Iterable",
    "lineNumber": 49
  },
  {
    "__docId__": 235,
    "kind": "testFile",
    "name": "test/ambWith.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#ambWith', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().ambWith(Completable.complete());\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the other value is non-Completable', () => {\n    const source = Completable.complete();\n    const completable = source.ambWith();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should signal complete from the source (if earlier)', (done) => {\n    const completable = Completable.complete().ambWith(Completable.timer(100));\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete from the other (if earlier).', (done) => {\n    const completable = Completable.timer(100).ambWith(Completable.complete());\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the source (if earlier).', (done) => {\n    const completable = Completable.error(new Error('Hello')).ambWith(Completable.timer(100));\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the other (if earlier).', (done) => {\n    const completable = Completable.timer(100).ambWith(Completable.error(new Error('Hello')));\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/ambWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "test/ambWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/ambWith.js~describe6",
    "access": "public",
    "description": "#ambWith",
    "lineNumber": 8
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/ambWith.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe6.it7",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/ambWith.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe6.it8",
    "access": "public",
    "description": "should return the same instance if the other value is non-Completable",
    "lineNumber": 19
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/ambWith.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe6.it9",
    "access": "public",
    "description": "should signal complete from the source (if earlier)",
    "lineNumber": 27
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/ambWith.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe6.it10",
    "access": "public",
    "description": "should signal complete from the other (if earlier).",
    "lineNumber": 37
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/ambWith.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe6.it11",
    "access": "public",
    "description": "should signal error from the source (if earlier).",
    "lineNumber": 47
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/ambWith.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe6.it12",
    "access": "public",
    "description": "should signal error from the other (if earlier).",
    "lineNumber": 57
  },
  {
    "__docId__": 243,
    "kind": "testFile",
    "name": "test/andThen.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#andThen', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().andThen(Completable.complete());\n\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the given completable is a non-Completable', () => {\n    const source = Completable.complete();\n    const completable = source.andThen();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should start with the source Completable.', (done) => {\n    let started = '';\n    const prefix = Completable.complete().doOnComplete(() => { started += 'B'; });\n    const source = Completable.complete().doOnComplete(() => { started += 'A'; }).andThen(prefix);\n\n    source.subscribe(\n      () => (started === 'AB' ? done() : done(false)),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the other Completable if the other throws an error', (done) => {\n    let started;\n    const prefix = Completable.error(new Error('Hello')).doOnError(() => { started = true; });\n    const source = Completable.complete().andThen(prefix);\n\n    source.subscribe(\n      () => done(false),\n      () => (started ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the source Completable if the source throws an error', (done) => {\n    let started;\n    const prefix = Completable.complete();\n    const source = Completable.error(new Error('Hello')).doOnError(() => { started = true; }).andThen(prefix);\n\n    source.subscribe(\n      () => done(false),\n      () => (started ? done() : done(false)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/andThen.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/andThen.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/andThen.js~describe13",
    "access": "public",
    "description": "#andThen",
    "lineNumber": 8
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/andThen.js~describe13",
    "testDepth": 1,
    "static": true,
    "longname": "test/andThen.js~describe13.it14",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/andThen.js~describe13",
    "testDepth": 1,
    "static": true,
    "longname": "test/andThen.js~describe13.it15",
    "access": "public",
    "description": "should return the same instance if the given completable is a non-Completable",
    "lineNumber": 20
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/andThen.js~describe13",
    "testDepth": 1,
    "static": true,
    "longname": "test/andThen.js~describe13.it16",
    "access": "public",
    "description": "should start with the source Completable.",
    "lineNumber": 28
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/andThen.js~describe13",
    "testDepth": 1,
    "static": true,
    "longname": "test/andThen.js~describe13.it17",
    "access": "public",
    "description": "should error with the other Completable if the other throws an error",
    "lineNumber": 41
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/andThen.js~describe13",
    "testDepth": 1,
    "static": true,
    "longname": "test/andThen.js~describe13.it18",
    "access": "public",
    "description": "should error with the source Completable if the source throws an error",
    "lineNumber": 54
  },
  {
    "__docId__": 250,
    "kind": "testFile",
    "name": "test/cache.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#cache', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().cache();\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should signal cached complete', (done) => {\n    let flag;\n    const completable = Completable.complete().delay(100).cache();\n\n    setTimeout(() => {\n      completable.subscribe(\n        () => { flag = true; },\n        () => done(false),\n      );\n      setTimeout(() => {\n        completable.subscribe(\n          () => (flag ? done() : done(false)),\n          () => done(false),\n        );\n      }, 100);\n    }, 200);\n  });\n  /**\n   *\n   */\n  it('should signal cached error value', (done) => {\n    let flag;\n    const completable = Completable.error(new Error('Hello')).delay(100).cache();\n\n    setTimeout(() => {\n      completable.subscribe(\n        () => done(false),\n        () => { flag = true; },\n      );\n\n      setTimeout(() => {\n        completable.subscribe(\n          () => done(false),\n          () => (flag ? done() : done(false)),\n        );\n      }, 100);\n    }, 200);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/cache.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cache.js~describe19",
    "access": "public",
    "description": "#cache",
    "lineNumber": 8
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/cache.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache.js~describe19.it20",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/cache.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache.js~describe19.it21",
    "access": "public",
    "description": "should signal cached complete",
    "lineNumber": 19
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/cache.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache.js~describe19.it22",
    "access": "public",
    "description": "should signal cached error value",
    "lineNumber": 39
  },
  {
    "__docId__": 255,
    "kind": "testFile",
    "name": "test/catch.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#catch', () => {\n  /**\n   *\n   */\n  it('should create a Promise', () => {\n    const completable = Completable.error(new Error('Hello')).catch(x => x);\n    assert(completable instanceof Promise);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/catch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/catch.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/catch.js~describe23",
    "access": "public",
    "description": "#catch",
    "lineNumber": 8
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/catch.js~describe23",
    "testDepth": 1,
    "static": true,
    "longname": "test/catch.js~describe23.it24",
    "access": "public",
    "description": "should create a Promise",
    "lineNumber": 12
  },
  {
    "__docId__": 258,
    "kind": "testFile",
    "name": "test/compose.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n   *\n   */\ndescribe('#compose', () => {\n  /**\n     *\n     */\n  it('should return the same instance if no function is provided', () => {\n    const source = Completable.complete();\n    const completable = source.compose();\n\n    assert(source === completable);\n  });\n  /**\n     *\n     */\n  it('should return a Completable from the transformer', () => {\n    const completable = Completable.complete().compose(source => source.delay(100));\n\n    assert(completable instanceof Completable);\n  });\n  /**\n     *\n     */\n  it('should correctly signal the composed Completable', (done) => {\n    const completable = Completable.complete().compose(source => source.delay(100));\n\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n     *\n     */\n  it('should signal error if the transformer function returned a non-Completable', (done) => {\n    const completable = Completable.complete().compose(() => undefined);\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/compose.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/compose.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/compose.js~describe25",
    "access": "public",
    "description": "#compose",
    "lineNumber": 8
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/compose.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe25.it26",
    "access": "public",
    "description": "should return the same instance if no function is provided",
    "lineNumber": 12
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/compose.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe25.it27",
    "access": "public",
    "description": "should return a Completable from the transformer",
    "lineNumber": 21
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/compose.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe25.it28",
    "access": "public",
    "description": "should correctly signal the composed Completable",
    "lineNumber": 29
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/compose.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe25.it29",
    "access": "public",
    "description": "should signal error if the transformer function returned a non-Completable",
    "lineNumber": 40
  },
  {
    "__docId__": 264,
    "kind": "testFile",
    "name": "test/concat.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#concat', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.concat([Completable.complete(), Completable.complete()]);\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should start with the from left to right', (done) => {\n    let started = '';\n    const prefix = Completable.complete().doOnComplete(() => { started += 'A'; });\n    const suffix = Completable.complete().doOnComplete(() => { started += 'B'; });\n    const source = Completable.concat([prefix, suffix]);\n\n    source.subscribe(\n      () => (started === 'AB' ? done() : done(false)),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the first', (done) => {\n    const completable = Completable.concat([Completable.error(new Error('Hello')), Completable.timer(100)]);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if one of the source is non-Completable.', (done) => {\n    const completable = Completable.concat(['Hello', Completable.timer(100)]);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if given argument is not Iterable', (done) => {\n    const completable = Completable.concat();\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/concat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/concat.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/concat.js~describe30",
    "access": "public",
    "description": "#concat",
    "lineNumber": 8
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/concat.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/concat.js~describe30.it31",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/concat.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/concat.js~describe30.it32",
    "access": "public",
    "description": "should start with the from left to right",
    "lineNumber": 19
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/concat.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/concat.js~describe30.it33",
    "access": "public",
    "description": "should signal error from the first",
    "lineNumber": 33
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/concat.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/concat.js~describe30.it34",
    "access": "public",
    "description": "should signal error if one of the source is non-Completable.",
    "lineNumber": 43
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/concat.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/concat.js~describe30.it35",
    "access": "public",
    "description": "should signal error if given argument is not Iterable",
    "lineNumber": 53
  },
  {
    "__docId__": 271,
    "kind": "testFile",
    "name": "test/concatWith.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#concatWith', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().concatWith(Completable.complete());\n\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the given completable is a non-Completable', () => {\n    const source = Completable.complete();\n    const completable = source.concatWith();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should start with the source Completable.', (done) => {\n    let started = '';\n    const prefix = Completable.complete().doOnComplete(() => { started += 'B'; });\n    const source = Completable.complete().doOnComplete(() => { started += 'A'; }).concatWith(prefix);\n\n    source.subscribe(\n      () => (started === 'AB' ? done() : done(false)),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the other Completable if the other throws an error', (done) => {\n    let started;\n    const prefix = Completable.error(new Error('Hello')).doOnError(() => { started = true; });\n    const source = Completable.complete().concatWith(prefix);\n\n    source.subscribe(\n      () => done(false),\n      () => (started ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the source Completable if the source throws an error', (done) => {\n    let started;\n    const prefix = Completable.complete();\n    const source = Completable.error(new Error('Hello')).doOnError(() => { started = true; }).concatWith(prefix);\n\n    source.subscribe(\n      () => done(false),\n      () => (started ? done() : done(false)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/concatWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "test/concatWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/concatWith.js~describe36",
    "access": "public",
    "description": "#concatWith",
    "lineNumber": 8
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/concatWith.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/concatWith.js~describe36.it37",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/concatWith.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/concatWith.js~describe36.it38",
    "access": "public",
    "description": "should return the same instance if the given completable is a non-Completable",
    "lineNumber": 20
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/concatWith.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/concatWith.js~describe36.it39",
    "access": "public",
    "description": "should start with the source Completable.",
    "lineNumber": 28
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/concatWith.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/concatWith.js~describe36.it40",
    "access": "public",
    "description": "should error with the other Completable if the other throws an error",
    "lineNumber": 41
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/concatWith.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/concatWith.js~describe36.it41",
    "access": "public",
    "description": "should error with the source Completable if the source throws an error",
    "lineNumber": 54
  },
  {
    "__docId__": 278,
    "kind": "testFile",
    "name": "test/create.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#create', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.create(e => e.onComplete('Hello World'));\n\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should signal error if the create received a non-function', (done) => {\n    const completable = Completable.create();\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the emitter signals complete.', (done) => {\n    const completable = Completable.create(e => e.onComplete() || e.onComplete());\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the emitter signals error with undefined value.', (done) => {\n    const completable = Completable.create(e => e.onError() || e.onError());\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should be aborted successfully if emitter is aborted before any signal.', (done) => {\n    const completable = Completable.create((e) => {\n      setTimeout(e.onComplete, 100);\n    });\n\n    const controller = completable.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n    controller.abort();\n    if (controller.signal.aborted) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should signal error if subscriber throws an error.', (done) => {\n    const completable = Completable.create(() => {\n      throw new Error('Expected');\n    });\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/create.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "describe42",
    "testId": 42,
    "memberof": "test/create.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/create.js~describe42",
    "access": "public",
    "description": "#create",
    "lineNumber": 8
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/create.js~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe42.it43",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/create.js~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe42.it44",
    "access": "public",
    "description": "should signal error if the create received a non-function",
    "lineNumber": 20
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/create.js~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe42.it45",
    "access": "public",
    "description": "should signal error if the emitter signals complete.",
    "lineNumber": 31
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/create.js~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe42.it46",
    "access": "public",
    "description": "should signal error if the emitter signals error with undefined value.",
    "lineNumber": 42
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/create.js~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe42.it47",
    "access": "public",
    "description": "should be aborted successfully if emitter is aborted before any signal.",
    "lineNumber": 53
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/create.js~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe42.it48",
    "access": "public",
    "description": "should signal error if subscriber throws an error.",
    "lineNumber": 70
  },
  {
    "__docId__": 286,
    "kind": "testFile",
    "name": "test/defer.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#defer', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.defer(() => Completable.complete());\n\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const completable = Completable.defer(() => Completable.complete());\n\n    completable.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      e => done(e),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if callable returns a non-Completable', (done) => {\n    const completable = Completable.defer(() => {});\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if callable throws an error', (done) => {\n    const completable = Completable.defer(() => {\n      throw new Error('Expected');\n    });\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/defer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "describe49",
    "testId": 49,
    "memberof": "test/defer.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/defer.js~describe49",
    "access": "public",
    "description": "#defer",
    "lineNumber": 8
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/defer.js~describe49",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe49.it50",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/defer.js~describe49",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe49.it51",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 20
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/defer.js~describe49",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe49.it52",
    "access": "public",
    "description": "should signal error if callable returns a non-Completable",
    "lineNumber": 31
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/defer.js~describe49",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe49.it53",
    "access": "public",
    "description": "should signal error if callable throws an error",
    "lineNumber": 42
  },
  {
    "__docId__": 292,
    "kind": "testFile",
    "name": "test/delay.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#delay', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().delay(100);\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is not a number.', () => {\n    const source = Completable.complete();\n    const completable = source.delay();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should signal complete.', (done) => {\n    const completable = Completable.complete().delay(100);\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const completable = Completable.error(new Error('Hello')).delay(100);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal complete if aborted.', (done) => {\n    const source = Completable.complete().delay(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.abort();\n    if (controller.signal.aborted) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if aborted.', (done) => {\n    const source = Completable.error(new Error('Hello')).delay(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.abort();\n    if (controller.signal.aborted) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/delay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "test/delay.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/delay.js~describe54",
    "access": "public",
    "description": "#delay",
    "lineNumber": 8
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/delay.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe54.it55",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/delay.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe54.it56",
    "access": "public",
    "description": "should return the same instance if the amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/delay.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe54.it57",
    "access": "public",
    "description": "should signal complete.",
    "lineNumber": 27
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/delay.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe54.it58",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 37
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/delay.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe54.it59",
    "access": "public",
    "description": "should not signal complete if aborted.",
    "lineNumber": 47
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/delay.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe54.it60",
    "access": "public",
    "description": "should not signal error if aborted.",
    "lineNumber": 62
  },
  {
    "__docId__": 300,
    "kind": "testFile",
    "name": "test/delaySubscription.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n   *\n   */\ndescribe('#delaySubscription', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().delaySubscription(100);\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is not a number.', () => {\n    const source = Completable.complete();\n    const completable = source.delaySubscription();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should signal complete.', (done) => {\n    const completable = Completable.complete().delaySubscription(100);\n    completable.subscribe(\n      () => done(),\n      x => done(x),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const completable = Completable.error(new Error('Hello')).delaySubscription(100);\n    completable.subscribe(\n      x => done(x),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal complete if aborted.', (done) => {\n    const source = Completable.complete().delaySubscription(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.abort();\n    if (controller.signal.aborted) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if aborted.', (done) => {\n    const source = Completable.error(new Error('Hello')).delaySubscription(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.abort();\n    if (controller.signal.aborted) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/delaySubscription.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/delaySubscription.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/delaySubscription.js~describe61",
    "access": "public",
    "description": "#delaySubscription",
    "lineNumber": 8
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/delaySubscription.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe61.it62",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/delaySubscription.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe61.it63",
    "access": "public",
    "description": "should return the same instance if the amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/delaySubscription.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe61.it64",
    "access": "public",
    "description": "should signal complete.",
    "lineNumber": 27
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/delaySubscription.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe61.it65",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 37
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/delaySubscription.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe61.it66",
    "access": "public",
    "description": "should not signal complete if aborted.",
    "lineNumber": 47
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/delaySubscription.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe61.it67",
    "access": "public",
    "description": "should not signal error if aborted.",
    "lineNumber": 62
  },
  {
    "__docId__": 308,
    "kind": "testFile",
    "name": "test/doAfterTerminate.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#doAfterTerminate', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().doAfterTerminate(() => {});\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Completable.complete();\n    const completable = source.doAfterTerminate();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should call the given function after complete.', (done) => {\n    let called;\n    const source = Completable.complete();\n    const completable = source.doAfterTerminate(() => called && done());\n    completable.subscribe(\n      () => { called = true; },\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function after error.', (done) => {\n    let called;\n    const source = Completable.error(new Error('Hello'));\n    const completable = source.doAfterTerminate(() => called && done());\n    completable.subscribe(\n      () => done(false),\n      () => { called = true; },\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/doAfterTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "test/doAfterTerminate.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe68",
    "access": "public",
    "description": "#doAfterTerminate",
    "lineNumber": 8
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/doAfterTerminate.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe68.it69",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/doAfterTerminate.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe68.it70",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/doAfterTerminate.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe68.it71",
    "access": "public",
    "description": "should call the given function after complete.",
    "lineNumber": 27
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/doAfterTerminate.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe68.it72",
    "access": "public",
    "description": "should call the given function after error.",
    "lineNumber": 39
  },
  {
    "__docId__": 314,
    "kind": "testFile",
    "name": "test/doFinally.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#doFinally', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().doFinally(() => {});\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Completable.complete();\n    const completable = source.doFinally();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should call the given function after complete.', (done) => {\n    let called;\n    const source = Completable.complete();\n    const completable = source.doFinally(() => called && done());\n    completable.subscribe(\n      () => { called = true; },\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function after error.', (done) => {\n    let called;\n    const source = Completable.error(new Error('Hello'));\n    const completable = source.doFinally(() => called && done());\n    completable.subscribe(\n      () => done(false),\n      () => { called = true; },\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on dispose.', (done) => {\n    const source = Completable.timer(100);\n    const completable = source.doFinally(() => done());\n\n    const controller = completable.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n    controller.abort();\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/doFinally.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "test/doFinally.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doFinally.js~describe73",
    "access": "public",
    "description": "#doFinally",
    "lineNumber": 8
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/doFinally.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe73.it74",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/doFinally.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe73.it75",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/doFinally.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe73.it76",
    "access": "public",
    "description": "should call the given function after complete.",
    "lineNumber": 27
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/doFinally.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe73.it77",
    "access": "public",
    "description": "should call the given function after error.",
    "lineNumber": 39
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/doFinally.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe73.it78",
    "access": "public",
    "description": "should call the given function on dispose.",
    "lineNumber": 51
  },
  {
    "__docId__": 321,
    "kind": "testFile",
    "name": "test/doOnAbort.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#doOnAbort', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().doOnAbort(() => {});\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Completable.complete();\n    const completable = source.doOnAbort();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should signal the complete then fire abort callback.', (done) => {\n    let called;\n    const source = Completable.complete();\n    const completable = source.doOnAbort(() => called && done());\n\n    const controller = completable.subscribe(\n      () => { called = true; },\n      () => done(false),\n    );\n    controller.abort();\n  });\n  /**\n   *\n   */\n  it('should signal the error value then fire abort callback.', (done) => {\n    let called;\n    const source = Completable.error(new Error('Hello'));\n    const completable = source.doOnAbort(() => called && done());\n\n    const controller = completable.subscribe(\n      () => done(false),\n      () => { called = true; },\n    );\n    controller.abort();\n  });\n  /**\n   *\n   */\n  it('should call the given function on abort.', (done) => {\n    const source = Completable.complete().delay(100);\n    const completable = source.doOnAbort(() => done());\n\n    const controller = completable.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n    controller.abort();\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/doOnAbort.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/doOnAbort.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnAbort.js~describe79",
    "access": "public",
    "description": "#doOnAbort",
    "lineNumber": 8
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/doOnAbort.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnAbort.js~describe79.it80",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/doOnAbort.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnAbort.js~describe79.it81",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/doOnAbort.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnAbort.js~describe79.it82",
    "access": "public",
    "description": "should signal the complete then fire abort callback.",
    "lineNumber": 27
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/doOnAbort.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnAbort.js~describe79.it83",
    "access": "public",
    "description": "should signal the error value then fire abort callback.",
    "lineNumber": 41
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/doOnAbort.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnAbort.js~describe79.it84",
    "access": "public",
    "description": "should call the given function on abort.",
    "lineNumber": 55
  },
  {
    "__docId__": 328,
    "kind": "testFile",
    "name": "test/doOnComplete.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#doOnComplete', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().doOnComplete(() => {});\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Completable.complete();\n    const completable = source.doOnComplete();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Completable.complete();\n    const completable = source.doOnComplete(() => { called = true; });\n    completable.subscribe(\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/doOnComplete.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "test/doOnComplete.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnComplete.js~describe85",
    "access": "public",
    "description": "#doOnComplete",
    "lineNumber": 8
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/doOnComplete.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnComplete.js~describe85.it86",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/doOnComplete.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnComplete.js~describe85.it87",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/doOnComplete.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnComplete.js~describe85.it88",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 27
  },
  {
    "__docId__": 333,
    "kind": "testFile",
    "name": "test/doOnError.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#doOnError', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().doOnError(() => {});\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Completable.complete();\n    const completable = source.doOnError();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Completable.error(new Error('Hello'));\n    const completable = source.doOnError(() => { called = true; });\n    completable.subscribe(\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/doOnError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "test/doOnError.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnError.js~describe89",
    "access": "public",
    "description": "#doOnError",
    "lineNumber": 8
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/doOnError.js~describe89",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnError.js~describe89.it90",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/doOnError.js~describe89",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnError.js~describe89.it91",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/doOnError.js~describe89",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnError.js~describe89.it92",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 27
  },
  {
    "__docId__": 338,
    "kind": "testFile",
    "name": "test/doOnEvent.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#doOnEvent', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().doOnEvent(() => {});\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Completable.complete();\n    const completable = source.doOnEvent();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should call the given function on complete.', (done) => {\n    let called;\n    const source = Completable.complete();\n    const completable = source.doOnEvent(() => { called = true; });\n    completable.subscribe(\n      () => called && done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Completable.error(new Error('Hello'));\n    const completable = source.doOnEvent(() => { called = true; });\n    completable.subscribe(\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/doOnEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "test/doOnEvent.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnEvent.js~describe93",
    "access": "public",
    "description": "#doOnEvent",
    "lineNumber": 8
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/doOnEvent.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe93.it94",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/doOnEvent.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe93.it95",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/doOnEvent.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe93.it96",
    "access": "public",
    "description": "should call the given function on complete.",
    "lineNumber": 27
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/doOnEvent.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe93.it97",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 39
  },
  {
    "__docId__": 344,
    "kind": "testFile",
    "name": "test/doOnSubscribe.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#doOnSubscribe', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().doOnSubscribe(() => {});\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if no function is passed', () => {\n    const source = Completable.complete();\n    const completable = source.doOnSubscribe();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should be called before actual subscription.', (done) => {\n    let called;\n    const completable = Completable.complete().doOnSubscribe(() => { called = true; });\n    completable.subscribeWith({\n      onSubscribe() {\n        if (called) {\n          done();\n        } else {\n          done(false);\n        }\n      },\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/doOnSubscribe.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "describe98",
    "testId": 98,
    "memberof": "test/doOnSubscribe.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe98",
    "access": "public",
    "description": "#doOnSubscribe",
    "lineNumber": 8
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/doOnSubscribe.js~describe98",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe98.it99",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/doOnSubscribe.js~describe98",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe98.it100",
    "access": "public",
    "description": "should return the same instance if no function is passed",
    "lineNumber": 19
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/doOnSubscribe.js~describe98",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe98.it101",
    "access": "public",
    "description": "should be called before actual subscription.",
    "lineNumber": 27
  },
  {
    "__docId__": 349,
    "kind": "testFile",
    "name": "test/doOnTerminate.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#doOnTerminate', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().doOnTerminate(() => {});\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Completable.complete();\n    const completable = source.doOnTerminate();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should call the given function on complete.', (done) => {\n    let called;\n    const source = Completable.complete();\n    const completable = source.doOnTerminate(() => { called = true; });\n    completable.subscribe(\n      () => called && done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Completable.error(new Error('Hello'));\n    const completable = source.doOnTerminate(() => { called = true; });\n    completable.subscribe(\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/doOnTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "describe102",
    "testId": 102,
    "memberof": "test/doOnTerminate.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnTerminate.js~describe102",
    "access": "public",
    "description": "#doOnTerminate",
    "lineNumber": 8
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/doOnTerminate.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe102.it103",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/doOnTerminate.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe102.it104",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/doOnTerminate.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe102.it105",
    "access": "public",
    "description": "should call the given function on complete.",
    "lineNumber": 27
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/doOnTerminate.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe102.it106",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 39
  },
  {
    "__docId__": 355,
    "kind": "testFile",
    "name": "test/error.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#error', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.error(new Error('Hello World'));\n\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should error with the given value.', (done) => {\n    const completable = Completable.error(new Error('Hello World'));\n\n    completable.subscribe(\n      () => done(false),\n      e => (typeof e !== 'undefined' ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the a message if the given value is undefined', (done) => {\n    const completable = Completable.error();\n\n    completable.subscribe(\n      () => done(false),\n      e => (e === 'Completable.error received an undefined value.' ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the a message if the callable returned undefined', (done) => {\n    const completable = Completable.error(() => {});\n\n    completable.subscribe(\n      () => done(false),\n      e => (e === 'Completable.error: Error supplier returned an undefined value.' ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should error if the callable throws an error.', (done) => {\n    const completable = Completable.error(() => {\n      throw new Error('Expected');\n    });\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "describe107",
    "testId": 107,
    "memberof": "test/error.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/error.js~describe107",
    "access": "public",
    "description": "#error",
    "lineNumber": 8
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/error.js~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe107.it108",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/error.js~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe107.it109",
    "access": "public",
    "description": "should error with the given value.",
    "lineNumber": 20
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/error.js~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe107.it110",
    "access": "public",
    "description": "should error with the a message if the given value is undefined",
    "lineNumber": 31
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/error.js~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe107.it111",
    "access": "public",
    "description": "should error with the a message if the callable returned undefined",
    "lineNumber": 42
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/error.js~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe107.it112",
    "access": "public",
    "description": "should error if the callable throws an error.",
    "lineNumber": 53
  },
  {
    "__docId__": 362,
    "kind": "testFile",
    "name": "test/fromCallable.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#fromCallable', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.fromCallable(() => 'Hello World');\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const completable = Completable.fromCallable(() => 'Hello World');\n\n    completable.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      e => done(e),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the callable throws an error.', (done) => {\n    const completable = Completable.fromCallable(() => {\n      throw new Error('Expected');\n    });\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the callable returns a rejected Promise.', (done) => {\n    const completable = Completable.fromCallable(() => new Promise((x, y) => y(new Error('Expected'))));\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the callable is not a function', (done) => {\n    const completable = Completable.fromCallable();\n\n    completable.subscribe(\n      () => done(false),\n      e => (e === 'Completable.fromCallable: callable received is not a function.' ? done() : done(false)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/fromCallable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "describe113",
    "testId": 113,
    "memberof": "test/fromCallable.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/fromCallable.js~describe113",
    "access": "public",
    "description": "#fromCallable",
    "lineNumber": 8
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/fromCallable.js~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe113.it114",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/fromCallable.js~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe113.it115",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 19
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/fromCallable.js~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe113.it116",
    "access": "public",
    "description": "should signal an error if the callable throws an error.",
    "lineNumber": 30
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/fromCallable.js~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe113.it117",
    "access": "public",
    "description": "should signal an error if the callable returns a rejected Promise.",
    "lineNumber": 43
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/fromCallable.js~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe113.it118",
    "access": "public",
    "description": "should signal an error if the callable is not a function",
    "lineNumber": 54
  },
  {
    "__docId__": 369,
    "kind": "testFile",
    "name": "test/fromPromise.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#fromPromise', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.fromPromise(new Promise(res => res('Hello World')));\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const completable = Completable.fromPromise(new Promise(res => res('Hello World')));\n\n    completable.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      e => done(e),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the given value is not Promise like', (done) => {\n    const completable = Completable.fromPromise();\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/fromPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/fromPromise.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/fromPromise.js~describe119",
    "access": "public",
    "description": "#fromPromise",
    "lineNumber": 8
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/fromPromise.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromPromise.js~describe119.it120",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/fromPromise.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromPromise.js~describe119.it121",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 19
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/fromPromise.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromPromise.js~describe119.it122",
    "access": "public",
    "description": "should signal error if the given value is not Promise like",
    "lineNumber": 30
  },
  {
    "__docId__": 374,
    "kind": "testFile",
    "name": "test/fromResolvable.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#fromResolvable', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.fromResolvable(res => res('Hello World'));\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const completable = Completable.fromResolvable(res => res('Hello World'));\n\n    completable.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      e => done(e),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the given value is not a function', (done) => {\n    const completable = Completable.fromResolvable();\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/fromResolvable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "test/fromResolvable.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/fromResolvable.js~describe123",
    "access": "public",
    "description": "#fromResolvable",
    "lineNumber": 8
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/fromResolvable.js~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe123.it124",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/fromResolvable.js~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe123.it125",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 19
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/fromResolvable.js~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe123.it126",
    "access": "public",
    "description": "should signal error if the given value is not a function",
    "lineNumber": 30
  },
  {
    "__docId__": 379,
    "kind": "testFile",
    "name": "test/lift.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n/**\n *\n */\ndescribe('#lift', () => {\n  /**\n   *\n   */\n  it('should return the same instance if no function is provided', () => {\n    const source = Completable.complete();\n    const completable = source.lift();\n\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should signal an error if the lift operator returned a non-Observer', (done) => {\n    const completable = Completable.complete().lift(() => {});\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should subscribe successfully', (done) => {\n    const completable = Completable.complete().lift(observer => ({\n      onSubscribe: observer.onSubscribe,\n      onComplete: observer.onComplete,\n    }));\n\n    completable.subscribe(\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/lift.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "describe127",
    "testId": 127,
    "memberof": "test/lift.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/lift.js~describe127",
    "access": "public",
    "description": "#lift",
    "lineNumber": 7
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/lift.js~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "test/lift.js~describe127.it128",
    "access": "public",
    "description": "should return the same instance if no function is provided",
    "lineNumber": 11
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/lift.js~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "test/lift.js~describe127.it129",
    "access": "public",
    "description": "should signal an error if the lift operator returned a non-Observer",
    "lineNumber": 20
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/lift.js~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "test/lift.js~describe127.it130",
    "access": "public",
    "description": "should subscribe successfully",
    "lineNumber": 31
  },
  {
    "__docId__": 384,
    "kind": "testFile",
    "name": "test/merge.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#merge', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.merge([Completable.complete(), Completable.complete()]);\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should start with the from the first completion to the last completion', (done) => {\n    let started = '';\n    const prefix = Completable.complete().doOnComplete(() => { started += 'A'; });\n    const suffix = Completable.complete().doOnComplete(() => { started += 'B'; });\n    const source = Completable.merge([prefix, suffix]);\n\n    source.subscribe(\n      () => (started === 'AB' ? done() : done(false)),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the first', (done) => {\n    const completable = Completable.merge([Completable.error(new Error('Hello')), Completable.timer(100)]);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if one of the source is non-Completable.', (done) => {\n    const completable = Completable.merge(['Hello', Completable.timer(100)]);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if given argument is not Iterable', (done) => {\n    const completable = Completable.merge();\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/merge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "describe131",
    "testId": 131,
    "memberof": "test/merge.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/merge.js~describe131",
    "access": "public",
    "description": "#merge",
    "lineNumber": 8
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "test/merge.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe131.it132",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/merge.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe131.it133",
    "access": "public",
    "description": "should start with the from the first completion to the last completion",
    "lineNumber": 19
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/merge.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe131.it134",
    "access": "public",
    "description": "should signal error from the first",
    "lineNumber": 33
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/merge.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe131.it135",
    "access": "public",
    "description": "should signal error if one of the source is non-Completable.",
    "lineNumber": 43
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/merge.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe131.it136",
    "access": "public",
    "description": "should signal error if given argument is not Iterable",
    "lineNumber": 53
  },
  {
    "__docId__": 391,
    "kind": "testFile",
    "name": "test/mergeWith.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#mergeWith', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().mergeWith(Completable.complete());\n\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the given completable is a non-Completable', () => {\n    const source = Completable.complete();\n    const completable = source.mergeWith();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should start with the other Completable.', (done) => {\n    let started = '';\n    const prefix = Completable.complete().doOnComplete(() => { started += 'B'; });\n    const source = Completable.complete().doOnComplete(() => { started += 'A'; }).mergeWith(prefix);\n\n    source.subscribe(\n      () => (started === 'AB' ? done() : done(false)),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the other Completable if the other throws an error', (done) => {\n    let started;\n    const prefix = Completable.error(new Error('Hello')).doOnError(() => { started = true; });\n    const source = Completable.complete().mergeWith(prefix);\n\n    source.subscribe(\n      () => done(false),\n      () => (started ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the source Completable if the source throws an error', (done) => {\n    let started;\n    const prefix = Completable.complete();\n    const source = Completable.error(new Error('Hello')).doOnError(() => { started = true; }).mergeWith(prefix);\n\n    source.subscribe(\n      () => done(false),\n      () => (started ? done() : done(false)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/mergeWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "describe137",
    "testId": 137,
    "memberof": "test/mergeWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/mergeWith.js~describe137",
    "access": "public",
    "description": "#mergeWith",
    "lineNumber": 8
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/mergeWith.js~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "test/mergeWith.js~describe137.it138",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "test/mergeWith.js~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "test/mergeWith.js~describe137.it139",
    "access": "public",
    "description": "should return the same instance if the given completable is a non-Completable",
    "lineNumber": 20
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/mergeWith.js~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "test/mergeWith.js~describe137.it140",
    "access": "public",
    "description": "should start with the other Completable.",
    "lineNumber": 28
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/mergeWith.js~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "test/mergeWith.js~describe137.it141",
    "access": "public",
    "description": "should error with the other Completable if the other throws an error",
    "lineNumber": 41
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/mergeWith.js~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "test/mergeWith.js~describe137.it142",
    "access": "public",
    "description": "should error with the source Completable if the source throws an error",
    "lineNumber": 54
  },
  {
    "__docId__": 398,
    "kind": "testFile",
    "name": "test/never.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#never', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.never();\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should not signal.', () => {\n    const completable = Completable.never();\n    completable.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/never.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "describe143",
    "testId": 143,
    "memberof": "test/never.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/never.js~describe143",
    "access": "public",
    "description": "#never",
    "lineNumber": 8
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/never.js~describe143",
    "testDepth": 1,
    "static": true,
    "longname": "test/never.js~describe143.it144",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/never.js~describe143",
    "testDepth": 1,
    "static": true,
    "longname": "test/never.js~describe143.it145",
    "access": "public",
    "description": "should not signal.",
    "lineNumber": 19
  },
  {
    "__docId__": 402,
    "kind": "testFile",
    "name": "test/onErrorComplete.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#onErrorComplete', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.error(new Error('Hello')).onErrorComplete(() => 'World');\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if parameter passed is not a Completable or a function', () => {\n    const source = Completable.error(new Error('Hello'));\n    const completable = source.onErrorComplete();\n    assert(completable === source);\n  });\n  /**\n   *\n   */\n  it('should emit the supplied item by the given function in case of error', (done) => {\n    const completable = Completable.error(new Error('Hello')).onErrorComplete(() => 'World');\n\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function throws error.', (done) => {\n    const completable = Completable.error(new Error('Hello')).onErrorComplete(() => { throw new Error('Ooops'); });\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function returns undefined.', (done) => {\n    const completable = Completable.error(new Error('Hello')).onErrorComplete(() => {});\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/onErrorComplete.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "describe146",
    "testId": 146,
    "memberof": "test/onErrorComplete.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/onErrorComplete.js~describe146",
    "access": "public",
    "description": "#onErrorComplete",
    "lineNumber": 8
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "test/onErrorComplete.js~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorComplete.js~describe146.it147",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/onErrorComplete.js~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorComplete.js~describe146.it148",
    "access": "public",
    "description": "should return the same instance if parameter passed is not a Completable or a function",
    "lineNumber": 19
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/onErrorComplete.js~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorComplete.js~describe146.it149",
    "access": "public",
    "description": "should emit the supplied item by the given function in case of error",
    "lineNumber": 27
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/onErrorComplete.js~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorComplete.js~describe146.it150",
    "access": "public",
    "description": "should emit error if provide function throws error.",
    "lineNumber": 38
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "test/onErrorComplete.js~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorComplete.js~describe146.it151",
    "access": "public",
    "description": "should emit error if provide function returns undefined.",
    "lineNumber": 48
  },
  {
    "__docId__": 409,
    "kind": "testFile",
    "name": "test/onErrorResumeNext.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#onErrorResumeNext', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.error(new Error('Hello')).onErrorResumeNext(Completable.complete());\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if parameter passed is not a Completable or a function', () => {\n    const source = Completable.error(new Error('Hello'));\n    const completable = source.onErrorResumeNext();\n    assert(completable === source);\n  });\n  /**\n   *\n   */\n  it('should subscribe to the given Completable', (done) => {\n    const completable = Completable.error(new Error('Hello')).onErrorResumeNext(Completable.complete());\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should subscribe to the given Completable-producing Function', (done) => {\n    const completable = Completable.error(new Error('Hello')).onErrorResumeNext(() => Completable.complete());\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function throws error.', (done) => {\n    const completable = Completable.error(new Error('Hello')).onErrorResumeNext(() => { throw new Error('Ooops'); });\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function returns non-Completable.', (done) => {\n    const completable = Completable.error(new Error('Hello')).onErrorResumeNext(() => {});\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not resume if source does not throw error', (done) => {\n    let resumed;\n    const completable = Completable.complete().onErrorResumeNext(\n      Completable.complete().doOnComplete(() => { resumed = true; }),\n    );\n    completable.subscribe(\n      () => (!resumed ? done() : done(false)),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/onErrorResumeNext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "describe152",
    "testId": 152,
    "memberof": "test/onErrorResumeNext.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe152",
    "access": "public",
    "description": "#onErrorResumeNext",
    "lineNumber": 8
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/onErrorResumeNext.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe152.it153",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/onErrorResumeNext.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe152.it154",
    "access": "public",
    "description": "should return the same instance if parameter passed is not a Completable or a function",
    "lineNumber": 19
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/onErrorResumeNext.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe152.it155",
    "access": "public",
    "description": "should subscribe to the given Completable",
    "lineNumber": 27
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "test/onErrorResumeNext.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe152.it156",
    "access": "public",
    "description": "should subscribe to the given Completable-producing Function",
    "lineNumber": 37
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/onErrorResumeNext.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe152.it157",
    "access": "public",
    "description": "should emit error if provide function throws error.",
    "lineNumber": 47
  },
  {
    "__docId__": 416,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/onErrorResumeNext.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe152.it158",
    "access": "public",
    "description": "should emit error if provide function returns non-Completable.",
    "lineNumber": 57
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "test/onErrorResumeNext.js~describe152",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe152.it159",
    "access": "public",
    "description": "should not resume if source does not throw error",
    "lineNumber": 67
  },
  {
    "__docId__": 418,
    "kind": "testFile",
    "name": "test/repeat.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n\n/**\n *\n */\ndescribe('#repeat', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().repeat(100);\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is not a number and not undefined.', () => {\n    const source = Completable.complete();\n    const completable = source.repeat('Hello');\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is a number and not positive', () => {\n    const source = Completable.complete();\n    const completable = source.repeat(-1);\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should repeat with the given amount and completes', (done) => {\n    let count = 0;\n    const source = Completable.complete().doOnComplete(() => { count += 1; });\n    const completable = source.repeat(3);\n    completable.subscribe(\n      () => (count === 3 ? done() : done(false)),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error', (done) => {\n    const source = Completable.error(new Error('Hello'));\n    const completable = source.repeat(3);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/repeat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "describe160",
    "testId": 160,
    "memberof": "test/repeat.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/repeat.js~describe160",
    "access": "public",
    "description": "#repeat",
    "lineNumber": 9
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/repeat.js~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "test/repeat.js~describe160.it161",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 13
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "test/repeat.js~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "test/repeat.js~describe160.it162",
    "access": "public",
    "description": "should return the same instance if the amount is not a number and not undefined.",
    "lineNumber": 20
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/repeat.js~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "test/repeat.js~describe160.it163",
    "access": "public",
    "description": "should return the same instance if the amount is a number and not positive",
    "lineNumber": 28
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/repeat.js~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "test/repeat.js~describe160.it164",
    "access": "public",
    "description": "should repeat with the given amount and completes",
    "lineNumber": 36
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/repeat.js~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "test/repeat.js~describe160.it165",
    "access": "public",
    "description": "should emit error",
    "lineNumber": 48
  },
  {
    "__docId__": 425,
    "kind": "testFile",
    "name": "test/repeatUntil.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n\n/**\n *\n */\ndescribe('#repeatUntil', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().repeatUntil(100);\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should repeatUntil with the predicate returns true', (done) => {\n    let count = 0;\n    const source = Completable.complete().doOnComplete(() => { count += 1; });\n    const completable = source.repeatUntil(() => count === 3);\n    completable.subscribe(\n      () => (count === 3 ? done() : done(false)),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error', (done) => {\n    const source = Completable.error(new Error('Hello'));\n    const completable = source.repeatUntil(() => false);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/repeatUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "test/repeatUntil.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/repeatUntil.js~describe166",
    "access": "public",
    "description": "#repeatUntil",
    "lineNumber": 9
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/repeatUntil.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/repeatUntil.js~describe166.it167",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 13
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/repeatUntil.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/repeatUntil.js~describe166.it168",
    "access": "public",
    "description": "should repeatUntil with the predicate returns true",
    "lineNumber": 20
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "test/repeatUntil.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/repeatUntil.js~describe166.it169",
    "access": "public",
    "description": "should emit error",
    "lineNumber": 32
  },
  {
    "__docId__": 430,
    "kind": "testFile",
    "name": "test/retry.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#retry', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.error(new Error('Hello')).retry(x => x === 3);\n\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should signal a complete if no error', (done) => {\n    const completable = Completable.complete().retry(x => x === 3);\n\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should retry if there is an error and if it passes the predicate', (done) => {\n    let retried;\n    const completable = Completable.error(new Error('Hello')).retry((x) => {\n      if (x === 2) {\n        retried = true;\n      }\n      return x < 3;\n    });\n\n    completable.subscribe(\n      () => done(false),\n      () => retried && done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if predicate is false', (done) => {\n    const completable = Completable.error(new Error('Hello')).retry(x => x === 3);\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/retry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "describe170",
    "testId": 170,
    "memberof": "test/retry.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/retry.js~describe170",
    "access": "public",
    "description": "#retry",
    "lineNumber": 8
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/retry.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe170.it171",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "test/retry.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe170.it172",
    "access": "public",
    "description": "should signal a complete if no error",
    "lineNumber": 20
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/retry.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe170.it173",
    "access": "public",
    "description": "should retry if there is an error and if it passes the predicate",
    "lineNumber": 31
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "test/retry.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe170.it174",
    "access": "public",
    "description": "should signal an error if predicate is false",
    "lineNumber": 48
  },
  {
    "__docId__": 436,
    "kind": "testFile",
    "name": "test/startWith.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#startWith', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().startWith(Completable.complete());\n\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the given completable is a non-Completable', () => {\n    const source = Completable.complete();\n    const completable = source.startWith();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should start with the other Completable.', (done) => {\n    let started = '';\n    const prefix = Completable.complete().doOnComplete(() => { started += 'A'; });\n    const source = Completable.complete().doOnComplete(() => { started += 'B'; }).startWith(prefix);\n\n    source.subscribe(\n      () => (started === 'AB' ? done() : done(false)),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the other Completable if the other throws an error', (done) => {\n    let started;\n    const prefix = Completable.error(new Error('Hello')).doOnError(() => { started = true; });\n    const source = Completable.complete().startWith(prefix);\n\n    source.subscribe(\n      () => done(false),\n      () => (started ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the source Completable if the source throws an error', (done) => {\n    let started;\n    const prefix = Completable.complete();\n    const source = Completable.error(new Error('Hello')).doOnError(() => { started = true; }).startWith(prefix);\n\n    source.subscribe(\n      () => done(false),\n      () => (started ? done() : done(false)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/startWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "test/startWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/startWith.js~describe175",
    "access": "public",
    "description": "#startWith",
    "lineNumber": 8
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/startWith.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/startWith.js~describe175.it176",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/startWith.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/startWith.js~describe175.it177",
    "access": "public",
    "description": "should return the same instance if the given completable is a non-Completable",
    "lineNumber": 20
  },
  {
    "__docId__": 440,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/startWith.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/startWith.js~describe175.it178",
    "access": "public",
    "description": "should start with the other Completable.",
    "lineNumber": 28
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/startWith.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/startWith.js~describe175.it179",
    "access": "public",
    "description": "should error with the other Completable if the other throws an error",
    "lineNumber": 41
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/startWith.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/startWith.js~describe175.it180",
    "access": "public",
    "description": "should error with the source Completable if the source throws an error",
    "lineNumber": 54
  },
  {
    "__docId__": 443,
    "kind": "testFile",
    "name": "test/takeUntil.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#takeUntil', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().takeUntil(Completable.timer(100));\n\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if no other Completable is provided', () => {\n    const source = Completable.complete();\n    const completable = source.takeUntil();\n\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should signal complete if other Completable has not emitted a complete signal', (done) => {\n    const completable = Completable.complete().takeUntil(Completable.timer(100));\n\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete if other Completable has not emitted an error signal', (done) => {\n    const completable = Completable.complete().takeUntil(Completable.error(new Error('World')).delay(100));\n\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Completable has emitted a complete signal', (done) => {\n    const completable = Completable.complete().delay(100).takeUntil(Completable.complete());\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Completable has emitted an error signal', (done) => {\n    const completable = Completable.complete().delay(100).takeUntil(Completable.error(new Error('World')));\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if source signals error, nonetheless', (done) => {\n    const completable = Completable.error(new Error('Hello')).takeUntil(Completable.timer(100));\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/takeUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "describe181",
    "testId": 181,
    "memberof": "test/takeUntil.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/takeUntil.js~describe181",
    "access": "public",
    "description": "#takeUntil",
    "lineNumber": 8
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/takeUntil.js~describe181",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe181.it182",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 446,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "test/takeUntil.js~describe181",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe181.it183",
    "access": "public",
    "description": "should return the same instance if no other Completable is provided",
    "lineNumber": 20
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/takeUntil.js~describe181",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe181.it184",
    "access": "public",
    "description": "should signal complete if other Completable has not emitted a complete signal",
    "lineNumber": 29
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "test/takeUntil.js~describe181",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe181.it185",
    "access": "public",
    "description": "should signal complete if other Completable has not emitted an error signal",
    "lineNumber": 40
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/takeUntil.js~describe181",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe181.it186",
    "access": "public",
    "description": "should signal error if other Completable has emitted a complete signal",
    "lineNumber": 51
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "test/takeUntil.js~describe181",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe181.it187",
    "access": "public",
    "description": "should signal error if other Completable has emitted an error signal",
    "lineNumber": 62
  },
  {
    "__docId__": 451,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/takeUntil.js~describe181",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe181.it188",
    "access": "public",
    "description": "should signal error if source signals error, nonetheless",
    "lineNumber": 73
  },
  {
    "__docId__": 452,
    "kind": "testFile",
    "name": "test/then.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#then', () => {\n  /**\n   *\n   */\n  it('should create a Promise', () => {\n    const completable = Completable.complete().then(x => x, x => x);\n    assert(completable instanceof Promise);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/then.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "describe189",
    "testId": 189,
    "memberof": "test/then.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/then.js~describe189",
    "access": "public",
    "description": "#then",
    "lineNumber": 8
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/then.js~describe189",
    "testDepth": 1,
    "static": true,
    "longname": "test/then.js~describe189.it190",
    "access": "public",
    "description": "should create a Promise",
    "lineNumber": 12
  },
  {
    "__docId__": 455,
    "kind": "testFile",
    "name": "test/timeout.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n\n/**\n *\n */\ndescribe('#timeout', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.complete().timeout(100);\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is not a number.', () => {\n    const source = Completable.complete();\n    const completable = source.timeout();\n    assert(source === completable);\n  });\n  /**\n   *\n   */\n  it('should signal complete with the given value.', (done) => {\n    const completable = Completable.complete().timeout(100);\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const completable = Completable.error('Hello').timeout(100);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the Completable does complete after the given timeout.', (done) => {\n    const completable = Completable.timer(200).timeout(100);\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal complete if aborted.', (done) => {\n    const source = Completable.timer(200).timeout(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.abort();\n    if (controller.signal.aborted) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if aborted.', (done) => {\n    const source = Completable.error(new Error('Hello')).delay(200).timeout(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.abort();\n    if (controller.signal.aborted) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/timeout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "describe191",
    "testId": 191,
    "memberof": "test/timeout.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/timeout.js~describe191",
    "access": "public",
    "description": "#timeout",
    "lineNumber": 9
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "test/timeout.js~describe191",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe191.it192",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 13
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "test/timeout.js~describe191",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe191.it193",
    "access": "public",
    "description": "should return the same instance if the amount is not a number.",
    "lineNumber": 20
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "test/timeout.js~describe191",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe191.it194",
    "access": "public",
    "description": "should signal complete with the given value.",
    "lineNumber": 28
  },
  {
    "__docId__": 460,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/timeout.js~describe191",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe191.it195",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 38
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "it196",
    "testId": 196,
    "memberof": "test/timeout.js~describe191",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe191.it196",
    "access": "public",
    "description": "should signal error if the Completable does complete after the given timeout.",
    "lineNumber": 48
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/timeout.js~describe191",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe191.it197",
    "access": "public",
    "description": "should not signal complete if aborted.",
    "lineNumber": 58
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "test/timeout.js~describe191",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe191.it198",
    "access": "public",
    "description": "should not signal error if aborted.",
    "lineNumber": 73
  },
  {
    "__docId__": 464,
    "kind": "testFile",
    "name": "test/timer.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#timer', () => {\n  /**\n   *\n   */\n  it('should create a Completable', () => {\n    const completable = Completable.timer(100);\n    assert(completable instanceof Completable);\n  });\n  /**\n   *\n   */\n  it('should signal error if amount is not a number.', (done) => {\n    const completable = Completable.timer();\n\n    completable.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete', (done) => {\n    const completable = Completable.timer(100);\n    completable.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal complete if aborted.', (done) => {\n    const completable = Completable.timer(100);\n    const controller = completable.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n\n    controller.abort();\n    if (controller.signal.aborted) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 465,
    "kind": "test",
    "name": "describe199",
    "testId": 199,
    "memberof": "test/timer.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/timer.js~describe199",
    "access": "public",
    "description": "#timer",
    "lineNumber": 8
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "it200",
    "testId": 200,
    "memberof": "test/timer.js~describe199",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe199.it200",
    "access": "public",
    "description": "should create a Completable",
    "lineNumber": 12
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "test/timer.js~describe199",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe199.it201",
    "access": "public",
    "description": "should signal error if amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "test/timer.js~describe199",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe199.it202",
    "access": "public",
    "description": "should signal complete",
    "lineNumber": 30
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "test/timer.js~describe199",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe199.it203",
    "access": "public",
    "description": "should not signal complete if aborted.",
    "lineNumber": 40
  },
  {
    "__docId__": 470,
    "kind": "testFile",
    "name": "test/toPromise.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Completable from '../src/completable';\n\n/**\n *\n */\ndescribe('#toPromise', () => {\n  /**\n   *\n   */\n  it('should create a Promise', () => {\n    const completable = Completable.complete().toPromise();\n    assert(completable instanceof Promise);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-completable/test/toPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "describe204",
    "testId": 204,
    "memberof": "test/toPromise.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/toPromise.js~describe204",
    "access": "public",
    "description": "#toPromise",
    "lineNumber": 8
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "test/toPromise.js~describe204",
    "testDepth": 1,
    "static": true,
    "longname": "test/toPromise.js~describe204.it205",
    "access": "public",
    "description": "should create a Promise",
    "lineNumber": 12
  }
]