[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/emitter.js",
    "content": "import { Cancellable, BooleanCancellable } from 'rx-cancellable';\n\n/**\n * @ignore\n */\nconst LINK = new WeakMap();\n/**\n * Abstraction over a MaybeObserver that allows associating\n * a resource with it.\n *\n * Calling onSuccess(Object) multiple times has no effect.\n * Calling onComplete() multiple times has no effect.\n * Calling onError(Error) multiple times has no effect.\n */\n// eslint-disable-next-line no-unused-vars\nexport default class MaybeEmitter extends Cancellable {\n  constructor(success, complete, error) {\n    super();\n    /**\n     * @ignore\n     */\n    this.success = success;\n    /**\n     * @ignore\n     */\n    this.complete = complete;\n    /**\n     * @ignore\n     */\n    this.error = error;\n\n    LINK.set(this, new BooleanCancellable());\n  }\n\n  /**\n   * Returns true if the emitter is cancelled.\n   * @returns {boolean}\n   */\n  get cancelled() {\n    return LINK.get(this).cancelled;\n  }\n\n  /**\n   * Returns true if the emitter is cancelled successfully.\n   * @returns {boolean}\n   */\n  cancel() {\n    return LINK.get(this).cancel();\n  }\n\n  /**\n   * Set the given Cancellable as the Emitter's cancellable state.\n   * @param {Cancellable} cancellable\n   * The Cancellable instance\n   * @returns {boolean}\n   * Returns true if the cancellable is valid.\n   */\n  setCancellable(cancellable) {\n    if (cancellable instanceof Cancellable) {\n      if (this.cancelled) {\n        cancellable.cancel();\n      } else if (cancellable.cancelled) {\n        this.cancel();\n        return true;\n      } else {\n        const link = LINK.get(this);\n        LINK.set(this, cancellable);\n        link.cancel();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Emits a completion.\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onComplete() {\n    if (this.cancelled) {\n      return;\n    }\n    try {\n      this.complete();\n    } finally {\n      this.cancel();\n    }\n  }\n\n  /**\n   * Emits a success value.\n   * @param {!any} value\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onSuccess(value) {\n    if (this.cancelled) {\n      return;\n    }\n    try {\n      if (typeof value === 'undefined') {\n        this.error(new Error('onSuccess called with a null value.'));\n      } else {\n        this.success(value);\n      }\n    } finally {\n      this.cancel();\n    }\n  }\n\n  /**\n   * Emits an error value.\n   * @param {!Error} err\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onError(err) {\n    let report = err;\n    if (!(err instanceof Error)) {\n      report = new Error('onError called with a non-Error value.');\n    }\n    if (this.cancelled) {\n      return;\n    }\n    try {\n      this.error(report);\n    } finally {\n      this.cancel();\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/emitter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "LINK",
    "memberof": "src/emitter.js",
    "static": true,
    "longname": "src/emitter.js~LINK",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/emitter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "MaybeEmitter",
    "memberof": "src/emitter.js",
    "static": true,
    "longname": "src/emitter.js~MaybeEmitter",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/emitter.js",
    "importStyle": "MaybeEmitter",
    "description": "Abstraction over a MaybeObserver that allows associating\na resource with it.\n\nCalling onSuccess(Object) multiple times has no effect.\nCalling onComplete() multiple times has no effect.\nCalling onError(Error) multiple times has no effect.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "rx-cancellable~Cancellable"
    ]
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/emitter.js~MaybeEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~MaybeEmitter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "success",
    "memberof": "src/emitter.js~MaybeEmitter",
    "static": false,
    "longname": "src/emitter.js~MaybeEmitter#success",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "complete",
    "memberof": "src/emitter.js~MaybeEmitter",
    "static": false,
    "longname": "src/emitter.js~MaybeEmitter#complete",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "error",
    "memberof": "src/emitter.js~MaybeEmitter",
    "static": false,
    "longname": "src/emitter.js~MaybeEmitter#error",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "get",
    "name": "cancelled",
    "memberof": "src/emitter.js~MaybeEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~MaybeEmitter#cancelled",
    "access": "public",
    "description": "Returns true if the emitter is cancelled.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "cancel",
    "memberof": "src/emitter.js~MaybeEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~MaybeEmitter#cancel",
    "access": "public",
    "description": "Returns true if the emitter is cancelled successfully.",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "setCancellable",
    "memberof": "src/emitter.js~MaybeEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~MaybeEmitter#setCancellable",
    "access": "public",
    "description": "Set the given Cancellable as the Emitter's cancellable state.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}\nReturns true if the cancellable is valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Cancellable"
        ],
        "spread": false,
        "optional": false,
        "name": "cancellable",
        "description": "The Cancellable instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the cancellable is valid."
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "onComplete",
    "memberof": "src/emitter.js~MaybeEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~MaybeEmitter#onComplete",
    "access": "public",
    "description": "Emits a completion.",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "onSuccess",
    "memberof": "src/emitter.js~MaybeEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~MaybeEmitter#onSuccess",
    "access": "public",
    "description": "Emits a success value.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "onError",
    "memberof": "src/emitter.js~MaybeEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~MaybeEmitter#onError",
    "access": "public",
    "description": "Emits an error value.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": false,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/index.js",
    "content": "/* eslint-disable no-unused-vars */\nimport Maybe from './maybe';\nimport Emitter from './emitter';\nimport Observer from './observer';\n\nexport default Maybe;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/internal/operators/amb.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport { CompositeCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { isIterable, cleanObserver } from '../utils';\nimport error from './error';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const controller = new CompositeCancellable();\n\n  onSubscribe(controller);\n\n  const { sources } = this;\n\n  for (const maybe of sources) {\n    if (maybe instanceof Maybe) {\n      maybe.subscribeWith({\n        onSubscribe(ac) {\n          controller.add(ac);\n        },\n        onComplete() {\n          onComplete();\n          controller.cancel();\n        },\n        onSuccess(x) {\n          onSuccess(x);\n          controller.cancel();\n        },\n        onError(x) {\n          onError(x);\n          controller.cancel();\n        },\n      });\n    } else {\n      onError(new Error('Maybe.amb: One of the sources is a non-Maybe.'));\n      controller.cancel();\n      break;\n    }\n  }\n}\n/**\n * @ignore\n */\nexport default (sources) => {\n  if (!isIterable(sources)) {\n    return error(new Error('Maybe.amb: sources is not Iterable.'));\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.sources = sources;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/amb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/amb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/amb.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/amb.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "amb",
    "memberof": "src/internal/operators/amb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/amb.js~amb",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/amb.js",
    "importStyle": "amb",
    "description": "",
    "lineNumber": 50,
    "ignore": true,
    "params": [
      {
        "name": "sources",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/internal/operators/ambWith.js",
    "content": "import Maybe from '../../maybe';\nimport amb from './amb';\n/**\n * @ignore\n */\nexport default (source, other) => {\n  if (!(other instanceof Maybe)) {\n    return source;\n  }\n  return amb([source, other]);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/ambWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "ambWith",
    "memberof": "src/internal/operators/ambWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/ambWith.js~ambWith",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/ambWith.js",
    "importStyle": "ambWith",
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/internal/operators/cache.js",
    "content": "import { BooleanCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const {\n    source, cached, observers, subscribed,\n  } = this;\n\n  if (!cached) {\n    const index = observers.length;\n    observers[index] = observer;\n\n    const controller = new BooleanCancellable();\n\n    controller.addEventListener('cancel', () => {\n      observers.splice(index, 1);\n    });\n\n    onSubscribe(controller);\n\n    if (!subscribed) {\n      source.subscribeWith({\n        onSubscribe() {\n          // not applicable\n        },\n        onSuccess: (x) => {\n          this.cached = true;\n          this.value = x;\n\n          // eslint-disable-next-line no-restricted-syntax\n          for (const obs of observers) {\n            obs.onSuccess(x);\n          }\n          controller.cancel();\n          this.observers = undefined;\n        },\n        onComplete: () => {\n          this.cached = true;\n\n          // eslint-disable-next-line no-restricted-syntax\n          for (const obs of observers) {\n            obs.onComplete();\n          }\n          controller.cancel();\n          this.observers = undefined;\n        },\n        onError: (x) => {\n          this.cached = true;\n          this.error = x;\n\n          // eslint-disable-next-line no-restricted-syntax\n          for (const obs of observers) {\n            obs.onError(x);\n          }\n          this.observers = undefined;\n        },\n      });\n      this.subscribed = true;\n    }\n  } else {\n    const controller = new BooleanCancellable();\n    onSubscribe(controller);\n\n    const { value, error } = this;\n    if (value != null) {\n      onSuccess(value);\n    } else if (error != null) {\n      onError(error);\n    } else {\n      onComplete();\n    }\n    controller.cancel();\n  }\n}\n\n/**\n * @ignore\n */\nexport default (source) => {\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.cached = false;\n  maybe.subscribed = false;\n  maybe.observers = [];\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/cache.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/cache.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/cache.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "cache",
    "memberof": "src/internal/operators/cache.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/cache.js~cache",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/cache.js",
    "importStyle": "cache",
    "description": "",
    "lineNumber": 87,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/internal/operators/compose.js",
    "content": "import Maybe from '../../maybe';\nimport error from './error';\nimport { isFunction } from '../utils';\n\n/**\n * @ignore\n */\nexport default (source, transformer) => {\n  if (!isFunction(transformer)) {\n    return source;\n  }\n\n  let result;\n\n  try {\n    result = transformer(source);\n\n    if (!(result instanceof Maybe)) {\n      throw new Error('Maybe.compose: transformer returned a non-Maybe.');\n    }\n  } catch (e) {\n    result = error(e);\n  }\n\n  return result;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/compose.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "compose",
    "memberof": "src/internal/operators/compose.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/compose.js~compose",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/compose.js",
    "importStyle": "compose",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "transformer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/internal/operators/create.js",
    "content": "import { cleanObserver } from '../utils';\nimport Maybe from '../../maybe';\nimport error from './error';\nimport MaybeEmitter from '../../emitter';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const emitter = new MaybeEmitter(onSuccess, onComplete, onError);\n\n  onSubscribe(emitter);\n\n  try {\n    this.subscriber(emitter);\n  } catch (ex) {\n    emitter.onError(ex);\n  }\n}\n/**\n * @ignore\n */\nexport default (subscriber) => {\n  if (typeof subscriber !== 'function') {\n    return error(new Error('Maybe.create: There are no subscribers.'));\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.subscriber = subscriber;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/create.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/create.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/create.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "create",
    "memberof": "src/internal/operators/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/create.js~create",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/create.js",
    "importStyle": "create",
    "description": "",
    "lineNumber": 27,
    "ignore": true,
    "params": [
      {
        "name": "subscriber",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/internal/operators/defaultIfEmpty.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport { cleanObserver } from '../utils';\nimport Maybe from '../../maybe';\n\nfunction subscribeActual(observer) {\n  const {\n    onSubscribe, onSuccess, onError,\n  } = cleanObserver(observer);\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  const { source, value } = this;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onComplete() {\n      onSuccess(value);\n    },\n    onSuccess,\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, value) => {\n  if (value == null) {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.value = value;\n\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/defaultIfEmpty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/defaultIfEmpty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/defaultIfEmpty.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/defaultIfEmpty.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "defaultIfEmpty",
    "memberof": "src/internal/operators/defaultIfEmpty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/defaultIfEmpty.js~defaultIfEmpty",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/defaultIfEmpty.js",
    "importStyle": "defaultIfEmpty",
    "description": "",
    "lineNumber": 31,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/internal/operators/defer.js",
    "content": "import Maybe from '../../maybe';\nimport { immediateError, cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  let result;\n\n  let err;\n  try {\n    result = this.supplier();\n    if (!(result instanceof Maybe)) {\n      throw new Error('Maybe.defer: supplier returned a non-Maybe.');\n    }\n  } catch (e) {\n    err = e;\n  }\n\n  if (err != null) {\n    immediateError(observer, err);\n  } else {\n    result.subscribeWith({\n      onSubscribe,\n      onComplete,\n      onSuccess,\n      onError,\n    });\n  }\n}\n/**\n * @ignore\n */\nexport default (supplier) => {\n  const maybe = new Maybe(subscribeActual);\n  maybe.supplier = supplier;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/defer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/defer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/defer.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/defer.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "defer",
    "memberof": "src/internal/operators/defer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/defer.js~defer",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/defer.js",
    "importStyle": "defer",
    "description": "",
    "lineNumber": 38,
    "ignore": true,
    "params": [
      {
        "name": "supplier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/internal/operators/delay.js",
    "content": "import Scheduler from 'rx-scheduler';\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver, isNumber } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { amount, scheduler, doDelayError } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  this.source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onSuccess(x) {\n      controller.link(scheduler.delay(() => {\n        onSuccess(x);\n      }, amount));\n    },\n    onComplete() {\n      controller.link(scheduler.delay(onComplete, amount));\n    },\n    onError(x) {\n      controller.link(scheduler.delay(() => {\n        onError(x);\n      }, doDelayError ? amount : 0));\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, amount, scheduler, doDelayError) => {\n  if (!isNumber(amount)) {\n    return source;\n  }\n  let sched = scheduler;\n  if (!(sched instanceof Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.amount = amount;\n  maybe.scheduler = sched;\n  maybe.doDelayError = doDelayError;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/delay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/delay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delay.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/delay.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "delay",
    "memberof": "src/internal/operators/delay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delay.js~delay",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/delay.js",
    "importStyle": "delay",
    "description": "",
    "lineNumber": 42,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      },
      {
        "name": "doDelayError",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/internal/operators/delaySubscription.js",
    "content": "import Scheduler from 'rx-scheduler';\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver, isNumber } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { amount, scheduler } = this;\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  controller.link(scheduler.delay(() => {\n    controller.unlink();\n    this.source.subscribeWith({\n      onSubscribe(ac) {\n        controller.link(ac);\n      },\n      onComplete,\n      onSuccess,\n      onError,\n    });\n  }, amount));\n}\n/**\n * @ignore\n */\nexport default (source, amount, scheduler) => {\n  if (!isNumber(amount)) {\n    return source;\n  }\n  let sched = scheduler;\n  if (!(sched instanceof Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.amount = amount;\n  maybe.scheduler = sched;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/delaySubscription.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/delaySubscription.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delaySubscription.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/delaySubscription.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "delaySubscription",
    "memberof": "src/internal/operators/delaySubscription.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delaySubscription.js~delaySubscription",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/delaySubscription.js",
    "importStyle": "delaySubscription",
    "description": "",
    "lineNumber": 34,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/internal/operators/delayUntil.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, other } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  const success = () => {\n    controller.unlink();\n    source.subscribeWith({\n      onSubscribe(ac) {\n        controller.link(ac);\n      },\n      onComplete,\n      onSuccess,\n      onError,\n    });\n  };\n\n  other.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onComplete: success,\n    onSuccess: success,\n    onError,\n  });\n}\n/**\n * @ignore\n */\nexport default (source, other) => {\n  if (!(other instanceof Maybe)) {\n    return source;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.other = other;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/delayUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/delayUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delayUntil.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/delayUntil.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "delayUntil",
    "memberof": "src/internal/operators/delayUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delayUntil.js~delayUntil",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/delayUntil.js",
    "importStyle": "delayUntil",
    "description": "",
    "lineNumber": 43,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/internal/operators/doAfterSuccess.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onSuccess(x) {\n      onSuccess(x);\n      callable(x);\n    },\n    onComplete,\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/doAfterSuccess.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doAfterSuccess.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doAfterSuccess.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/doAfterSuccess.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "doAfterSuccess",
    "memberof": "src/internal/operators/doAfterSuccess.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doAfterSuccess.js~doAfterSuccess",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/doAfterSuccess.js",
    "importStyle": "doAfterSuccess",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/internal/operators/doAfterTerminate.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onSuccess(x) {\n      onSuccess(x);\n      callable();\n    },\n    onComplete() {\n      onComplete();\n      callable();\n    },\n    onError(x) {\n      onError(x);\n      callable();\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/doAfterTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doAfterTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doAfterTerminate.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/doAfterTerminate.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "doAfterTerminate",
    "memberof": "src/internal/operators/doAfterTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doAfterTerminate.js~doAfterTerminate",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/doAfterTerminate.js",
    "importStyle": "doAfterTerminate",
    "description": "",
    "lineNumber": 34,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/internal/operators/doFinally.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  let called = false;\n  source.subscribeWith({\n    onSubscribe(ac) {\n      ac.addEventListener('cancel', () => {\n        if (!called) {\n          callable();\n          called = true;\n        }\n      });\n      onSubscribe(ac);\n    },\n    onComplete() {\n      onComplete();\n      if (!called) {\n        callable();\n        called = true;\n      }\n    },\n    onSuccess(x) {\n      onSuccess(x);\n      if (!called) {\n        callable();\n        called = true;\n      }\n    },\n    onError(x) {\n      onError(x);\n      if (!called) {\n        callable();\n        called = true;\n      }\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/doFinally.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doFinally.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doFinally.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/doFinally.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "doFinally",
    "memberof": "src/internal/operators/doFinally.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doFinally.js~doFinally",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/doFinally.js",
    "importStyle": "doFinally",
    "description": "",
    "lineNumber": 52,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/internal/operators/doOnCancel.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      ac.addEventListener('cancel', callable);\n      onSubscribe(ac);\n    },\n    onComplete,\n    onSuccess,\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/doOnCancel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnCancel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnCancel.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/doOnCancel.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "doOnCancel",
    "memberof": "src/internal/operators/doOnCancel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnCancel.js~doOnCancel",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/doOnCancel.js",
    "importStyle": "doOnCancel",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/internal/operators/doOnComplete.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete() {\n      callable();\n      onComplete();\n    },\n    onSuccess,\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/doOnComplete.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnComplete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnComplete.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/doOnComplete.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "doOnComplete",
    "memberof": "src/internal/operators/doOnComplete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnComplete.js~doOnComplete",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/doOnComplete.js",
    "importStyle": "doOnComplete",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/internal/operators/doOnError.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete,\n    onSuccess,\n    onError(x) {\n      callable(x);\n      onError(x);\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/doOnError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnError.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/doOnError.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "doOnError",
    "memberof": "src/internal/operators/doOnError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnError.js~doOnError",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/doOnError.js",
    "importStyle": "doOnError",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/internal/operators/doOnEvent.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete() {\n      callable();\n      onComplete();\n    },\n    onSuccess(x) {\n      callable(x);\n      onSuccess(x);\n    },\n    onError(x) {\n      callable(undefined, x);\n      onError(x);\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/doOnEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnEvent.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnEvent.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/doOnEvent.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "doOnEvent",
    "memberof": "src/internal/operators/doOnEvent.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnEvent.js~doOnEvent",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/doOnEvent.js",
    "importStyle": "doOnEvent",
    "description": "",
    "lineNumber": 34,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/internal/operators/doOnSubscribe.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe(d) {\n      callable(d);\n      onSubscribe(d);\n    },\n    onSuccess,\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/doOnSubscribe.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnSubscribe.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnSubscribe.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/doOnSubscribe.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "doOnSubscribe",
    "memberof": "src/internal/operators/doOnSubscribe.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnSubscribe.js~doOnSubscribe",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/doOnSubscribe.js",
    "importStyle": "doOnSubscribe",
    "description": "",
    "lineNumber": 27,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/internal/operators/doOnSuccess.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete,\n    onSuccess(x) {\n      callable(x);\n      onSuccess(x);\n    },\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/doOnSuccess.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnSuccess.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnSuccess.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/doOnSuccess.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "doOnSuccess",
    "memberof": "src/internal/operators/doOnSuccess.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnSuccess.js~doOnSuccess",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/doOnSuccess.js",
    "importStyle": "doOnSuccess",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/internal/operators/doOnTerminate.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete() {\n      callable();\n      onComplete();\n    },\n    onSuccess(x) {\n      callable();\n      onSuccess(x);\n    },\n    onError(x) {\n      callable();\n      onError(x);\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/doOnTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnTerminate.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/doOnTerminate.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "doOnTerminate",
    "memberof": "src/internal/operators/doOnTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnTerminate.js~doOnTerminate",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/doOnTerminate.js",
    "importStyle": "doOnTerminate",
    "description": "",
    "lineNumber": 34,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/internal/operators/empty.js",
    "content": "import Maybe from '../../maybe';\nimport { immediateComplete } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  immediateComplete(observer);\n}\n\nlet INSTANCE;\n/**\n * @ignore\n */\nexport default () => {\n  if (typeof INSTANCE === 'undefined') {\n    INSTANCE = new Maybe(subscribeActual);\n  }\n  return INSTANCE;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/empty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/empty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/empty.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/empty.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "empty",
    "memberof": "src/internal/operators/empty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/empty.js~empty",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/empty.js",
    "importStyle": "empty",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/internal/operators/error.js",
    "content": "import { toCallable, immediateError, isFunction } from '../utils';\nimport Maybe from '../../maybe';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  let err;\n\n  try {\n    err = this.supplier();\n\n    if (err == null) {\n      throw new Error('Maybe.error: Error supplier returned a null value.');\n    }\n  } catch (e) {\n    err = e;\n  }\n  immediateError(observer, err);\n}\n/**\n * @ignore\n */\nexport default (value) => {\n  let report = value;\n\n  if (!(value instanceof Error || isFunction(value))) {\n    report = new Error('Maybe.error received a non-Error value.');\n  }\n\n  if (!isFunction(value)) {\n    report = toCallable(report);\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.supplier = report;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/error.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/error.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "error",
    "memberof": "src/internal/operators/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/error.js~error",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/error.js",
    "importStyle": "error",
    "description": "",
    "lineNumber": 24,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/internal/operators/filter.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSubscribe, onSuccess, onComplete, onError,\n  } = cleanObserver(observer);\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  const { source, predicate } = this;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onComplete,\n    onSuccess(x) {\n      let result;\n\n      try {\n        result = predicate(x);\n      } catch (e) {\n        onError(e);\n        controller.cancel();\n        return;\n      }\n\n      if (result) {\n        onSuccess(x);\n      } else {\n        onComplete();\n      }\n      controller.cancel();\n    },\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, predicate) => {\n  if (!isFunction(predicate)) {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.predicate = predicate;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/filter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/filter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/filter.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/filter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "filter",
    "memberof": "src/internal/operators/filter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/filter.js~filter",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/filter.js",
    "importStyle": "filter",
    "description": "",
    "lineNumber": 49,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/internal/operators/flatMap.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSubscribe, onComplete, onError, onSuccess,\n  } = cleanObserver(observer);\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  const { mapper, source } = this;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onComplete,\n    onSuccess(x) {\n      controller.unlink();\n      let result;\n      try {\n        result = mapper(x);\n\n        if (!(result instanceof Maybe)) {\n          throw new Error('Maybe.flatMap: mapper returned a non-Maybe');\n        }\n      } catch (e) {\n        onError(e);\n        return;\n      }\n      result.subscribeWith({\n        onSubscribe(ac) {\n          controller.link(ac);\n        },\n        onComplete,\n        onSuccess,\n        onError,\n      });\n    },\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, mapper) => {\n  if (!isFunction(mapper)) {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.mapper = mapper;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/flatMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/flatMap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/flatMap.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/flatMap.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "flatMap",
    "memberof": "src/internal/operators/flatMap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/flatMap.js~flatMap",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/flatMap.js",
    "importStyle": "flatMap",
    "description": "",
    "lineNumber": 53,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "src/internal/operators/fromCallable.js",
    "content": "import Maybe from '../../maybe';\nimport MaybeEmitter from '../../emitter';\nimport error from './error';\nimport fromPromise from './fromPromise';\nimport {\n  isPromise, cleanObserver, isFunction,\n} from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const emitter = new MaybeEmitter(onSuccess, onComplete, onError);\n\n  onSubscribe(emitter);\n\n  let result;\n  try {\n    result = this.callable();\n  } catch (e) {\n    emitter.onError(e);\n    return;\n  }\n\n  if (isPromise(result)) {\n    fromPromise(result).subscribeWith({\n      onSubscribe(ac) {\n        emitter.setCancellable(ac);\n      },\n      onComplete() {\n        emitter.onComplete();\n      },\n      onSuccess(x) {\n        emitter.onSuccess(x);\n      },\n      onError(e) {\n        emitter.onError(e);\n      },\n    });\n  } else if (result == null) {\n    emitter.onComplete();\n  } else {\n    emitter.onSuccess(result);\n  }\n}\n/**\n * @ignore\n */\nexport default (callable) => {\n  if (!isFunction(callable)) {\n    return error(new Error('Maybe.fromCallable: callable received is not a function.'));\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.callable = callable;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/fromCallable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/fromCallable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromCallable.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/fromCallable.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "fromCallable",
    "memberof": "src/internal/operators/fromCallable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromCallable.js~fromCallable",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/fromCallable.js",
    "importStyle": "fromCallable",
    "description": "",
    "lineNumber": 53,
    "ignore": true,
    "params": [
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/internal/operators/fromPromise.js",
    "content": "import Maybe from '../../maybe';\nimport {\n  isPromise, cleanObserver,\n} from '../utils';\nimport error from './error';\nimport MaybeEmitter from '../../emitter';\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const emitter = new MaybeEmitter(onSuccess, onComplete, onError);\n\n  onSubscribe(emitter);\n\n  this.promise.then(\n    x => (x == null ? emitter.onComplete() : emitter.onSuccess(x)),\n    x => emitter.onError(x),\n  );\n}\n/**\n * @ignore\n */\nexport default (promise) => {\n  if (!isPromise(promise)) {\n    return error(new Error('Maybe.fromPromise: expects a Promise-like value.'));\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.promise = promise;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/fromPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/fromPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromPromise.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/fromPromise.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "fromPromise",
    "memberof": "src/internal/operators/fromPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromPromise.js~fromPromise",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/fromPromise.js",
    "importStyle": "fromPromise",
    "description": "",
    "lineNumber": 27,
    "ignore": true,
    "params": [
      {
        "name": "promise",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "src/internal/operators/fromResolvable.js",
    "content": "import {\n  cleanObserver, isFunction,\n} from '../utils';\nimport Maybe from '../../maybe';\nimport error from './error';\nimport MaybeEmitter from '../../emitter';\n\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const emitter = new MaybeEmitter(onSuccess, onComplete, onError);\n\n  onSubscribe(emitter);\n\n  this.subscriber(\n    x => (x == null ? emitter.onComplete() : emitter.onSuccess(x)),\n    x => emitter.onError(x),\n  );\n}\n/**\n * @ignore\n */\nexport default (subscriber) => {\n  if (!isFunction(subscriber)) {\n    return error(new Error('Maybe.fromResolvable: expects a function.'));\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.subscriber = subscriber;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/fromResolvable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/fromResolvable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromResolvable.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/fromResolvable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "fromResolvable",
    "memberof": "src/internal/operators/fromResolvable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromResolvable.js~fromResolvable",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/fromResolvable.js",
    "importStyle": "fromResolvable",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "subscriber",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/internal/operators/just.js",
    "content": "import Maybe from '../../maybe';\nimport error from './error';\nimport { immediateSuccess } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  immediateSuccess(observer, this.value);\n}\n/**\n * @ignore\n */\nexport default (value) => {\n  if (value == null) {\n    return error(new Error('Maybe.just: received a null value.'));\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.value = value;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/just.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/just.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/just.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/just.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "just",
    "memberof": "src/internal/operators/just.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/just.js~just",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/just.js",
    "importStyle": "just",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/internal/operators/lift.js",
    "content": "import Maybe from '../../maybe';\nimport { isObserver, immediateError } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  let result;\n\n  try {\n    result = this.operator(observer);\n\n    if (!isObserver(result)) {\n      throw new Error('Maybe.lift: operator returned a non-Observer.');\n    }\n  } catch (e) {\n    immediateError(observer, e);\n    return;\n  }\n\n  this.source.subscribeWith(result);\n}\n\n/**\n * @ignore\n */\nexport default (source, operator) => {\n  if (typeof operator !== 'function') {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.operator = operator;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/lift.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/lift.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/lift.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/lift.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "lift",
    "memberof": "src/internal/operators/lift.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/lift.js~lift",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/lift.js",
    "importStyle": "lift",
    "description": "",
    "lineNumber": 27,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "operator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/internal/operators/map.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nconst defaultMapper = x => x;\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { mapper } = this;\n\n  this.source.subscribeWith({\n    onSubscribe,\n    onSuccess(x) {\n      let result;\n      try {\n        result = mapper(x);\n        if (result == null) {\n          throw new Error('Maybe.map: mapper function returned a null value.');\n        }\n      } catch (e) {\n        onError(e);\n        return;\n      }\n      onSuccess(result);\n    },\n    onComplete,\n    onError,\n  });\n}\n/**\n * @ignore\n */\nexport default (source, mapper) => {\n  let ms = mapper;\n  if (!isFunction(mapper)) {\n    ms = defaultMapper;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.mapper = ms;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "defaultMapper",
    "memberof": "src/internal/operators/map.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/map.js~defaultMapper",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/map.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/map.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/map.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/map.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "map",
    "memberof": "src/internal/operators/map.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/map.js~map",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/map.js",
    "importStyle": "map",
    "description": "",
    "lineNumber": 41,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/internal/operators/merge.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport error from './error';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSubscribe, onComplete, onError, onSuccess,\n  } = cleanObserver(observer);\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  this.source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onComplete,\n    onSuccess(x) {\n      controller.unlink();\n      let result = x;\n      if (!(x instanceof Maybe)) {\n        result = error(new Error('Maybe.merge: source emitted a non-Maybe value.'));\n      }\n      result.subscribeWith({\n        onSubscribe(ac) {\n          controller.link(ac);\n        },\n        onComplete,\n        onSuccess,\n        onError,\n      });\n    },\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source) => {\n  if (!(source instanceof Maybe)) {\n    return error(new Error('Maybe.merge: source is not a Maybe.'));\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/merge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/merge.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/merge.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/merge.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "merge",
    "memberof": "src/internal/operators/merge.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/merge.js~merge",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/merge.js",
    "importStyle": "merge",
    "description": "",
    "lineNumber": 45,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/internal/operators/never.js",
    "content": "/* eslint-disable class-methods-use-this */\nimport { UNCANCELLED } from 'rx-cancellable';\nimport Maybe from '../../maybe';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  observer.onSubscribe(UNCANCELLED);\n}\n/**\n * @ignore\n */\nlet INSTANCE;\n/**\n * @ignore\n */\nexport default () => {\n  if (typeof INSTANCE === 'undefined') {\n    INSTANCE = new Maybe(subscribeActual);\n  }\n  return INSTANCE;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/never.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/never.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/never.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/never.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "never",
    "memberof": "src/internal/operators/never.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/never.js~never",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/never.js",
    "importStyle": "never",
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/internal/operators/observeOn.js",
    "content": "import Scheduler from 'rx-scheduler';\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver } from '../utils';\n\nfunction subscribeActual(observer) {\n  const {\n    onSubscribe, onSuccess, onComplete, onError,\n  } = cleanObserver(observer);\n\n  const { source, scheduler } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onSuccess(x) {\n      controller.link(scheduler.schedule(() => {\n        onSuccess(x);\n      }));\n    },\n    onComplete() {\n      controller.link(scheduler.schedule(onComplete));\n    },\n    onError(x) {\n      controller.link(scheduler.schedule(() => {\n        onError(x);\n      }));\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, scheduler) => {\n  let sched = scheduler;\n  if (!(sched instanceof Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.scheduler = sched;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/observeOn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/observeOn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/observeOn.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/observeOn.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "observeOn",
    "memberof": "src/internal/operators/observeOn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/observeOn.js~observeOn",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/observeOn.js",
    "importStyle": "observeOn",
    "description": "",
    "lineNumber": 39,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/internal/operators/onErrorComplete.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, item } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete,\n    onSuccess,\n    onError(x) {\n      let result;\n      try {\n        result = item(x);\n      } catch (e) {\n        onError([x, e]);\n        return;\n      }\n      if (result) {\n        onComplete();\n      } else {\n        onError(x);\n      }\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, item) => {\n  if (!isFunction(item)) {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.item = item;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/onErrorComplete.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/onErrorComplete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorComplete.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/onErrorComplete.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "onErrorComplete",
    "memberof": "src/internal/operators/onErrorComplete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorComplete.js~onErrorComplete",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/onErrorComplete.js",
    "importStyle": "onErrorComplete",
    "description": "",
    "lineNumber": 34,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/internal/operators/onErrorResumeNext.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, resumeIfError } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onComplete,\n    onSuccess,\n    onError(x) {\n      controller.unlink();\n      let result;\n\n      if (isFunction(resumeIfError)) {\n        try {\n          result = resumeIfError(x);\n          if (result == null) {\n            throw new Error('Maybe.onErrorResumeNext: returned an non-Maybe.');\n          }\n        } catch (e) {\n          onError(new Error([x, e]));\n          return;\n        }\n      } else {\n        result = resumeIfError;\n      }\n\n      result.subscribeWith({\n        onSubscribe(ac) {\n          controller.link(ac);\n        },\n        onComplete,\n        onSuccess,\n        onError,\n      });\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, resumeIfError) => {\n  if (!(isFunction(resumeIfError) || resumeIfError instanceof Maybe)) {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.resumeIfError = resumeIfError;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/onErrorResumeNext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/onErrorResumeNext.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorResumeNext.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/onErrorResumeNext.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "onErrorResumeNext",
    "memberof": "src/internal/operators/onErrorResumeNext.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorResumeNext.js~onErrorResumeNext",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/onErrorResumeNext.js",
    "importStyle": "onErrorResumeNext",
    "description": "",
    "lineNumber": 54,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "resumeIfError",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/internal/operators/onErrorReturn.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { source, item } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete,\n    onSuccess,\n    onError(x) {\n      let result;\n\n      try {\n        result = item(x);\n      } catch (e) {\n        onError([x, e]);\n        return;\n      }\n      if (result == null) {\n        onComplete();\n      } else {\n        onSuccess(result);\n      }\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, item) => {\n  if (!isFunction(item)) {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.item = item;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/onErrorReturn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/onErrorReturn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorReturn.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/onErrorReturn.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "onErrorReturn",
    "memberof": "src/internal/operators/onErrorReturn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorReturn.js~onErrorReturn",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/onErrorReturn.js",
    "importStyle": "onErrorReturn",
    "description": "",
    "lineNumber": 35,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "src/internal/operators/onErrorReturnItem.js",
    "content": "import Maybe from '../../maybe';\nimport { cleanObserver } from '../utils';\n\nfunction subscribeActual(observer) {\n  const { onSuccess, onComplete, onSubscribe } = cleanObserver(observer);\n\n  const { source, item } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onComplete,\n    onSuccess,\n    onError() {\n      onSuccess(item);\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, item) => {\n  if (item == null) {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.item = item;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/onErrorReturnItem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/onErrorReturnItem.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorReturnItem.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/onErrorReturnItem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "onErrorReturnItem",
    "memberof": "src/internal/operators/onErrorReturnItem.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorReturnItem.js~onErrorReturnItem",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/onErrorReturnItem.js",
    "importStyle": "onErrorReturnItem",
    "description": "",
    "lineNumber": 21,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/internal/operators/retry.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSubscribe, onComplete, onSuccess, onError,\n  } = cleanObserver(observer);\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  const { source, bipredicate } = this;\n\n  let retries = -1;\n\n  const sub = () => {\n    controller.unlink();\n    retries += 1;\n\n    source.subscribeWith({\n      onSubscribe(ac) {\n        controller.link(ac);\n      },\n      onComplete,\n      onSuccess,\n      onError(x) {\n        if (isFunction(bipredicate)) {\n          const result = bipredicate(retries, x);\n\n          if (result) {\n            sub();\n          } else {\n            onError(x);\n            controller.cancel();\n          }\n        } else {\n          sub();\n        }\n      },\n    });\n  };\n\n  sub();\n}\n\n/**\n * @ignore\n */\nexport default (source, bipredicate) => {\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.bipredicate = bipredicate;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/retry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/retry.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/retry.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "retry",
    "memberof": "src/internal/operators/retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/retry.js~retry",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/retry.js",
    "importStyle": "retry",
    "description": "",
    "lineNumber": 54,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "bipredicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/internal/operators/subscribeOn.js",
    "content": "import Scheduler from 'rx-scheduler';\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver } from '../utils';\n\nfunction subscribeActual(observer) {\n  const {\n    onSubscribe, onSuccess, onComplete, onError,\n  } = cleanObserver(observer);\n\n  const { source, scheduler } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  controller.link(scheduler.schedule(() => {\n    controller.unlink();\n    source.subscribeWith({\n      onSubscribe(ac) {\n        controller.link(ac);\n      },\n      onComplete,\n      onSuccess,\n      onError,\n    });\n  }));\n}\n/**\n * @ignore\n */\nexport default (source, scheduler) => {\n  let sched = scheduler;\n  if (!(sched instanceof Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.scheduler = sched;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/subscribeOn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/subscribeOn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/subscribeOn.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/subscribeOn.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "subscribeOn",
    "memberof": "src/internal/operators/subscribeOn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/subscribeOn.js~subscribeOn",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/subscribeOn.js",
    "importStyle": "subscribeOn",
    "description": "",
    "lineNumber": 32,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/internal/operators/switchIfEmpty.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport { cleanObserver } from '../utils';\nimport Maybe from '../../maybe';\n\nfunction subscribeActual(observer) {\n  const {\n    onSubscribe, onSuccess, onComplete, onError,\n  } = cleanObserver(observer);\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  const { source, other } = this;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onComplete() {\n      controller.unlink();\n      other.subscribeWith({\n        onSubscribe(ac) {\n          controller.link(ac);\n        },\n        onComplete,\n        onSuccess,\n        onError,\n      });\n    },\n    onSuccess,\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, other) => {\n  if (!(other instanceof Maybe)) {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.other = other;\n\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/switchIfEmpty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/switchIfEmpty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/switchIfEmpty.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/switchIfEmpty.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "switchIfEmpty",
    "memberof": "src/internal/operators/switchIfEmpty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/switchIfEmpty.js~switchIfEmpty",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/switchIfEmpty.js",
    "importStyle": "switchIfEmpty",
    "description": "",
    "lineNumber": 39,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "src/internal/operators/takeUntil.js",
    "content": "import { CompositeCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSubscribe, onComplete, onSuccess, onError,\n  } = cleanObserver(observer);\n\n  const controller = new CompositeCancellable();\n\n  onSubscribe(controller);\n\n  const { source, other } = this;\n\n  other.subscribeWith({\n    onSubscribe(ac) {\n      controller.add(ac);\n    },\n    onComplete() {\n      onError(new Error('Maybe.takeUntil: Source cancelled by other Maybe.'));\n      controller.cancel();\n    },\n    onSuccess() {\n      onError(new Error('Maybe.takeUntil: Source cancelled by other Maybe.'));\n      controller.cancel();\n    },\n    onError(x) {\n      onError(new Error(['Maybe.takeUntil: Source cancelled by other Maybe.', x]));\n      controller.cancel();\n    },\n  });\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.add(ac);\n    },\n    onComplete() {\n      onComplete();\n      controller.cancel();\n    },\n    onSuccess(x) {\n      onSuccess(x);\n      controller.cancel();\n    },\n    onError(x) {\n      onError(x);\n      controller.cancel();\n    },\n  });\n}\n\n/**\n * @ignore\n */\nconst takeUntil = (source, other) => {\n  if (!(other instanceof Maybe)) {\n    return source;\n  }\n\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.other = other;\n  return maybe;\n};\n\nexport default takeUntil;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/takeUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/takeUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/takeUntil.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/takeUntil.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "takeUntil",
    "memberof": "src/internal/operators/takeUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/takeUntil.js~takeUntil",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/takeUntil.js",
    "importStyle": "takeUntil",
    "description": "",
    "lineNumber": 59,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/internal/operators/timeout.js",
    "content": "import Scheduler from 'rx-scheduler';\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { cleanObserver, isNumber } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const { amount, scheduler } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  const timeout = scheduler.delay(\n    () => {\n      onError(new Error('Maybe.timeout: TimeoutException (no success signals within the specified timeout).'));\n      controller.cancel();\n    },\n    amount,\n  );\n\n  controller.addEventListener('cancel', () => timeout.cancel());\n\n  this.source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onComplete,\n    onSuccess,\n    onError,\n  });\n}\n/**\n * @ignore\n */\nexport default (source, amount, scheduler) => {\n  if (!isNumber(amount)) {\n    return source;\n  }\n  let sched = scheduler;\n  if (!(sched instanceof Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.source = source;\n  maybe.amount = amount;\n  maybe.scheduler = sched;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/timeout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/timeout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timeout.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/timeout.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "timeout",
    "memberof": "src/internal/operators/timeout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timeout.js~timeout",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/timeout.js",
    "importStyle": "timeout",
    "description": "",
    "lineNumber": 42,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "src/internal/operators/timer.js",
    "content": "import Scheduler from 'rx-scheduler';\nimport Maybe from '../../maybe';\nimport { cleanObserver, isNumber } from '../utils';\nimport error from './error';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onSubscribe } = cleanObserver(observer);\n\n  onSubscribe(this.scheduler.delay(() => onSuccess(0), this.amount));\n}\n/**\n * @ignore\n */\nexport default (amount, scheduler) => {\n  if (!isNumber(amount)) {\n    return error(new Error('Maybe.timer: \"amount\" is not a number.'));\n  }\n\n  let sched = scheduler;\n  if (!(sched instanceof Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.amount = amount;\n  maybe.scheduler = sched;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/timer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timer.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/timer.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "timer",
    "memberof": "src/internal/operators/timer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timer.js~timer",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/timer.js",
    "importStyle": "timer",
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/internal/operators/zip.js",
    "content": "/* eslint-disable no-loop-func */\nimport { CompositeCancellable } from 'rx-cancellable';\nimport Maybe from '../../maybe';\nimport { isIterable, cleanObserver, isFunction } from '../utils';\nimport error from './error';\n\nconst defaultZipper = x => x;\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const {\n    onSuccess, onComplete, onError, onSubscribe,\n  } = cleanObserver(observer);\n\n  const result = [];\n\n  const controller = new CompositeCancellable();\n\n  onSubscribe(controller);\n\n  const { sources, zipper } = this;\n\n  const size = sources.length;\n\n  if (size === 0) {\n    onError(new Error('Maybe.zip: empty iterable'));\n    controller.cancel();\n    return;\n  }\n  let pending = size;\n\n  for (let i = 0; i < size; i += 1) {\n    const maybe = sources[i];\n\n    if (maybe instanceof Maybe) {\n      maybe.subscribeWith({\n        onSubscribe(ac) {\n          controller.add(ac);\n        },\n        onComplete() {\n          onComplete();\n          controller.cancel();\n        },\n        onSuccess(x) {\n          result[i] = x;\n          pending -= 1;\n          if (pending === 0) {\n            let r;\n            try {\n              r = zipper(result);\n              if (r == null) {\n                throw new Error('Maybe.zip: zipper function returned a null value.');\n              }\n            } catch (e) {\n              onError(e);\n              controller.cancel();\n              return;\n            }\n            onSuccess(r);\n            controller.cancel();\n          }\n        },\n        onError(x) {\n          onError(x);\n          controller.cancel();\n        },\n      });\n    } else if (maybe != null) {\n      result[i] = maybe;\n      pending -= 1;\n    } else {\n      onError(new Error('Maybe.zip: One of the sources is undefined.'));\n      controller.cancel();\n      break;\n    }\n  }\n}\n/**\n * @ignore\n */\nexport default (sources, zipper) => {\n  if (!isIterable(sources)) {\n    return error(new Error('Maybe.zip: sources is not Iterable.'));\n  }\n  let fn = zipper;\n  if (!isFunction(zipper)) {\n    fn = defaultZipper;\n  }\n  const maybe = new Maybe(subscribeActual);\n  maybe.sources = sources;\n  maybe.zipper = fn;\n  return maybe;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/zip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "defaultZipper",
    "memberof": "src/internal/operators/zip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/zip.js~defaultZipper",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/zip.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/zip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/zip.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/operators/zip.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "zip",
    "memberof": "src/internal/operators/zip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/zip.js~zip",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/zip.js",
    "importStyle": "zip",
    "description": "",
    "lineNumber": 82,
    "ignore": true,
    "params": [
      {
        "name": "sources",
        "types": [
          "*"
        ]
      },
      {
        "name": "zipper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/internal/operators/zipWith.js",
    "content": "import Maybe from '../../maybe';\nimport zip from './zip';\n\n/**\n * @ignore\n */\nexport default (source, other, zipper) => {\n  if (!(other instanceof Maybe)) {\n    return source;\n  }\n  return zip([source, other], zipper);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators/zipWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "zipWith",
    "memberof": "src/internal/operators/zipWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/zipWith.js~zipWith",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/operators/zipWith.js",
    "importStyle": "zipWith",
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      },
      {
        "name": "zipper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/internal/operators.js",
    "content": "/* eslint-disable import/no-cycle */\n/**\n * @ignore\n */\nexport { default as amb } from './operators/amb';\nexport { default as ambWith } from './operators/ambWith';\nexport { default as cache } from './operators/cache';\nexport { default as create } from './operators/create';\nexport { default as compose } from './operators/compose';\nexport { default as defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { default as defer } from './operators/defer';\nexport { default as delay } from './operators/delay';\nexport { default as delaySubscription } from './operators/delaySubscription';\nexport { default as delayUntil } from './operators/delayUntil';\nexport { default as doAfterSuccess } from './operators/doAfterSuccess';\nexport { default as doAfterTerminate } from './operators/doAfterTerminate';\nexport { default as doFinally } from './operators/doFinally';\nexport { default as doOnCancel } from './operators/doOnCancel';\nexport { default as doOnComplete } from './operators/doOnComplete';\nexport { default as doOnError } from './operators/doOnError';\nexport { default as doOnEvent } from './operators/doOnEvent';\nexport { default as doOnSuccess } from './operators/doOnSuccess';\nexport { default as doOnSubscribe } from './operators/doOnSubscribe';\nexport { default as doOnTerminate } from './operators/doOnTerminate';\nexport { default as empty } from './operators/empty';\nexport { default as error } from './operators/error';\nexport { default as filter } from './operators/filter';\nexport { default as flatMap } from './operators/flatMap';\nexport { default as fromCallable } from './operators/fromCallable';\nexport { default as fromPromise } from './operators/fromPromise';\nexport { default as fromResolvable } from './operators/fromResolvable';\nexport { default as just } from './operators/just';\nexport { default as lift } from './operators/lift';\nexport { default as map } from './operators/map';\nexport { default as merge } from './operators/merge';\nexport { default as observeOn } from './operators/observeOn';\nexport { default as onErrorComplete } from './operators/onErrorComplete';\nexport { default as onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { default as onErrorReturn } from './operators/onErrorReturn';\nexport { default as onErrorReturnItem } from './operators/onErrorReturnItem';\nexport { default as never } from './operators/never';\nexport { default as retry } from './operators/retry';\nexport { default as subscribeOn } from './operators/subscribeOn';\nexport { default as switchIfEmpty } from './operators/switchIfEmpty';\nexport { default as takeUntil } from './operators/takeUntil';\nexport { default as timer } from './operators/timer';\nexport { default as timeout } from './operators/timeout';\nexport { default as zip } from './operators/zip';\nexport { default as zipWith } from './operators/zipWith';\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/operators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/internal/utils.js",
    "content": "import { BooleanCancellable } from 'rx-cancellable';\n/**\n * @ignore\n */\n// eslint-disable-next-line valid-typeof\nconst isType = (x, y) => typeof x === y;\n/**\n * @ignore\n */\nexport const isFunction = x => isType(x, 'function');\n/**\n * @ignore\n */\nexport const isNumber = x => isType(x, 'number');\n/**\n * @ignore\n */\nexport const isObject = x => isType(x, 'object');\n/**\n * @ignore\n */\nexport const isIterable = obj => isObject(obj) && isFunction(obj[Symbol.iterator]);\n/**\n * @ignore\n */\nexport const isObserver = obj => isObject(obj) && isFunction(obj.onSubscribe);\n/**\n * @ignore\n */\nexport const toCallable = x => () => x;\n/**\n * @ignore\n */\nexport const isPromise = (obj) => {\n  if (obj == null) return false;\n  if (obj instanceof Promise) return true;\n  return (isObject(obj) || isFunction(obj)) && isFunction(obj.then);\n};\n/**\n * @ignore\n */\nconst identity = x => x;\n/**\n * @ignore\n */\nconst throwError = (x) => { throw x; };\n/**\n * @ignore\n */\nexport const cleanObserver = x => ({\n  onSubscribe: x.onSubscribe,\n  onSuccess: isFunction(x.onSuccess) ? x.onSuccess : identity,\n  onComplete: isFunction(x.onComplete) ? x.onComplete : identity,\n  onError: isFunction(x.onError) ? x.onError : throwError,\n});\n/**\n * @ignore\n */\nexport const immediateSuccess = (o, x) => {\n  // const disposable = new SimpleDisposable();\n  const { onSubscribe, onSuccess } = cleanObserver(o);\n  const controller = new BooleanCancellable();\n  onSubscribe(controller);\n\n  if (!controller.cancelled) {\n    onSuccess(x);\n    controller.cancel();\n  }\n};\n\n/**\n * @ignore\n */\nexport const immediateComplete = (o) => {\n  // const disposable = new SimpleDisposable();\n  const { onSubscribe, onComplete } = cleanObserver(o);\n  const controller = new BooleanCancellable();\n  onSubscribe(controller);\n\n  if (!controller.cancelled) {\n    onComplete();\n    controller.cancel();\n  }\n};\n/**\n * @ignore\n */\nexport const immediateError = (o, x) => {\n  const { onSubscribe, onError } = cleanObserver(o);\n  const controller = new BooleanCancellable();\n  onSubscribe(controller);\n\n  if (!controller.cancelled) {\n    onError(x);\n    controller.cancel();\n  }\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/internal/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "isType",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isType",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{isFunction}",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "isNumber",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isNumber",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{isNumber}",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{isObject}",
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "isIterable",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isIterable",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{isIterable}",
    "description": "",
    "lineNumber": 22,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "isObserver",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isObserver",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{isObserver}",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "toCallable",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~toCallable",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{toCallable}",
    "description": "",
    "lineNumber": 30,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "isPromise",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isPromise",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{isPromise}",
    "description": "",
    "lineNumber": 34,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "identity",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~identity",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 42,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "function",
    "name": "throwError",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~throwError",
    "access": "public",
    "export": false,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 46,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "cleanObserver",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~cleanObserver",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{cleanObserver}",
    "description": "",
    "lineNumber": 50,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "immediateSuccess",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~immediateSuccess",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{immediateSuccess}",
    "description": "",
    "lineNumber": 59,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "immediateComplete",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~immediateComplete",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{immediateComplete}",
    "description": "",
    "lineNumber": 74,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "immediateError",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~immediateError",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/internal/utils.js",
    "importStyle": "{immediateError}",
    "description": "",
    "lineNumber": 88,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "src/maybe.js",
    "content": "/**\n * @license\n * MIT License\n *\n * Copyright (c) 2019 Alexis Munsayac\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n * @author Alexis Munsayac <alexis.munsayac@gmail.com>\n * @copyright Alexis Munsayac 2019\n */\n/**\n * @external {Scheduler} https://lxsmnsyc.github.io/rx-scheduler/\n */\n/**\n * @external {Iterable} https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n */\n/**\n * @external {Thennable} https://promisesaplus.com/\n */\n/**\n * @external {PromiseLike} https://promisesaplus.com/\n */\n/**\n * @external {Cancellable} https://lxsmnsyc.github.io/rx-cancellable/\n */\nimport { LinkedCancellable } from 'rx-cancellable';\nimport { isObserver } from './internal/utils';\nimport {\n  amb, ambWith, cache, compose, create,\n  defer, empty, defaultIfEmpty, delay,\n  delaySubscription, delayUntil, doAfterSuccess,\n  doAfterTerminate, doFinally, doOnCancel,\n  doOnComplete, doOnError, doOnEvent,\n  doOnSubscribe, doOnSuccess, doOnTerminate,\n  error, filter, flatMap, fromCallable,\n  fromPromise, fromResolvable, just,\n  lift, map, merge, never, onErrorComplete,\n  onErrorResumeNext, onErrorReturn,\n  onErrorReturnItem, retry, switchIfEmpty,\n  takeUntil, timeout, timer, zip, zipWith, subscribeOn, observeOn,\n} from './internal/operators';\n/**\n * The Maybe class represents a deferred computation and emission of a single value,\n * no value at all or an exception.\n *\n * The Maybe class default consumer type it interacts with is the MaybeObserver via the\n * subscribe(MaybeObserver) method.\n *\n * The Maybe operates with the following sequential protocol:\n *\n * onSubscribe (onSuccess | onError | onComplete)?\n *\n * Note that onSuccess, onError and onComplete are mutually exclusive events;\n * unlike Observable, onSuccess is never followed by onError or onComplete.\n *\n * Like Observable, a running Maybe can be stopped through the Cancellable instance\n * provided to consumers through MaybeObserver.onSubscribe(Cancellable).\n *\n * Like an Observable, a Maybe is lazy, can be either \"hot\" or \"cold\", synchronous or\n * asynchronous.\n *\n * The documentation for this class makes use of marble diagrams. The following\n * legend explains these diagrams:\n *\n * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-maybe/master/assets/images/maybe.png\" class=\"diagram\">\n */\nexport default class Maybe {\n  /**\n   * @ignore\n   */\n  constructor(subscribeActual) {\n    /**\n     * @ignore\n     */\n    this.subscribeActual = subscribeActual;\n  }\n\n  /**\n   * Runs multiple MaybeSources and signals the events\n   * of the first one that signals (aborting the rest).\n   *\n   * @param {!Iterable} sources\n   * the Iterable sequence of sources. A subscription\n   * to each source will occur in the same order as\n   * in the Iterable.\n   * @returns {Maybe}\n   */\n  static amb(sources) {\n    return amb(sources);\n  }\n\n  /**\n   * Mirrors the Maybe (current or provided) that\n   * first signals an event.\n   * @param {!Maybe} other\n   * a Maybe competing to react first. A subscription\n   * to this provided source will occur after subscribing\n   * to the current source.\n   * @returns {Maybe}\n   * a Maybe that emits the same sequence as whichever of the\n   * source MaybeSources first signalled\n   */\n  ambWith(other) {\n    return ambWith(this, other);\n  }\n\n  /**\n   * Returns a Maybe that subscribes to this Maybe lazily,\n   * caches its event and replays it, to all the downstream\n   * subscribers.\n   *\n   * The operator subscribes only when the first downstream\n   * subscriber subscribes and maintains a single subscription\n   * towards this Maybe.\n   *\n   * @returns {Maybe}\n   * a Maybe that, when first subscribed to, caches all of its\n   * items and notifications for the benefit of subsequent\n   * subscribers.\n   */\n  cache() {\n    return cache(this);\n  }\n\n  /**\n   * Transform a Maybe by applying a particular Transformer\n   * function to it.\n   *\n   * This method operates on the Maybe itself whereas lift(MaybeObserver)\n   * operates on the Maybe's Observers.\n   *\n   * If the operator you are creating is designed to act on\n   * the individual item emitted by a Maybe, use lift(MaybeObserver).\n   * If your operator is designed to transform the source\n   * Maybe as a whole (for instance, by applying a particular\n   * set of existing Maybe operators to it) use compose.\n   *\n   * @param {!function(source: Maybe):Maybe} transformer\n   * the transformer function, not null\n   * @returns {Maybe}\n   * a Maybe, transformed by the transformer function\n   */\n  compose(transformer) {\n    return compose(this, transformer);\n  }\n\n  /**\n   * Provides an API (via a cold Maybe) that bridges the\n   * reactive world with the callback-style world.\n   *\n   * @param {!function(e: Emitter):any} subscriber\n   * the emitter that is called when a MaybeObserver\n   * subscribes to the returned Maybe\n   * @returns {Maybe}\n   */\n  static create(subscriber) {\n    return create(subscriber);\n  }\n\n  /**\n   * Returns a Maybe that emits the item emitted by the\n   * source Maybe or a specified default item if the source\n   * Maybe is empty.\n   *\n   * Note that the result Maybe is semantically equivalent to a\n   * Single, since it's guaranteed to emit exactly one item or\n   * an error.\n   *\n   * @param {!any} value\n   * the item to emit if the source Maybe emits no items\n   * @returns {Maybe}\n   * a Maybe that emits either the specified default item\n   * if the source Maybe emits no items, or the items emitted\n   * by the source Maybe.\n   */\n  defaultIfEmpty(value) {\n    return defaultIfEmpty(this, value);\n  }\n\n  /**\n   * Calls a function for each individual MaybeObserver to return\n   * the actual Maybe source to be subscribed to.\n   *\n   * @param {!function():Maybe} supplier\n   * the function that is called for each individual MaybeObserver\n   * and returns a Maybe instance to subscribe to\n   * @returns {Maybe}\n   */\n  static defer(supplier) {\n    return defer(supplier);\n  }\n\n  /**\n   * Returns a Maybe that signals the events emitted by the\n   * source Maybe shifted forward in time by a specified delay.\n   * @param {!number} amount\n   * the delay to shift the source by in milliseconds.\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   * @param {?boolean} doDelayError\n   * if true, both success and error signals are delayed.\n   * if false, only success signals are delayed.\n   * @returns {Maybe}\n   */\n  delay(amount, scheduler, doDelayError) {\n    return delay(this, amount, scheduler, doDelayError);\n  }\n\n  /**\n   * Returns a Maybe that delays the subscription to the source\n   * Maybe by a given amount of time.\n   * @param {!number} amount\n   * the time to delay the subscription\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   * @returns {Maybe}\n   * a Maybe that delays the subscription to the source\n   * Maybe by the given amount\n   */\n  delaySubscription(amount, scheduler) {\n    return delaySubscription(this, amount, scheduler);\n  }\n\n  /**\n   * Delays the actual subscription to the current Maybe until\n   * the given other Maybe signals success.\n   *\n   * If the delaying source signals an error, that error is\n   * re-emitted and no subscription to the current Maybe happens.\n   *\n   * @param {!Maybe} other\n   * the Single that has to complete before the subscription\n   * to the current Single happens.\n   * @returns {Maybe}\n   */\n  delayUntil(other) {\n    return delayUntil(this, other);\n  }\n\n  /**\n   * Calls the specified consumer with the success item after this\n   * item has been emitted to the downstream.\n   * @param {!function(x:any)} consumer\n   * the consumer that will be called after emitting an item\n   * from upstream to the downstream\n   * @returns {Maybe}\n   */\n  doAfterSuccess(consumer) {\n    return doAfterSuccess(this, consumer);\n  }\n\n  /**\n   * Registers an Action to be called when this Maybe invokes either\n   * onSuccess, onComplete or onError.\n   * @param {!function} action\n   * an action to be invoked when the source Maybe finishes\n   * @returns {Maybe}\n   * a Maybe that emits the same items as the source Maybe,\n   * then invokes the Action\n   */\n  doAfterTerminate(action) {\n    return doAfterTerminate(this, action);\n  }\n\n  /**\n   * Calls the specified action after this Maybe signals onSuccess,\n   * onError or onComplete or gets cancelled by the downstream.\n   *\n   * In case of a race between a terminal event and a cancel call,\n   * the provided onFinally action is executed once per subscription.\n   *\n   * @param {!function} action\n   * the action called when this Maybe terminates or gets cancelled\n   * @returns {Maybe}\n   */\n  doFinally(action) {\n    return doFinally(this, action);\n  }\n\n  /**\n   * Calls the shared action if an MaybeObserver subscribed to the current\n   * Maybe cancels the common Cancellable it received via onSubscribe.\n   *\n   * @param {!function} action\n   * the action called when the subscription is cancelled\n   * @returns {Maybe}\n   */\n  doOnCancel(action) {\n    return doOnCancel(this, action);\n  }\n\n  /**\n   * Modifies the source Maybe so that it invokes an action when it calls\n   * onComplete.\n   * @param {!function} action\n   * the action to invoke when the source Maybe calls onComplete.\n   * @returns {Maybe}\n   * the new Maybe with the side-effecting behavior applied.\n   */\n  doOnComplete(action) {\n    return doOnComplete(this, action);\n  }\n\n  /**\n   * Calls the shared consumer with the error sent via onError for each\n   * MaybeObserver that subscribes to the current Maybe.\n   * @param {!function(e: Error)} consumer\n   * the consumer called with the success value of onError\n   * @returns {Maybe}\n   */\n  doOnError(consumer) {\n    return doOnError(this, consumer);\n  }\n\n  /**\n   * Calls the given onEvent callback with the (success value, null) for\n   * an onSuccess, (null, throwable) for an onError or (null, null) for\n   * an onComplete signal from this Maybe before delivering said signal to the downstream.\n   * @param {!function(success: any, e: Error)} biconsumer\n   * the callback to call with the terminal event tuple\n   * @returns {Maybe}\n   */\n  doOnEvent(biconsumer) {\n    return doOnEvent(this, biconsumer);\n  }\n\n  /**\n   * Calls the shared consumer with the Cancellable sent through\n   * the onSubscribe for each MaybeObserver that subscribes to the current Maybe.\n   *\n   * @param {!function(ac: Cancellable)} consumer\n   * the consumer called with the Cancellable sent via onSubscribe\n   * @returns {Maybe}\n   */\n  doOnSubscribe(consumer) {\n    return doOnSubscribe(this, consumer);\n  }\n\n  /**\n   * Calls the shared consumer with the success value sent via onSuccess\n   * for each MaybeObserver that subscribes to the current Maybe.\n   *\n   * @param {!function(success: any)} consumer\n   * the consumer called with the success value of onSuccess\n   * @returns {Maybe}\n   */\n  doOnSuccess(consumer) {\n    return doOnSuccess(this, consumer);\n  }\n\n  /**\n   * Returns a Maybe instance that calls the given onTerminate callback\n   * just before this Maybe completes normally or with an exception.\n   *\n   * This differs from doAfterTerminate in that this happens before\n   * the onComplete or onError notification.\n   * @param {!function} action\n   * the action to invoke when the consumer calls onComplete or onError\n   * @returns {Maybe}\n   */\n  doOnTerminate(action) {\n    return doOnTerminate(this, action);\n  }\n\n  /**\n   * Returns a (singleton) Maybe instance that calls onComplete immediately.\n   * @returns {Maybe}\n   */\n  static empty() {\n    return empty();\n  }\n\n  /**\n   * Returns a Maybe that invokes a subscriber's onError method when\n   * the subscriber subscribes to it.\n   * @param {!(function():Error|Error)} err\n   * - the callable that is called for each individual\n   * MaybeObserver and returns or throws a value to be emitted.\n   * - the particular value to pass to onError\n   * @returns {Maybe}\n   * a Maybe that invokes the subscriber's onError method when the\n   * subscriber subscribes to it\n   */\n  static error(err) {\n    return error(err);\n  }\n\n  /**\n   * Filters the success item of the Maybe via a predicate function\n   * and emitting it if the predicate returns true, completing otherwise.\n   * @param {!function(x: any):boolean} predicate\n   * a function that evaluates the item emitted by the source Maybe,\n   * returning true if it passes the filter\n   * @returns {Maybe}\n   * a Maybe that emit the item emitted by the source Maybe that the filter\n   * evaluates as true\n   */\n  filter(predicate) {\n    return filter(this, predicate);\n  }\n\n  /**\n   * Returns a Maybe that is based on applying a specified function to the\n   * item emitted by the source Maybe, where that function returns a Maybe.\n   * @param {!function(x: any):Maybe} mapper\n   * a function that, when applied to the item emitted by the source Maybe,\n   * returns a Maybe.\n   * @returns {Maybe}\n   * the Maybe returned from mapper when applied to the item emitted by the\n   * source Maybe\n   */\n  flatMap(mapper) {\n    return flatMap(this, mapper);\n  }\n\n  /**\n   * Returns a Maybe that invokes the given callable for each individual\n   * MaybeObserver that subscribes and emits the resulting non-null item via\n   * onSuccess while considering a null result from the callable as\n   * indication for valueless completion via onComplete.\n   *\n   * This operator allows you to defer the execution of the given Callable\n   * until a MaybeObserver subscribes to the returned Maybe. In other terms,\n   * this source operator evaluates the given callable \"lazily\"\n   *\n   * If the result is a Promise-like instance, the\n   * MaybeObserver is then subscribed to the Promise through\n   * the fromPromise operator.\n   *\n   * @param {!function():any} callable\n   * a callable instance whose execution should be deferred and performed\n   * for each individual MaybeObserver that subscribes to the returned Maybe.\n   * @returns {Maybe}\n   */\n  static fromCallable(callable) {\n    return fromCallable(callable);\n  }\n\n  /**\n   * Converts a Promise-like instance into a Maybe.\n   *\n   * @param {!(Promise|Thennable|PromiseLike)} promise\n   * The promise to be converted into a Maybe.\n   * @returns {Maybe}\n   */\n  static fromPromise(promise) {\n    return fromPromise(promise);\n  }\n\n  /**\n   * Provides a Promise-like interface for emitting signals.\n   *\n   * @param {!function(resolve: function, reject:function))} fulfillable\n   * A function that accepts two parameters: resolve and reject,\n   * similar to a Promise construct.\n   * @returns {Maybe}\n   */\n  static fromResolvable(fulfillable) {\n    return fromResolvable(fulfillable);\n  }\n\n  /**\n   * Returns a Maybe that emits a specified item.\n   * @param {!any} value\n   * the item to emit\n   * @returns {Maybe}\n   * a Maybe that emits item\n   */\n  static just(value) {\n    return just(value);\n  }\n\n  /**\n   * This method requires advanced knowledge about building operators,\n   * please consider other standard composition methods first;\n   *\n   * Returns a Maybe which, when subscribed to, invokes the operator\n   * method of the provided MaybeObserver for each individual downstream Maybe\n   * and allows the insertion of a custom operator by accessing the\n   * downstream's MaybeObserver during this subscription phase and providing a new\n   * MaybeObserver, containing the custom operator's intended business logic,\n   * that will be used in the subscription process going further upstream.\n   *\n   * Generally, such a new MaybeObserver will wrap the downstream's MaybeObserver\n   * and forwards the onSuccess, onError and onComplete events from the\n   * upstream directly or according to the emission pattern the custom\n   * operator's business logic requires. In addition, such operator can\n   * intercept the flow control calls of cancel and signal.cancelled that\n   * would have traveled upstream and perform additional actions\n   * depending on the same business logic requirements.\n   *\n   * Note that implementing custom operators via this lift()\n   * method adds slightly more overhead by requiring an additional\n   * allocation and indirection per assembled flows. Instead,\n   * using compose() method and  creating a transformer function\n   * with it is recommended.\n   *\n   * @param {!function(observer: MaybeObserver):MaybeObserver} operator\n   * the function that receives the downstream's MaybeObserver and should\n   * return a MaybeObserver with custom behavior to be used as the consumer\n   * for the current Maybe.\n   * @returns {Maybe}\n   */\n  lift(operator) {\n    return lift(this, operator);\n  }\n\n  /**\n   * Returns a Maybe that applies a specified function to the item\n   * emitted by the source Maybe and emits the result of this function\n   * application.\n   *\n   * @param {!function} mapper\n   * a function to apply to the item emitted by the Maybe\n   * @returns {Maybe}\n   * a Maybe that emits the item from the source Maybe, transformed by\n   * the specified function\n   */\n  map(mapper) {\n    return map(this, mapper);\n  }\n\n\n  /**\n   * Flattens a Maybe that emits a Maybe into a single Maybe that emits\n   * the item emitted by the nested Maybe, without any transformation.\n   *\n   * @param {!Maybe} source\n   * a Maybe that emits a Maybe\n   * @returns {Maybe}\n   * a Maybe that emits the item that is the result of flattening the\n   * Maybe emitted by source\n   */\n  static merge(source) {\n    return merge(source);\n  }\n\n  /**\n   * Returns a Maybe that never sends any items or notifications to a\n   * MaybeObserver.\n   *\n   * @returns {Maybe}\n   * a Maybe that never emits any items or sends any notifications to a\n   * MaybeObserver\n   */\n  static never() {\n    return never();\n  }\n\n  /**\n   * Returns a Maybe which emits the terminal events from the\n   * thread of the specified scheduler.\n   *\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   *\n   * @returns {Maybe}\n   * the source Maybe modified so that its subscribers are\n   * notified on the specified Scheduler\n   */\n  observeOn(scheduler) {\n    return observeOn(this, scheduler);\n  }\n\n  /**\n   * Returns a Maybe instance that if this Maybe emits an\n   * error and the predicate returns true, it will emit an onComplete\n   * and swallow the throwable.\n   *\n   * If no predicate is provided, returns a Maybe instance that\n   * if this Maybe emits an error, it will emit an onComplete\n   * and swallow the error\n   *\n   * @param {function(e: Error):boolean} predicate\n   * the predicate to call when an Error is emitted which should return true\n   * if the Error should be swallowed and replaced with an onComplete.\n   * @returns {Maybe}\n   */\n  onErrorComplete(predicate) {\n    return onErrorComplete(this, predicate);\n  }\n\n  /**\n   * Instructs a Maybe to pass control to another Maybe rather than\n   * invoking onError if it encounters an error.\n   *\n   * @param {!function(e: Error):Maybe|Maybe} other\n   * - the next Maybe that will take over if the source Maybe encounters an error\n   * - a function that returns a Maybe that will take over if the source Maybe encounters an error\n   * @returns {Maybe}\n   */\n  onErrorResumeNext(other) {\n    return onErrorResumeNext(this, other);\n  }\n\n  /**\n   * Instructs a Maybe to emit an item (returned by a specified function)\n   * rather than invoking onError if it encounters an error.\n   * @param {!function(e: Error):Maybe} supplier\n   * a function that returns a single value that will be emitted as success value\n   * the current Maybe signals an onError event\n   * @returns {Maybe}\n   */\n  onErrorReturn(supplier) {\n    return onErrorReturn(this, supplier);\n  }\n\n  /**\n   * Instructs a Maybe to emit an item (returned by a specified function)\n   * rather than invoking onError if it encounters an error.\n   * @param {any} value\n   * the value that is emitted as onSuccess in case this Maybe signals an onError\n   * @returns {Maybe}\n   */\n  onErrorReturnItem(value) {\n    return onErrorReturnItem(this, value);\n  }\n\n  /**\n   * Returns a Maybe that mirrors the source Maybe, resubscribing to it if it calls\n   * onError and the predicate returns true for that specific exception and retry count.\n   * @param {!function(retries: number, err: Error):boolean} bipredicate\n   * the predicate that determines if a resubscription may happen in case of a\n   * specific exception and retry count.\n   * @returns {Maybe}\n   */\n  retry(bipredicate) {\n    return retry(this, bipredicate);\n  }\n\n  /**\n   * Returns a Maybe which subscribes the child subscriber on the specified scheduler,\n   * making sure the subscription side-effects happen on that specific thread of the scheduler.\n   *\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   *\n   * @returns {Maybe}\n   * the source Maybe modified so that its subscriptions happen\n   * on the specified Scheduler\n   */\n  subscribeOn(scheduler) {\n    return subscribeOn(this, scheduler);\n  }\n\n  /**\n   * Returns a Maybe that emits the items emitted by the source Maybe or the items\n   * of an alternate Maybe if the current Maybe is empty.\n   * @param {Maybe} other\n   * the alternate Maybe to subscribe to if the main does not emit any items\n   * @returns {Maybe}\n   * a Maybe that emits the items emitted by the source Maybe\n   * or the items of an alternate Maybe if the source Maybe is empty.\n   */\n  switchIfEmpty(other) {\n    return switchIfEmpty(this, other);\n  }\n\n  /**\n   * Returns a Maybe that emits the items emitted by the source Maybe until\n   * a second Maybe emits an item.\n   * @param {Maybe} other\n   * the Maybe whose first emitted item will cause takeUntil to stop\n   * emitting items from the source Maybe\n   * @returns {Maybe}\n   * a Maybe that emits the items emitted by the source Maybe until\n   * such time as other emits its first item\n   */\n  takeUntil(other) {\n    return takeUntil(this, other);\n  }\n\n  /**\n   * Returns a Maybe that mirrors the source Maybe but applies a\n   * timeout policy for each emitted item. If the next item isn't\n   * emitted within the specified timeout duration starting from its\n   * predecessor, the resulting Maybe terminates and notifies MaybeObserver\n   * of an Error with TimeoutException.\n   *\n   * @param {!number} amount\n   * Amount of time in milliseconds\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   * @returns {Maybe}\n   */\n  timeout(amount, scheduler) {\n    return timeout(this, amount, scheduler);\n  }\n\n  /**\n   * Returns a Maybe that emits 0L after a specified delay.\n   * @param {!number} amount\n   * Amount of time in milliseconds\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   * @returns {Maybe}\n   */\n  static timer(amount, scheduler) {\n    return timer(amount, scheduler);\n  }\n\n  /**\n   * Returns a Maybe that emits the results of a specified combiner function\n   * applied to combinations of items emitted, in sequence, by an Iterable of other\n   * Maybes.\n   * @param {!Iterable} sources\n   * an Iterable of source Maybe\n   * @param {?function(results: Array):any} zipper\n   * a function that, when applied to an item emitted by each of the source Maybe,\n   * results in an item that will be emitted by the resulting Maybe\n   * @returns {Maybe}\n   */\n  static zip(sources, zipper) {\n    return zip(sources, zipper);\n  }\n\n  /**\n   * Waits until this and the other Maybe signal a success value then applies the\n   * given function to those values and emits the function's resulting value to downstream.\n   *\n   * If either this or the other Maybe is empty or signals an error,\n   * the resulting Maybe will terminate immediately and cancel the other source.\n   *\n   * @param {Maybe} other\n   * the other Maybe\n   * @param {function(a: any, b: any):any} zipper\n   * a function that combines the pairs of items from the two Maybe to\n   * generate the items to be emitted by the resulting Maybe\n   * @returns {Maybe}\n   */\n  zipWith(other, zipper) {\n    return zipWith(this, other, zipper);\n  }\n\n  /**\n   * @desc\n   * Subscribes with an Object that is an MaybeObserver.\n   *\n   * An Object is considered as an MaybeObserver if:\n   *  - if it has the method onSubscribe\n   *  - if it has the method onComplete (optional)\n   *  - if it has the method onSuccess (optional)\n   *  - if it has the method onError (optional)\n   *\n   * The onSubscribe method is called when subscribeWith\n   * or subscribe is executed. This method receives an\n   * Cancellable instance.\n   *\n   * @param {!Object} observer\n   * @returns {undefined}\n   */\n  subscribeWith(observer) {\n    if (isObserver(observer)) {\n      this.subscribeActual.call(this, observer);\n    }\n  }\n\n  /**\n   * @desc\n   * Subscribes to a Maybe instance with an onSuccess\n   * and an onError method.\n   *\n   * onSuccess receives a non-undefined value.\n   * onError receives a string(or an Error object).\n   *\n   * Both are called once.\n   * @param {?function(x: any)} onSuccess\n   * the function you have designed to accept the emission\n   * from the Maybe\n   * @param {?function(x: any)} onComplete\n   * the function you have designed to accept the completion\n   * from the Maybe\n   * @param {?function(x: any)} onError\n   * the function you have designed to accept any error\n   * notification from the Maybe\n   * @returns {Cancellable}\n   * an Cancellable reference can request the Maybe to cancel.\n   */\n  subscribe(onSuccess, onComplete, onError) {\n    const controller = new LinkedCancellable();\n    this.subscribeWith({\n      onSubscribe(ac) {\n        controller.link(ac);\n      },\n      onComplete,\n      onSuccess,\n      onError,\n    });\n    return controller;\n  }\n\n\n  /**\n   * Converts the Maybe to a Promise instance.\n   *\n   * @returns {Promise}\n   */\n  toPromise() {\n    return new Promise((res, rej) => {\n      this.subscribe(res, rej);\n    });\n  }\n\n  /**\n   * Converts the Maybe to a Promise instance\n   * and attaches callbacks to it.\n   *\n   * @param {!function(x: any):any} onFulfill\n   * @param {?function(x: Error):any} onReject\n   * @returns {Promise}\n   */\n  then(onFulfill, onReject) {\n    return this.toPromise().then(onFulfill, onReject);\n  }\n\n  /**\n   * Converts the Maybe to a Promise instance\n   * and attaches an onRejection callback to it.\n   *\n   * @param {!function(x: Error):any} onReject\n   * @returns {Promise}\n   */\n  catch(onReject) {\n    return this.toPromise().catch(onReject);\n  }\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/maybe.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "external",
    "name": "Scheduler",
    "externalLink": "https://lxsmnsyc.github.io/rx-scheduler/",
    "memberof": "src/maybe.js",
    "static": true,
    "longname": "src/maybe.js~Scheduler",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 214,
    "kind": "external",
    "name": "Iterable",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols",
    "memberof": "src/maybe.js",
    "static": true,
    "longname": "src/maybe.js~Iterable",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 215,
    "kind": "external",
    "name": "Thennable",
    "externalLink": "https://promisesaplus.com/",
    "memberof": "src/maybe.js",
    "static": true,
    "longname": "src/maybe.js~Thennable",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 216,
    "kind": "external",
    "name": "PromiseLike",
    "externalLink": "https://promisesaplus.com/",
    "memberof": "src/maybe.js",
    "static": true,
    "longname": "src/maybe.js~PromiseLike",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 217,
    "kind": "external",
    "name": "Cancellable",
    "externalLink": "https://lxsmnsyc.github.io/rx-cancellable/",
    "memberof": "src/maybe.js",
    "static": true,
    "longname": "src/maybe.js~Cancellable",
    "access": "public",
    "description": "",
    "lineNumber": 43
  },
  {
    "__docId__": 218,
    "kind": "class",
    "name": "Maybe",
    "memberof": "src/maybe.js",
    "static": true,
    "longname": "src/maybe.js~Maybe",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/maybe.js",
    "importStyle": "Maybe",
    "description": "The Maybe class represents a deferred computation and emission of a single value,\nno value at all or an exception.\n\nThe Maybe class default consumer type it interacts with is the MaybeObserver via the\nsubscribe(MaybeObserver) method.\n\nThe Maybe operates with the following sequential protocol:\n\nonSubscribe (onSuccess | onError | onComplete)?\n\nNote that onSuccess, onError and onComplete are mutually exclusive events;\nunlike Observable, onSuccess is never followed by onError or onComplete.\n\nLike Observable, a running Maybe can be stopped through the Cancellable instance\nprovided to consumers through MaybeObserver.onSubscribe(Cancellable).\n\nLike an Observable, a Maybe is lazy, can be either \"hot\" or \"cold\", synchronous or\nasynchronous.\n\nThe documentation for this class makes use of marble diagrams. The following\nlegend explains these diagrams:\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-maybe/master/assets/images/maybe.png\" class=\"diagram\">",
    "lineNumber": 84,
    "interface": false
  },
  {
    "__docId__": 219,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 88,
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "subscribeActual",
    "memberof": "src/maybe.js~Maybe",
    "static": false,
    "longname": "src/maybe.js~Maybe#subscribeActual",
    "access": "public",
    "description": "",
    "lineNumber": 92,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "amb",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.amb",
    "access": "public",
    "description": "Runs multiple MaybeSources and signals the events\nof the first one that signals (aborting the rest).",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "the Iterable sequence of sources. A subscription\nto each source will occur in the same order as\nin the Iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "ambWith",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#ambWith",
    "access": "public",
    "description": "Mirrors the Maybe (current or provided) that\nfirst signals an event.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that emits the same sequence as whichever of the\nsource MaybeSources first signalled"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "a Maybe competing to react first. A subscription\nto this provided source will occur after subscribing\nto the current source."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that emits the same sequence as whichever of the\nsource MaybeSources first signalled"
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "cache",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#cache",
    "access": "public",
    "description": "Returns a Maybe that subscribes to this Maybe lazily,\ncaches its event and replays it, to all the downstream\nsubscribers.\n\nThe operator subscribes only when the first downstream\nsubscriber subscribes and maintains a single subscription\ntowards this Maybe.",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that, when first subscribed to, caches all of its\nitems and notifications for the benefit of subsequent\nsubscribers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that, when first subscribed to, caches all of its\nitems and notifications for the benefit of subsequent\nsubscribers."
    },
    "params": []
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "compose",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#compose",
    "access": "public",
    "description": "Transform a Maybe by applying a particular Transformer\nfunction to it.\n\nThis method operates on the Maybe itself whereas lift(MaybeObserver)\noperates on the Maybe's Observers.\n\nIf the operator you are creating is designed to act on\nthe individual item emitted by a Maybe, use lift(MaybeObserver).\nIf your operator is designed to transform the source\nMaybe as a whole (for instance, by applying a particular\nset of existing Maybe operators to it) use compose.",
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe, transformed by the transformer function"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(source: Maybe):Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "transformer",
        "description": "the transformer function, not null"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe, transformed by the transformer function"
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "create",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.create",
    "access": "public",
    "description": "Provides an API (via a cold Maybe) that bridges the\nreactive world with the callback-style world.",
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(e: Emitter):any"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriber",
        "description": "the emitter that is called when a MaybeObserver\nsubscribes to the returned Maybe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "defaultIfEmpty",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#defaultIfEmpty",
    "access": "public",
    "description": "Returns a Maybe that emits the item emitted by the\nsource Maybe or a specified default item if the source\nMaybe is empty.\n\nNote that the result Maybe is semantically equivalent to a\nSingle, since it's guaranteed to emit exactly one item or\nan error.",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that emits either the specified default item\nif the source Maybe emits no items, or the items emitted\nby the source Maybe."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the item to emit if the source Maybe emits no items"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that emits either the specified default item\nif the source Maybe emits no items, or the items emitted\nby the source Maybe."
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "defer",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.defer",
    "access": "public",
    "description": "Calls a function for each individual MaybeObserver to return\nthe actual Maybe source to be subscribed to.",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "supplier",
        "description": "the function that is called for each individual MaybeObserver\nand returns a Maybe instance to subscribe to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "delay",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#delay",
    "access": "public",
    "description": "Returns a Maybe that signals the events emitted by the\nsource Maybe shifted forward in time by a specified delay.",
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "the delay to shift the source by in milliseconds."
      },
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "doDelayError",
        "description": "if true, both success and error signals are delayed.\nif false, only success signals are delayed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "delaySubscription",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#delaySubscription",
    "access": "public",
    "description": "Returns a Maybe that delays the subscription to the source\nMaybe by a given amount of time.",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that delays the subscription to the source\nMaybe by the given amount"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "the time to delay the subscription"
      },
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that delays the subscription to the source\nMaybe by the given amount"
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "delayUntil",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#delayUntil",
    "access": "public",
    "description": "Delays the actual subscription to the current Maybe until\nthe given other Maybe signals success.\n\nIf the delaying source signals an error, that error is\nre-emitted and no subscription to the current Maybe happens.",
    "lineNumber": 255,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the Single that has to complete before the subscription\nto the current Single happens."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "doAfterSuccess",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#doAfterSuccess",
    "access": "public",
    "description": "Calls the specified consumer with the success item after this\nitem has been emitted to the downstream.",
    "lineNumber": 267,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x:any)"
        ],
        "spread": false,
        "optional": false,
        "name": "consumer",
        "description": "the consumer that will be called after emitting an item\nfrom upstream to the downstream"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "doAfterTerminate",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#doAfterTerminate",
    "access": "public",
    "description": "Registers an Action to be called when this Maybe invokes either\nonSuccess, onComplete or onError.",
    "lineNumber": 280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that emits the same items as the source Maybe,\nthen invokes the Action"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "an action to be invoked when the source Maybe finishes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that emits the same items as the source Maybe,\nthen invokes the Action"
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "doFinally",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#doFinally",
    "access": "public",
    "description": "Calls the specified action after this Maybe signals onSuccess,\nonError or onComplete or gets cancelled by the downstream.\n\nIn case of a race between a terminal event and a cancel call,\nthe provided onFinally action is executed once per subscription.",
    "lineNumber": 295,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "the action called when this Maybe terminates or gets cancelled"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "doOnCancel",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#doOnCancel",
    "access": "public",
    "description": "Calls the shared action if an MaybeObserver subscribed to the current\nMaybe cancels the common Cancellable it received via onSubscribe.",
    "lineNumber": 307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "the action called when the subscription is cancelled"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "doOnComplete",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#doOnComplete",
    "access": "public",
    "description": "Modifies the source Maybe so that it invokes an action when it calls\nonComplete.",
    "lineNumber": 319,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\nthe new Maybe with the side-effecting behavior applied."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "the action to invoke when the source Maybe calls onComplete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "the new Maybe with the side-effecting behavior applied."
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "doOnError",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#doOnError",
    "access": "public",
    "description": "Calls the shared consumer with the error sent via onError for each\nMaybeObserver that subscribes to the current Maybe.",
    "lineNumber": 330,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(e: Error)"
        ],
        "spread": false,
        "optional": false,
        "name": "consumer",
        "description": "the consumer called with the success value of onError"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "doOnEvent",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#doOnEvent",
    "access": "public",
    "description": "Calls the given onEvent callback with the (success value, null) for\nan onSuccess, (null, throwable) for an onError or (null, null) for\nan onComplete signal from this Maybe before delivering said signal to the downstream.",
    "lineNumber": 342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(success: any, e: Error)"
        ],
        "spread": false,
        "optional": false,
        "name": "biconsumer",
        "description": "the callback to call with the terminal event tuple"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "doOnSubscribe",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#doOnSubscribe",
    "access": "public",
    "description": "Calls the shared consumer with the Cancellable sent through\nthe onSubscribe for each MaybeObserver that subscribes to the current Maybe.",
    "lineNumber": 354,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(ac: Cancellable)"
        ],
        "spread": false,
        "optional": false,
        "name": "consumer",
        "description": "the consumer called with the Cancellable sent via onSubscribe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "doOnSuccess",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#doOnSuccess",
    "access": "public",
    "description": "Calls the shared consumer with the success value sent via onSuccess\nfor each MaybeObserver that subscribes to the current Maybe.",
    "lineNumber": 366,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(success: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "consumer",
        "description": "the consumer called with the success value of onSuccess"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "doOnTerminate",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#doOnTerminate",
    "access": "public",
    "description": "Returns a Maybe instance that calls the given onTerminate callback\njust before this Maybe completes normally or with an exception.\n\nThis differs from doAfterTerminate in that this happens before\nthe onComplete or onError notification.",
    "lineNumber": 380,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "the action to invoke when the consumer calls onComplete or onError"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "empty",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.empty",
    "access": "public",
    "description": "Returns a (singleton) Maybe instance that calls onComplete immediately.",
    "lineNumber": 388,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "error",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.error",
    "access": "public",
    "description": "Returns a Maybe that invokes a subscriber's onError method when\nthe subscriber subscribes to it.",
    "lineNumber": 403,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that invokes the subscriber's onError method when the\nsubscriber subscribes to it"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():Error",
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "the callable that is called for each individual\nMaybeObserver and returns or throws a value to be emitted.\n- the particular value to pass to onError"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that invokes the subscriber's onError method when the\nsubscriber subscribes to it"
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "filter",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#filter",
    "access": "public",
    "description": "Filters the success item of the Maybe via a predicate function\nand emitting it if the predicate returns true, completing otherwise.",
    "lineNumber": 417,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that emit the item emitted by the source Maybe that the filter\nevaluates as true"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: any):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "a function that evaluates the item emitted by the source Maybe,\nreturning true if it passes the filter"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that emit the item emitted by the source Maybe that the filter\nevaluates as true"
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "flatMap",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#flatMap",
    "access": "public",
    "description": "Returns a Maybe that is based on applying a specified function to the\nitem emitted by the source Maybe, where that function returns a Maybe.",
    "lineNumber": 431,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\nthe Maybe returned from mapper when applied to the item emitted by the\nsource Maybe"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: any):Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": "a function that, when applied to the item emitted by the source Maybe,\nreturns a Maybe."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "the Maybe returned from mapper when applied to the item emitted by the\nsource Maybe"
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "fromCallable",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.fromCallable",
    "access": "public",
    "description": "Returns a Maybe that invokes the given callable for each individual\nMaybeObserver that subscribes and emits the resulting non-null item via\nonSuccess while considering a null result from the callable as\nindication for valueless completion via onComplete.\n\nThis operator allows you to defer the execution of the given Callable\nuntil a MaybeObserver subscribes to the returned Maybe. In other terms,\nthis source operator evaluates the given callable \"lazily\"\n\nIf the result is a Promise-like instance, the\nMaybeObserver is then subscribed to the Promise through\nthe fromPromise operator.",
    "lineNumber": 454,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():any"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "a callable instance whose execution should be deferred and performed\nfor each individual MaybeObserver that subscribes to the returned Maybe."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "fromPromise",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.fromPromise",
    "access": "public",
    "description": "Converts a Promise-like instance into a Maybe.",
    "lineNumber": 465,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Promise",
          "Thennable",
          "PromiseLike"
        ],
        "spread": false,
        "optional": false,
        "name": "promise",
        "description": "The promise to be converted into a Maybe."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "fromResolvable",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.fromResolvable",
    "access": "public",
    "description": "Provides a Promise-like interface for emitting signals.",
    "lineNumber": 477,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(resolve: function, reject:function))"
        ],
        "spread": false,
        "optional": false,
        "name": "fulfillable",
        "description": "A function that accepts two parameters: resolve and reject,\nsimilar to a Promise construct."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "just",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.just",
    "access": "public",
    "description": "Returns a Maybe that emits a specified item.",
    "lineNumber": 488,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that emits item"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the item to emit"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that emits item"
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "lift",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#lift",
    "access": "public",
    "description": "This method requires advanced knowledge about building operators,\nplease consider other standard composition methods first;\n\nReturns a Maybe which, when subscribed to, invokes the operator\nmethod of the provided MaybeObserver for each individual downstream Maybe\nand allows the insertion of a custom operator by accessing the\ndownstream's MaybeObserver during this subscription phase and providing a new\nMaybeObserver, containing the custom operator's intended business logic,\nthat will be used in the subscription process going further upstream.\n\nGenerally, such a new MaybeObserver will wrap the downstream's MaybeObserver\nand forwards the onSuccess, onError and onComplete events from the\nupstream directly or according to the emission pattern the custom\noperator's business logic requires. In addition, such operator can\nintercept the flow control calls of cancel and signal.cancelled that\nwould have traveled upstream and perform additional actions\ndepending on the same business logic requirements.\n\nNote that implementing custom operators via this lift()\nmethod adds slightly more overhead by requiring an additional\nallocation and indirection per assembled flows. Instead,\nusing compose() method and  creating a transformer function\nwith it is recommended.",
    "lineNumber": 523,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(observer: MaybeObserver):MaybeObserver"
        ],
        "spread": false,
        "optional": false,
        "name": "operator",
        "description": "the function that receives the downstream's MaybeObserver and should\nreturn a MaybeObserver with custom behavior to be used as the consumer\nfor the current Maybe."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "map",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#map",
    "access": "public",
    "description": "Returns a Maybe that applies a specified function to the item\nemitted by the source Maybe and emits the result of this function\napplication.",
    "lineNumber": 538,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that emits the item from the source Maybe, transformed by\nthe specified function"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": "a function to apply to the item emitted by the Maybe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that emits the item from the source Maybe, transformed by\nthe specified function"
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "merge",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.merge",
    "access": "public",
    "description": "Flattens a Maybe that emits a Maybe into a single Maybe that emits\nthe item emitted by the nested Maybe, without any transformation.",
    "lineNumber": 553,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that emits the item that is the result of flattening the\nMaybe emitted by source"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "a Maybe that emits a Maybe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that emits the item that is the result of flattening the\nMaybe emitted by source"
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "never",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.never",
    "access": "public",
    "description": "Returns a Maybe that never sends any items or notifications to a\nMaybeObserver.",
    "lineNumber": 565,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that never emits any items or sends any notifications to a\nMaybeObserver"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that never emits any items or sends any notifications to a\nMaybeObserver"
    },
    "params": []
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "observeOn",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#observeOn",
    "access": "public",
    "description": "Returns a Maybe which emits the terminal events from the\nthread of the specified scheduler.",
    "lineNumber": 581,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\nthe source Maybe modified so that its subscribers are\nnotified on the specified Scheduler"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "the source Maybe modified so that its subscribers are\nnotified on the specified Scheduler"
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "onErrorComplete",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#onErrorComplete",
    "access": "public",
    "description": "Returns a Maybe instance that if this Maybe emits an\nerror and the predicate returns true, it will emit an onComplete\nand swallow the throwable.\n\nIf no predicate is provided, returns a Maybe instance that\nif this Maybe emits an error, it will emit an onComplete\nand swallow the error",
    "lineNumber": 599,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(e: Error):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "the predicate to call when an Error is emitted which should return true\nif the Error should be swallowed and replaced with an onComplete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "onErrorResumeNext",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#onErrorResumeNext",
    "access": "public",
    "description": "Instructs a Maybe to pass control to another Maybe rather than\ninvoking onError if it encounters an error.",
    "lineNumber": 612,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(e: Error):Maybe",
          "Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the next Maybe that will take over if the source Maybe encounters an error\n- a function that returns a Maybe that will take over if the source Maybe encounters an error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "onErrorReturn",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#onErrorReturn",
    "access": "public",
    "description": "Instructs a Maybe to emit an item (returned by a specified function)\nrather than invoking onError if it encounters an error.",
    "lineNumber": 624,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(e: Error):Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "supplier",
        "description": "a function that returns a single value that will be emitted as success value\nthe current Maybe signals an onError event"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "onErrorReturnItem",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#onErrorReturnItem",
    "access": "public",
    "description": "Instructs a Maybe to emit an item (returned by a specified function)\nrather than invoking onError if it encounters an error.",
    "lineNumber": 635,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the value that is emitted as onSuccess in case this Maybe signals an onError"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "retry",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#retry",
    "access": "public",
    "description": "Returns a Maybe that mirrors the source Maybe, resubscribing to it if it calls\nonError and the predicate returns true for that specific exception and retry count.",
    "lineNumber": 647,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(retries: number, err: Error):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bipredicate",
        "description": "the predicate that determines if a resubscription may happen in case of a\nspecific exception and retry count."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "subscribeOn",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#subscribeOn",
    "access": "public",
    "description": "Returns a Maybe which subscribes the child subscriber on the specified scheduler,\nmaking sure the subscription side-effects happen on that specific thread of the scheduler.",
    "lineNumber": 663,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\nthe source Maybe modified so that its subscriptions happen\non the specified Scheduler"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "the source Maybe modified so that its subscriptions happen\non the specified Scheduler"
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "switchIfEmpty",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#switchIfEmpty",
    "access": "public",
    "description": "Returns a Maybe that emits the items emitted by the source Maybe or the items\nof an alternate Maybe if the current Maybe is empty.",
    "lineNumber": 676,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that emits the items emitted by the source Maybe\nor the items of an alternate Maybe if the source Maybe is empty."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the alternate Maybe to subscribe to if the main does not emit any items"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that emits the items emitted by the source Maybe\nor the items of an alternate Maybe if the source Maybe is empty."
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "takeUntil",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#takeUntil",
    "access": "public",
    "description": "Returns a Maybe that emits the items emitted by the source Maybe until\na second Maybe emits an item.",
    "lineNumber": 690,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}\na Maybe that emits the items emitted by the source Maybe until\nsuch time as other emits its first item"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the Maybe whose first emitted item will cause takeUntil to stop\nemitting items from the source Maybe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": "a Maybe that emits the items emitted by the source Maybe until\nsuch time as other emits its first item"
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "timeout",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#timeout",
    "access": "public",
    "description": "Returns a Maybe that mirrors the source Maybe but applies a\ntimeout policy for each emitted item. If the next item isn't\nemitted within the specified timeout duration starting from its\npredecessor, the resulting Maybe terminates and notifies MaybeObserver\nof an Error with TimeoutException.",
    "lineNumber": 708,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Amount of time in milliseconds"
      },
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "timer",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.timer",
    "access": "public",
    "description": "Returns a Maybe that emits 0L after a specified delay.",
    "lineNumber": 721,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Amount of time in milliseconds"
      },
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "zip",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/maybe.js~Maybe.zip",
    "access": "public",
    "description": "Returns a Maybe that emits the results of a specified combiner function\napplied to combinations of items emitted, in sequence, by an Iterable of other\nMaybes.",
    "lineNumber": 736,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "an Iterable of source Maybe"
      },
      {
        "nullable": true,
        "types": [
          "function(results: Array):any"
        ],
        "spread": false,
        "optional": false,
        "name": "zipper",
        "description": "a function that, when applied to an item emitted by each of the source Maybe,\nresults in an item that will be emitted by the resulting Maybe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "zipWith",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#zipWith",
    "access": "public",
    "description": "Waits until this and the other Maybe signal a success value then applies the\ngiven function to those values and emits the function's resulting value to downstream.\n\nIf either this or the other Maybe is empty or signals an error,\nthe resulting Maybe will terminate immediately and cancel the other source.",
    "lineNumber": 754,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Maybe}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Maybe"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other Maybe"
      },
      {
        "nullable": null,
        "types": [
          "function(a: any, b: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "zipper",
        "description": "a function that combines the pairs of items from the two Maybe to\ngenerate the items to be emitted by the resulting Maybe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Maybe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "subscribeWith",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#subscribeWith",
    "access": "public",
    "description": "Subscribes with an Object that is an MaybeObserver.\n\nAn Object is considered as an MaybeObserver if:\n - if it has the method onSubscribe\n - if it has the method onComplete (optional)\n - if it has the method onSuccess (optional)\n - if it has the method onError (optional)\n\nThe onSubscribe method is called when subscribeWith\nor subscribe is executed. This method receives an\nCancellable instance.",
    "lineNumber": 775,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#subscribe",
    "access": "public",
    "description": "Subscribes to a Maybe instance with an onSuccess\nand an onError method.\n\nonSuccess receives a non-undefined value.\nonError receives a string(or an Error object).\n\nBoth are called once.",
    "lineNumber": 802,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Cancellable}\nan Cancellable reference can request the Maybe to cancel."
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "function(x: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "the function you have designed to accept the emission\nfrom the Maybe"
      },
      {
        "nullable": true,
        "types": [
          "function(x: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "the function you have designed to accept the completion\nfrom the Maybe"
      },
      {
        "nullable": true,
        "types": [
          "function(x: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "the function you have designed to accept any error\nnotification from the Maybe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cancellable"
      ],
      "spread": false,
      "description": "an Cancellable reference can request the Maybe to cancel."
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "toPromise",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#toPromise",
    "access": "public",
    "description": "Converts the Maybe to a Promise instance.",
    "lineNumber": 821,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "then",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#then",
    "access": "public",
    "description": "Converts the Maybe to a Promise instance\nand attaches callbacks to it.",
    "lineNumber": 835,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "onFulfill",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "function(x: Error):any"
        ],
        "spread": false,
        "optional": false,
        "name": "onReject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "catch",
    "memberof": "src/maybe.js~Maybe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/maybe.js~Maybe#catch",
    "access": "public",
    "description": "Converts the Maybe to a Promise instance\nand attaches an onRejection callback to it.",
    "lineNumber": 846,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: Error):any"
        ],
        "spread": false,
        "optional": false,
        "name": "onReject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "src/observer.js",
    "content": "/**\n * Provides a mechanism for receiving push-based notification of a single value,\n * an error or completion without any value.\n *\n * When a MaybeObserver is subscribed to a Maybe through the Maybe.subscribeWith(MaybeObserver)\n * method, the Maybe calls onSubscribe(Cancellable) with a Cancellable that allows\n * cancelling the sequence at any time. A well-behaved Maybe will call a MaybeObserver's\n * onSuccess(Object), onError(Error) or onComplete() method exactly once as they\n * are considered mutually exclusive terminal signals.\n *\n * the invocation pattern must adhere to the following protocol:\n *\n * <code>onSubscribe (onSuccess | onError | onComplete)?</code>\n *\n * Note that unlike with the Observable protocol, onComplete() is not called after\n * the success item has been signalled via onSuccess(Object).\n *\n * Subscribing a MaybeObserver to multiple Maybes is not recommended. If such reuse\n * happens, it is the duty of the MaybeObserver implementation to be ready to receive\n * multiple calls to its methods and ensure proper concurrent behavior of its business logic.\n *\n * Calling onSubscribe(Cancellable), onSuccess(Object) or onError(Error) with a null\n * argument is forbidden.\n * @interface\n */\n// eslint-disable-next-line no-unused-vars\nexport default class MaybeObserver {\n  /**\n   * Receives the AbortController subscription.\n   * @param {!AbortController} d\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onSubscribe(d) {}\n\n  /**\n   * Receives a success value.\n   * @param {!any} value\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onSuccess(value) {}\n\n\n  /**\n   * Receives a completion\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onComplete() {}\n\n  /**\n   * Receives an error value.\n   * @param {!Error} err\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onError(err) {}\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/src/observer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "class",
    "name": "MaybeObserver",
    "memberof": "src/observer.js",
    "static": true,
    "longname": "src/observer.js~MaybeObserver",
    "access": "public",
    "export": true,
    "importPath": "rx-maybe/src/observer.js",
    "importStyle": "MaybeObserver",
    "description": "Provides a mechanism for receiving push-based notification of a single value,\nan error or completion without any value.\n\nWhen a MaybeObserver is subscribed to a Maybe through the Maybe.subscribeWith(MaybeObserver)\nmethod, the Maybe calls onSubscribe(Cancellable) with a Cancellable that allows\ncancelling the sequence at any time. A well-behaved Maybe will call a MaybeObserver's\nonSuccess(Object), onError(Error) or onComplete() method exactly once as they\nare considered mutually exclusive terminal signals.\n\nthe invocation pattern must adhere to the following protocol:\n\n<code>onSubscribe (onSuccess | onError | onComplete)?</code>\n\nNote that unlike with the Observable protocol, onComplete() is not called after\nthe success item has been signalled via onSuccess(Object).\n\nSubscribing a MaybeObserver to multiple Maybes is not recommended. If such reuse\nhappens, it is the duty of the MaybeObserver implementation to be ready to receive\nmultiple calls to its methods and ensure proper concurrent behavior of its business logic.\n\nCalling onSubscribe(Cancellable), onSuccess(Object) or onError(Error) with a null\nargument is forbidden.",
    "lineNumber": 27,
    "interface": true
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "onSubscribe",
    "memberof": "src/observer.js~MaybeObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/observer.js~MaybeObserver#onSubscribe",
    "access": "public",
    "description": "Receives the AbortController subscription.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": false,
        "types": [
          "AbortController"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "onSuccess",
    "memberof": "src/observer.js~MaybeObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/observer.js~MaybeObserver#onSuccess",
    "access": "public",
    "description": "Receives a success value.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "onComplete",
    "memberof": "src/observer.js~MaybeObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/observer.js~MaybeObserver#onComplete",
    "access": "public",
    "description": "Receives a completion",
    "lineNumber": 50,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "onError",
    "memberof": "src/observer.js~MaybeObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/observer.js~MaybeObserver#onError",
    "access": "public",
    "description": "Receives an error value.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": false,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "kind": "index",
    "content": "# rx-maybe\n\nReactive Extenstions - represents a deferred computation and emission of a single value, no value at all or an exception. \n\n[![NPM](https://nodei.co/npm/rx-maybe.png)](https://nodei.co/npm/rx-maybe/)\n\n[![](https://data.jsdelivr.com/v1/package/npm/rx-maybe/badge)](https://www.jsdelivr.com/package/npm/rx-maybe)\n[![HitCount](http://hits.dwyl.io/lxsmnsyc/rx-maybe.svg)](http://hits.dwyl.io/lxsmnsyc/rx-maybe)\n\n| Platform | Build Status |\n| --- | --- |\n| Linux | [![Build Status](https://travis-ci.org/LXSMNSYC/rx-maybe.svg?branch=master)](https://travis-ci.org/LXSMNSYC/rx-maybe) |\n| Windows | [![Build status](https://ci.appveyor.com/api/projects/status/mkjwe462uk80axx4?svg=true)](https://ci.appveyor.com/project/LXSMNSYC/rx-maybe) |\n\n\n[![codecov](https://codecov.io/gh/LXSMNSYC/rx-maybe/branch/master/graph/badge.svg)](https://codecov.io/gh/LXSMNSYC/rx-maybe)\n[![Known Vulnerabilities](https://snyk.io/test/github/LXSMNSYC/rx-maybe/badge.svg?targetFile=package.json)](https://snyk.io/test/github/LXSMNSYC/rx-maybe?targetFile=package.json)\n\n## Install\n\nNPM\n\n```bash\nnpm i rx-maybe\n```\n\nCDN\n\n* jsDelivr\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/rx-cancellable/dist/index.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/rx-scheduler/dist/index.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/rx-maybe/dist/index.min.js\"></script>\n```\n\n* unpkg\n```html\n<script src=\"https://unpkg.com/rx-cancellable/dist/index.min.js\"></script>\n<script src=\"https://unpkg.com/rx-scheduler/dist/index.min.js\"></script>\n<script src=\"https://unpkg.com/rx-maybe/dist/index.min.js\"></script>\n```\n\n## Usage\n\n### Loading the module\n\n#### CommonJS\n\n```js\nconst Maybe = require('rx-maybe');\n```\n\nLoading the CommonJS module provides the Maybe class.\n\n#### Browser\n\nLoading the JavaScript file for the rx-maybe provides the Maybe class\n\n## Documentation\n\nYou can read the documentation at the [official doc site](https://lxsmnsyc.github.io/rx-maybe/)\n\n## Build\n\nClone the repo first, then run the following to install the dependencies\n\n```bash\nnpm install\n```\n\nTo build the coverages, run the test suite, the docs, and the distributable modules:\n\n```bash\nnpm run build\n```\n\n## Changelogs\n* 0.3.0\n  - Replaced AbortController with [Cancellable](https://lxsmnsyc.github.io/rx-cancellable/).\n  - Renamed `doOnAbort` with `doOnCancel`\n* 0.2.0\n  - now uses [Schedulers](https://github.com/LXSMNSYC/rx-scheduler)\n  - `delay`, `delaySubscription`, `timeout` and `timer` now accepts `Schedulers` (defaults to `Scheduler.current`).\n  - added two new operators: `observeOn` (observes the emissions on a given Scheduler) and `subscribeOn` (subscribes to a given Single on a given Scheduler).\n* 0.1.0\n  * Release",
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"rx-maybe\",\n  \"version\": \"0.3.1\",\n  \"description\": \"represents a deferred computation and emission of a single value, no value at all or an exception.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"linux-mocha\": \"./node_modules/.bin/mocha --require @babel/register -R spec --recursive\",\n    \"linux-test\": \"./node_modules/.bin/nyc --reporter=html npm run linux-mocha\",\n    \"linux-docs\": \"./node_modules/.bin/esdoc\",\n    \"linux-cjs\": \"./node_modules/.bin/rollup src/index.js --format cjs --name \\\"Maybe\\\" --file index.js\",\n    \"linux-browser\": \"./node_modules/.bin/rollup src/index.js --format iife --name \\\"Maybe\\\" --file dist/index.js -g \\\"rx-cancellable:Cancellable\\\"\",\n    \"linux-minify\": \"npm run linux-browser && ./node_modules/.bin/terser dist/index.js --compress --mangle --output dist/index.min.js\",\n    \"linux-build\": \"npm run linux-cjs && npm run linux-minify && npm run linux-docs && npm run linux-test\",\n    \"win-mocha\": \"node node_modules/mocha/bin/mocha --require @babel/register -R spec --recursive\",\n    \"win-test\": \"node node_modules/nyc/bin/nyc.js --reporter=html npm run win-mocha\",\n    \"win-docs\": \"node node_modules/esdoc/out/src/ESDocCLI.js\",\n    \"win-cjs\": \"node node_modules/.bin/rollup src/index.js --format cjs --name \\\"Maybe\\\" --file index.js\",\n    \"win-browser\": \"node node_modules/.bin/rollup src/index.js --format iife --name \\\"Maybe\\\" --file dist/index.js -g \\\"rx-cancellable:Cancellable\\\"\",\n    \"win-minify\": \"npm run win-browser && node node_modules/.bin/terser dist/index.js --compress --mangle --output dist/index.min.js\",\n    \"win-build\": \"npm run win-cjs && npm run win-minify && npm run win-docs && npm run win-test\",\n    \"mocha\": \"npm run linux-mocha || npm run win-mocha\",\n    \"test\": \"npm run linux-test || npm run win-test\",\n    \"docs\": \"npm run linux-docs || npm run win-docs\",\n    \"cjs\": \"npm run linux-cjs || npm run win-cjs\",\n    \"browser\": \"npm run linux-browser || npm run win-browser\",\n    \"minify\": \"npm run linux-minify || npm run win-minify\",\n    \"build\": \"npm run cjs && npm run minify && npm run docs && npm test\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/LXSMNSYC/rx-maybe.git\"\n  },\n  \"keywords\": [\n    \"rx\",\n    \"rxjs\",\n    \"reactivex\",\n    \"maybe\"\n  ],\n  \"author\": \"LXSMNSYC (alexis.munsayac@gmail.com)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/LXSMNSYC/rx-maybe/issues\"\n  },\n  \"homepage\": \"https://github.com/LXSMNSYC/rx-maybe#readme\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.4.3\",\n    \"@babel/preset-env\": \"^7.4.3\",\n    \"@babel/register\": \"^7.4.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"esdoc-integrate-test-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.16.0\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-plugin-import\": \"^2.17.1\",\n    \"mocha\": \"^6.1.3\",\n    \"nyc\": \"^13.3.0\",\n    \"rollup\": \"^1.10.0\",\n    \"terser\": \"^3.17.0\"\n  },\n  \"dependencies\": {\n    \"rx-cancellable\": \"^0.3.0\",\n    \"rx-scheduler\": \"^0.2.4\"\n  }\n}\n",
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 277,
    "kind": "testFile",
    "name": "test/amb.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n/**\n *\n */\ndescribe('#amb', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.amb([Maybe.just('First'), Maybe.just('Second')]);\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should signal success from the earliest source.', (done) => {\n    const maybe = Maybe.amb([Maybe.just('Hello'), Maybe.timer(100)]);\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete from the earliest source.', (done) => {\n    const maybe = Maybe.amb([Maybe.empty(), Maybe.timer(100)]);\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the earliest source.', (done) => {\n    const maybe = Maybe.amb([Maybe.error(new Error('Hello')), Maybe.timer(100)]);\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if one of the source is non-Maybe.', (done) => {\n    const maybe = Maybe.amb(['Hello', Maybe.timer(100)]);\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if given argument is not Iterable', (done) => {\n    const maybe = Maybe.amb();\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/amb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/amb.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/amb.js~describe0",
    "access": "public",
    "description": "#amb",
    "lineNumber": 7
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it1",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 11
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it2",
    "access": "public",
    "description": "should signal success from the earliest source.",
    "lineNumber": 18
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it3",
    "access": "public",
    "description": "should signal complete from the earliest source.",
    "lineNumber": 29
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it4",
    "access": "public",
    "description": "should signal error from the earliest source.",
    "lineNumber": 40
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it5",
    "access": "public",
    "description": "should signal error if one of the source is non-Maybe.",
    "lineNumber": 51
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it6",
    "access": "public",
    "description": "should signal error if given argument is not Iterable",
    "lineNumber": 62
  },
  {
    "__docId__": 285,
    "kind": "testFile",
    "name": "test/ambWith.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#ambWith', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('First').ambWith(Maybe.just('Second'));\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the other value is non-Maybe', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.ambWith();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should signal success from the source (if earlier)', (done) => {\n    const maybe = Maybe.just('Hello').ambWith(Maybe.timer(100));\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success from the other (if earlier).', (done) => {\n    const maybe = Maybe.timer(100).ambWith(Maybe.just('Hello'));\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success from the source (if earlier)', (done) => {\n    const maybe = Maybe.empty().ambWith(Maybe.timer(100));\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success from the other (if earlier).', (done) => {\n    const maybe = Maybe.timer(100).ambWith(Maybe.empty());\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the source (if earlier).', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).ambWith(Maybe.timer(100));\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the other (if earlier).', (done) => {\n    const maybe = Maybe.timer(100).ambWith(Maybe.error(new Error('Hello')));\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/ambWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "test/ambWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/ambWith.js~describe7",
    "access": "public",
    "description": "#ambWith",
    "lineNumber": 8
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/ambWith.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe7.it8",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/ambWith.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe7.it9",
    "access": "public",
    "description": "should return the same instance if the other value is non-Maybe",
    "lineNumber": 19
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/ambWith.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe7.it10",
    "access": "public",
    "description": "should signal success from the source (if earlier)",
    "lineNumber": 27
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/ambWith.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe7.it11",
    "access": "public",
    "description": "should signal success from the other (if earlier).",
    "lineNumber": 38
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/ambWith.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe7.it12",
    "access": "public",
    "description": "should signal success from the source (if earlier)",
    "lineNumber": 49
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/ambWith.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe7.it13",
    "access": "public",
    "description": "should signal success from the other (if earlier).",
    "lineNumber": 60
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/ambWith.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe7.it14",
    "access": "public",
    "description": "should signal error from the source (if earlier).",
    "lineNumber": 71
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/ambWith.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe7.it15",
    "access": "public",
    "description": "should signal error from the other (if earlier).",
    "lineNumber": 82
  },
  {
    "__docId__": 295,
    "kind": "testFile",
    "name": "test/cache.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#cache', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello World').cache();\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should signal cached success value', (done) => {\n    let flag;\n    const maybe = Maybe.just('Hello World').delay(100).cache();\n\n    setTimeout(() => {\n      maybe.subscribe(\n        () => { flag = true; },\n        () => done(false),\n        () => done(false),\n      );\n      setTimeout(() => {\n        maybe.subscribe(\n          x => (flag ? done() : done(x)),\n          () => done(false),\n          () => done(false),\n        );\n      }, 100);\n    }, 200);\n  });\n  /**\n   *\n   */\n  it('should signal cached complete', (done) => {\n    let flag;\n    const maybe = Maybe.empty().delay(100).cache();\n\n    setTimeout(() => {\n      maybe.subscribe(\n        () => done(false),\n        () => { flag = true; },\n        () => done(false),\n      );\n      setTimeout(() => {\n        maybe.subscribe(\n          () => done(false),\n          () => (flag ? done() : done(false)),\n          () => done(false),\n        );\n      }, 100);\n    }, 200);\n  });\n  /**\n   *\n   */\n  it('should signal cached error value', (done) => {\n    let flag;\n    const maybe = Maybe.error(new Error('Hello')).delay(100).cache();\n\n    setTimeout(() => {\n      maybe.subscribe(\n        () => done(false),\n        () => done(false),\n        () => { flag = true; },\n      );\n\n      setTimeout(() => {\n        maybe.subscribe(\n          () => done(false),\n          () => done(false),\n          () => (flag ? done() : done(false)),\n        );\n      }, 100);\n    }, 200);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "test/cache.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cache.js~describe16",
    "access": "public",
    "description": "#cache",
    "lineNumber": 8
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/cache.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache.js~describe16.it17",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/cache.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache.js~describe16.it18",
    "access": "public",
    "description": "should signal cached success value",
    "lineNumber": 19
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/cache.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache.js~describe16.it19",
    "access": "public",
    "description": "should signal cached complete",
    "lineNumber": 41
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/cache.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache.js~describe16.it20",
    "access": "public",
    "description": "should signal cached error value",
    "lineNumber": 63
  },
  {
    "__docId__": 301,
    "kind": "testFile",
    "name": "test/catch.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#catch', () => {\n  /**\n   *\n   */\n  it('should create a Promise', () => {\n    const maybe = Maybe.just('Hello').catch(x => x);\n    assert(maybe instanceof Promise);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/catch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/catch.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/catch.js~describe21",
    "access": "public",
    "description": "#catch",
    "lineNumber": 8
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/catch.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/catch.js~describe21.it22",
    "access": "public",
    "description": "should create a Promise",
    "lineNumber": 12
  },
  {
    "__docId__": 304,
    "kind": "testFile",
    "name": "test/compose.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#compose', () => {\n  /**\n   *\n   */\n  it('should return the same instance if no function is provided', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.compose();\n\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should return a Maybe from the transformer', () => {\n    const maybe = Maybe.just('Hello').compose(source => source.map(x => `${x} World`));\n\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should correctly signal the composed Maybe', (done) => {\n    const maybe = Maybe.just('Hello').compose(source => source.map(x => `${x} World`));\n\n    maybe.subscribe(\n      x => (x === 'Hello World' ? done() : done(x)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the transformer function returned a non-Maybe', (done) => {\n    const maybe = Maybe.just('Hello').compose(() => undefined);\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/compose.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/compose.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/compose.js~describe23",
    "access": "public",
    "description": "#compose",
    "lineNumber": 8
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/compose.js~describe23",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe23.it24",
    "access": "public",
    "description": "should return the same instance if no function is provided",
    "lineNumber": 12
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/compose.js~describe23",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe23.it25",
    "access": "public",
    "description": "should return a Maybe from the transformer",
    "lineNumber": 21
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/compose.js~describe23",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe23.it26",
    "access": "public",
    "description": "should correctly signal the composed Maybe",
    "lineNumber": 29
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/compose.js~describe23",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe23.it27",
    "access": "public",
    "description": "should signal error if the transformer function returned a non-Maybe",
    "lineNumber": 41
  },
  {
    "__docId__": 310,
    "kind": "testFile",
    "name": "test/create.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#create', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.create(e => e.onSuccess('Hello World'));\n\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should signal error if the create received a non-function', (done) => {\n    const maybe = Maybe.create();\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the emitter signals success with undefined value.', (done) => {\n    const maybe = Maybe.create(e => e.onSuccess() || e.onSuccess());\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the emitter signals error with undefined value.', (done) => {\n    const maybe = Maybe.create(e => e.onError() || e.onError());\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should be cancelled successfully if emitter is cancelled before any signal.', (done) => {\n    const maybe = Maybe.create((e) => {\n      setTimeout(() => e.onSuccess(true), 100);\n    });\n\n    const controller = maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should signal error if subscriber throws an error.', (done) => {\n    const maybe = Maybe.create(() => {\n      throw new Error('Expected');\n    });\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/create.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "describe28",
    "testId": 28,
    "memberof": "test/create.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/create.js~describe28",
    "access": "public",
    "description": "#create",
    "lineNumber": 8
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/create.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe28.it29",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/create.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe28.it30",
    "access": "public",
    "description": "should signal error if the create received a non-function",
    "lineNumber": 20
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/create.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe28.it31",
    "access": "public",
    "description": "should signal error if the emitter signals success with undefined value.",
    "lineNumber": 32
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/create.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe28.it32",
    "access": "public",
    "description": "should signal error if the emitter signals error with undefined value.",
    "lineNumber": 44
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/create.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe28.it33",
    "access": "public",
    "description": "should be cancelled successfully if emitter is cancelled before any signal.",
    "lineNumber": 56
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/create.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe28.it34",
    "access": "public",
    "description": "should signal error if subscriber throws an error.",
    "lineNumber": 74
  },
  {
    "__docId__": 318,
    "kind": "testFile",
    "name": "test/defaultIfEmpty.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\ndescribe('#defaultIfEmpty', () => {\n  it('should return a Maybe', () => {\n    assert(Maybe.empty().defaultIfEmpty('Hello') instanceof Maybe);\n  });\n  it('should return same reference if value is null', () => {\n    const source = Maybe.empty();\n    assert(source === source.defaultIfEmpty());\n  });\n  it('should signal success if source signals success', (done) => {\n    const source = Maybe.just('Hello').defaultIfEmpty('World');\n\n    source.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  it('should signal success if source signals complete', (done) => {\n    const source = Maybe.empty().defaultIfEmpty('World');\n\n    source.subscribe(\n      x => (x === 'World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  it('should signal error if source signals error', (done) => {\n    const source = Maybe.error(new Error('Hello')).defaultIfEmpty('World');\n\n    source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/defaultIfEmpty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "test/defaultIfEmpty.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/defaultIfEmpty.js~describe35",
    "access": "public",
    "description": "#defaultIfEmpty",
    "lineNumber": 5
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/defaultIfEmpty.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/defaultIfEmpty.js~describe35.it36",
    "access": "public",
    "description": "should return a Maybe",
    "lineNumber": 6
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/defaultIfEmpty.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/defaultIfEmpty.js~describe35.it37",
    "access": "public",
    "description": "should return same reference if value is null",
    "lineNumber": 9
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/defaultIfEmpty.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/defaultIfEmpty.js~describe35.it38",
    "access": "public",
    "description": "should signal success if source signals success",
    "lineNumber": 13
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/defaultIfEmpty.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/defaultIfEmpty.js~describe35.it39",
    "access": "public",
    "description": "should signal success if source signals complete",
    "lineNumber": 22
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/defaultIfEmpty.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/defaultIfEmpty.js~describe35.it40",
    "access": "public",
    "description": "should signal error if source signals error",
    "lineNumber": 31
  },
  {
    "__docId__": 325,
    "kind": "testFile",
    "name": "test/defer.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#defer', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.defer(() => Maybe.just('Hello World'));\n\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const maybe = Maybe.defer(() => Maybe.just('Hello World'));\n\n    maybe.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if callable returns a non-Maybe', (done) => {\n    const maybe = Maybe.defer(() => {});\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if callable throws an error', (done) => {\n    const maybe = Maybe.defer(() => {\n      throw new Error('Expected');\n    });\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/defer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/defer.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/defer.js~describe41",
    "access": "public",
    "description": "#defer",
    "lineNumber": 8
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/defer.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe41.it42",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/defer.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe41.it43",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 20
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/defer.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe41.it44",
    "access": "public",
    "description": "should signal error if callable returns a non-Maybe",
    "lineNumber": 32
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/defer.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe41.it45",
    "access": "public",
    "description": "should signal error if callable throws an error",
    "lineNumber": 44
  },
  {
    "__docId__": 331,
    "kind": "testFile",
    "name": "test/delay.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#delay', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').delay(100);\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is not a number.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.delay();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should signal success with the given value.', (done) => {\n    const maybe = Maybe.just('Hello').delay(100);\n    maybe.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete', (done) => {\n    const maybe = Maybe.empty().delay(100);\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).delay(100);\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      x => (x === 'Hello' ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Maybe.just('Hello').delay(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal complete if cancelled.', (done) => {\n    const source = Maybe.empty().delay(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if cancelled.', (done) => {\n    const source = Maybe.error(new Error('Hello')).delay(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/delay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "describe46",
    "testId": 46,
    "memberof": "test/delay.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/delay.js~describe46",
    "access": "public",
    "description": "#delay",
    "lineNumber": 8
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/delay.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe46.it47",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/delay.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe46.it48",
    "access": "public",
    "description": "should return the same instance if the amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/delay.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe46.it49",
    "access": "public",
    "description": "should signal success with the given value.",
    "lineNumber": 27
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/delay.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe46.it50",
    "access": "public",
    "description": "should signal complete",
    "lineNumber": 38
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/delay.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe46.it51",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 49
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/delay.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe46.it52",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 60
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/delay.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe46.it53",
    "access": "public",
    "description": "should not signal complete if cancelled.",
    "lineNumber": 76
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/delay.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe46.it54",
    "access": "public",
    "description": "should not signal error if cancelled.",
    "lineNumber": 92
  },
  {
    "__docId__": 341,
    "kind": "testFile",
    "name": "test/delaySubscription.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#delaySubscription', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').delaySubscription(100);\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is not a number.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.delaySubscription();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should signal success with the given value.', (done) => {\n    const maybe = Maybe.just('Hello').delaySubscription(100);\n    maybe.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete.', (done) => {\n    const maybe = Maybe.empty().delaySubscription(100);\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).delaySubscription(100);\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      x => (x === 'Hello' ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Maybe.just('Hello').delaySubscription(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal complete if cancelled.', (done) => {\n    const source = Maybe.empty().delaySubscription(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if cancelled.', (done) => {\n    const source = Maybe.error(new Error('Hello')).delaySubscription(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/delaySubscription.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/delaySubscription.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/delaySubscription.js~describe55",
    "access": "public",
    "description": "#delaySubscription",
    "lineNumber": 8
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it56",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it57",
    "access": "public",
    "description": "should return the same instance if the amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it58",
    "access": "public",
    "description": "should signal success with the given value.",
    "lineNumber": 27
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it59",
    "access": "public",
    "description": "should signal complete.",
    "lineNumber": 38
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it60",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 49
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it61",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 60
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it62",
    "access": "public",
    "description": "should not signal complete if cancelled.",
    "lineNumber": 76
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it63",
    "access": "public",
    "description": "should not signal error if cancelled.",
    "lineNumber": 92
  },
  {
    "__docId__": 351,
    "kind": "testFile",
    "name": "test/delayUntil.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#delayUntil', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').delayUntil(Maybe.timer(100));\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the provided value is not a Maybe.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.delayUntil();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should signal success with the given value.', (done) => {\n    const maybe = Maybe.just('Hello').delayUntil(Maybe.timer(100));\n    maybe.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete.', (done) => {\n    const maybe = Maybe.empty().delayUntil(Maybe.timer(100));\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).delayUntil(Maybe.timer(100));\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Maybe signals error.', (done) => {\n    const maybe = Maybe.error(new Error('World')).delayUntil(Maybe.error(new Error('Hello')));\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Maybe.just('Hello').delayUntil(Maybe.timer(100));\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal complete if cancelled.', (done) => {\n    const source = Maybe.empty().delayUntil(Maybe.timer(100));\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if cancelled.', (done) => {\n    const source = Maybe.error(new Error('Hello')).delayUntil(Maybe.timer(100));\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/delayUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "describe64",
    "testId": 64,
    "memberof": "test/delayUntil.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/delayUntil.js~describe64",
    "access": "public",
    "description": "#delayUntil",
    "lineNumber": 8
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/delayUntil.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe64.it65",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/delayUntil.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe64.it66",
    "access": "public",
    "description": "should return the same instance if the provided value is not a Maybe.",
    "lineNumber": 19
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/delayUntil.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe64.it67",
    "access": "public",
    "description": "should signal success with the given value.",
    "lineNumber": 27
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/delayUntil.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe64.it68",
    "access": "public",
    "description": "should signal complete.",
    "lineNumber": 38
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/delayUntil.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe64.it69",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 49
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/delayUntil.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe64.it70",
    "access": "public",
    "description": "should signal error if other Maybe signals error.",
    "lineNumber": 60
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/delayUntil.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe64.it71",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 71
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/delayUntil.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe64.it72",
    "access": "public",
    "description": "should not signal complete if cancelled.",
    "lineNumber": 87
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/delayUntil.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe64.it73",
    "access": "public",
    "description": "should not signal error if cancelled.",
    "lineNumber": 103
  },
  {
    "__docId__": 362,
    "kind": "testFile",
    "name": "test/doAfterSuccess.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#doAfterSuccess', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').doAfterSuccess(x => console.log(`after success: ${x}`));\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.doAfterSuccess();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should call the given function after success.', (done) => {\n    let called;\n    const source = Maybe.just('Hello');\n    const maybe = source.doAfterSuccess(() => called && done());\n    maybe.subscribe(\n      () => { called = true; },\n      () => done(false),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/doAfterSuccess.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "test/doAfterSuccess.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doAfterSuccess.js~describe74",
    "access": "public",
    "description": "#doAfterSuccess",
    "lineNumber": 8
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/doAfterSuccess.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterSuccess.js~describe74.it75",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/doAfterSuccess.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterSuccess.js~describe74.it76",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/doAfterSuccess.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterSuccess.js~describe74.it77",
    "access": "public",
    "description": "should call the given function after success.",
    "lineNumber": 27
  },
  {
    "__docId__": 367,
    "kind": "testFile",
    "name": "test/doAfterTerminate.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#doAfterTerminate', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').doAfterSuccess(() => {});\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.doAfterTerminate();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should call the given function after success.', (done) => {\n    let called;\n    const source = Maybe.just('Hello');\n    const maybe = source.doAfterTerminate(() => called && done());\n    maybe.subscribe(\n      () => { called = true; },\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function after complete.', (done) => {\n    let called;\n    const source = Maybe.empty();\n    const maybe = source.doAfterTerminate(() => called && done());\n    maybe.subscribe(\n      () => done(false),\n      () => { called = true; },\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function after error.', (done) => {\n    let called;\n    const source = Maybe.error(new Error('Hello'));\n    const maybe = source.doAfterTerminate(() => called && done());\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => { called = true; },\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/doAfterTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "describe78",
    "testId": 78,
    "memberof": "test/doAfterTerminate.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe78",
    "access": "public",
    "description": "#doAfterTerminate",
    "lineNumber": 8
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/doAfterTerminate.js~describe78",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe78.it79",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/doAfterTerminate.js~describe78",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe78.it80",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/doAfterTerminate.js~describe78",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe78.it81",
    "access": "public",
    "description": "should call the given function after success.",
    "lineNumber": 27
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/doAfterTerminate.js~describe78",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe78.it82",
    "access": "public",
    "description": "should call the given function after complete.",
    "lineNumber": 40
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/doAfterTerminate.js~describe78",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe78.it83",
    "access": "public",
    "description": "should call the given function after error.",
    "lineNumber": 53
  },
  {
    "__docId__": 374,
    "kind": "testFile",
    "name": "test/doFinally.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#doFinally', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').doFinally(() => {});\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.doFinally();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should call the given function after success.', (done) => {\n    let called;\n    const source = Maybe.just('Hello');\n    const maybe = source.doFinally(() => called && done());\n    maybe.subscribe(\n      () => { called = true; },\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function after complete.', (done) => {\n    let called;\n    const source = Maybe.empty();\n    const maybe = source.doFinally(() => called && done());\n    maybe.subscribe(\n      () => done(false),\n      () => { called = true; },\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function after error.', (done) => {\n    let called;\n    const source = Maybe.error(new Error('Hello'));\n    const maybe = source.doFinally(() => called && done());\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => { called = true; },\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on dispose.', (done) => {\n    const source = Maybe.timer(100);\n    const maybe = source.doFinally(() => done());\n\n    const controller = maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n    controller.cancel();\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/doFinally.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "test/doFinally.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doFinally.js~describe84",
    "access": "public",
    "description": "#doFinally",
    "lineNumber": 8
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/doFinally.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe84.it85",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/doFinally.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe84.it86",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/doFinally.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe84.it87",
    "access": "public",
    "description": "should call the given function after success.",
    "lineNumber": 27
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/doFinally.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe84.it88",
    "access": "public",
    "description": "should call the given function after complete.",
    "lineNumber": 40
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/doFinally.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe84.it89",
    "access": "public",
    "description": "should call the given function after error.",
    "lineNumber": 53
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/doFinally.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe84.it90",
    "access": "public",
    "description": "should call the given function on dispose.",
    "lineNumber": 66
  },
  {
    "__docId__": 382,
    "kind": "testFile",
    "name": "test/doOnCancel.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#doOnCancel', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').doOnCancel(() => {});\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.doOnCancel();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should signal the success value then fire cancel callback.', (done) => {\n    let called;\n    const source = Maybe.just('Hello');\n    const maybe = source.doOnCancel(() => called && done());\n\n    maybe.subscribe(\n      () => { called = true; },\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal the complete then fire cancel callback.', (done) => {\n    let called;\n    const source = Maybe.empty();\n    const maybe = source.doOnCancel(() => called && done());\n\n    maybe.subscribe(\n      () => done(false),\n      () => { called = true; },\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal the error value then fire cancel callback.', (done) => {\n    let called;\n    const source = Maybe.error(new Error('Hello'));\n    const maybe = source.doOnCancel(() => called && done());\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => { called = true; },\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on cancel.', (done) => {\n    const source = Maybe.just('Hello').delay(100);\n    const maybe = source.doOnCancel(() => done());\n\n    const controller = maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n    controller.cancel();\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/doOnCancel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "test/doOnCancel.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnCancel.js~describe91",
    "access": "public",
    "description": "#doOnCancel",
    "lineNumber": 8
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/doOnCancel.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnCancel.js~describe91.it92",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/doOnCancel.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnCancel.js~describe91.it93",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/doOnCancel.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnCancel.js~describe91.it94",
    "access": "public",
    "description": "should signal the success value then fire cancel callback.",
    "lineNumber": 27
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/doOnCancel.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnCancel.js~describe91.it95",
    "access": "public",
    "description": "should signal the complete then fire cancel callback.",
    "lineNumber": 41
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/doOnCancel.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnCancel.js~describe91.it96",
    "access": "public",
    "description": "should signal the error value then fire cancel callback.",
    "lineNumber": 55
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/doOnCancel.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnCancel.js~describe91.it97",
    "access": "public",
    "description": "should call the given function on cancel.",
    "lineNumber": 69
  },
  {
    "__docId__": 390,
    "kind": "testFile",
    "name": "test/doOnComplete.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#doOnComplete', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.empty().doOnComplete(() => {});\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Maybe.empty();\n    const maybe = source.doOnComplete();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Maybe.empty();\n    const maybe = source.doOnComplete(() => { called = true; });\n    maybe.subscribe(\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/doOnComplete.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "describe98",
    "testId": 98,
    "memberof": "test/doOnComplete.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnComplete.js~describe98",
    "access": "public",
    "description": "#doOnComplete",
    "lineNumber": 8
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/doOnComplete.js~describe98",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnComplete.js~describe98.it99",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/doOnComplete.js~describe98",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnComplete.js~describe98.it100",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/doOnComplete.js~describe98",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnComplete.js~describe98.it101",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 27
  },
  {
    "__docId__": 395,
    "kind": "testFile",
    "name": "test/doOnError.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#doOnError', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').doOnError(() => {});\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.doOnError();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Maybe.error(new Error('Hello'));\n    const maybe = source.doOnError(() => { called = true; });\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/doOnError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "describe102",
    "testId": 102,
    "memberof": "test/doOnError.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnError.js~describe102",
    "access": "public",
    "description": "#doOnError",
    "lineNumber": 8
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/doOnError.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnError.js~describe102.it103",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/doOnError.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnError.js~describe102.it104",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/doOnError.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnError.js~describe102.it105",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 27
  },
  {
    "__docId__": 400,
    "kind": "testFile",
    "name": "test/doOnEvent.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#doOnEvent', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').doOnEvent(() => {});\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.doOnEvent();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should call the given function on success.', (done) => {\n    let called;\n    const source = Maybe.just('Hello');\n    const maybe = source.doOnEvent(() => { called = true; });\n    maybe.subscribe(\n      () => called && done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on complete.', (done) => {\n    let called;\n    const source = Maybe.empty();\n    const maybe = source.doOnEvent(() => { called = true; });\n    maybe.subscribe(\n      () => done(false),\n      () => called && done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Maybe.error(new Error('Hello'));\n    const maybe = source.doOnEvent(() => { called = true; });\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/doOnEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "describe106",
    "testId": 106,
    "memberof": "test/doOnEvent.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnEvent.js~describe106",
    "access": "public",
    "description": "#doOnEvent",
    "lineNumber": 8
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/doOnEvent.js~describe106",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe106.it107",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/doOnEvent.js~describe106",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe106.it108",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/doOnEvent.js~describe106",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe106.it109",
    "access": "public",
    "description": "should call the given function on success.",
    "lineNumber": 27
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/doOnEvent.js~describe106",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe106.it110",
    "access": "public",
    "description": "should call the given function on complete.",
    "lineNumber": 40
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/doOnEvent.js~describe106",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe106.it111",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 53
  },
  {
    "__docId__": 407,
    "kind": "testFile",
    "name": "test/doOnSubscribe.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#doOnSubscribe', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').doOnSubscribe(() => {});\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if no function is passed', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.doOnSubscribe();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should be called before actual subscription.', (done) => {\n    let called;\n    const maybe = Maybe.just('Hello').doOnSubscribe(() => { called = true; });\n    maybe.subscribeWith({\n      onSubscribe() {\n        if (called) {\n          done();\n        } else {\n          done(false);\n        }\n      },\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/doOnSubscribe.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "describe112",
    "testId": 112,
    "memberof": "test/doOnSubscribe.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe112",
    "access": "public",
    "description": "#doOnSubscribe",
    "lineNumber": 8
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/doOnSubscribe.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe112.it113",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/doOnSubscribe.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe112.it114",
    "access": "public",
    "description": "should return the same instance if no function is passed",
    "lineNumber": 19
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/doOnSubscribe.js~describe112",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe112.it115",
    "access": "public",
    "description": "should be called before actual subscription.",
    "lineNumber": 27
  },
  {
    "__docId__": 412,
    "kind": "testFile",
    "name": "test/doOnSuccess.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#doOnSuccess', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').doOnSuccess(() => {});\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.doOnSuccess();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should call the given function on success.', (done) => {\n    let called;\n    const source = Maybe.just('Hello');\n    const maybe = source.doOnSuccess(() => { called = true; });\n    maybe.subscribe(\n      () => called && done(),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/doOnSuccess.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "describe116",
    "testId": 116,
    "memberof": "test/doOnSuccess.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnSuccess.js~describe116",
    "access": "public",
    "description": "#doOnSuccess",
    "lineNumber": 8
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/doOnSuccess.js~describe116",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSuccess.js~describe116.it117",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/doOnSuccess.js~describe116",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSuccess.js~describe116.it118",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 416,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "test/doOnSuccess.js~describe116",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSuccess.js~describe116.it119",
    "access": "public",
    "description": "should call the given function on success.",
    "lineNumber": 27
  },
  {
    "__docId__": 417,
    "kind": "testFile",
    "name": "test/doOnTerminate.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#doOnTerminate', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').doOnTerminate(() => {});\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.doOnTerminate();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should call the given function on success.', (done) => {\n    let called;\n    const source = Maybe.just('Hello');\n    const maybe = source.doOnTerminate(() => { called = true; });\n    maybe.subscribe(\n      () => called && done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on complete.', (done) => {\n    let called;\n    const source = Maybe.empty();\n    const maybe = source.doOnTerminate(() => { called = true; });\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => called && done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Maybe.error(new Error('Hello'));\n    const maybe = source.doOnTerminate(() => { called = true; });\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/doOnTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "describe120",
    "testId": 120,
    "memberof": "test/doOnTerminate.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnTerminate.js~describe120",
    "access": "public",
    "description": "#doOnTerminate",
    "lineNumber": 8
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/doOnTerminate.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe120.it121",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/doOnTerminate.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe120.it122",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/doOnTerminate.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe120.it123",
    "access": "public",
    "description": "should call the given function on success.",
    "lineNumber": 27
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/doOnTerminate.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe120.it124",
    "access": "public",
    "description": "should call the given function on complete.",
    "lineNumber": 40
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/doOnTerminate.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe120.it125",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 53
  },
  {
    "__docId__": 424,
    "kind": "testFile",
    "name": "test/error.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#error', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.error(new Error('Hello World'));\n\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should error with the given value.', (done) => {\n    const maybe = Maybe.error(new Error('Hello World'));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the a message if the given value is null', (done) => {\n    const maybe = Maybe.error();\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the a message if the callable returned null', (done) => {\n    const maybe = Maybe.error(() => {});\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should error if the callable throws an error.', (done) => {\n    const maybe = Maybe.error(() => {\n      throw new Error('Expected');\n    });\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "describe126",
    "testId": 126,
    "memberof": "test/error.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/error.js~describe126",
    "access": "public",
    "description": "#error",
    "lineNumber": 8
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/error.js~describe126",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe126.it127",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/error.js~describe126",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe126.it128",
    "access": "public",
    "description": "should error with the given value.",
    "lineNumber": 20
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/error.js~describe126",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe126.it129",
    "access": "public",
    "description": "should error with the a message if the given value is null",
    "lineNumber": 32
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/error.js~describe126",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe126.it130",
    "access": "public",
    "description": "should error with the a message if the callable returned null",
    "lineNumber": 44
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/error.js~describe126",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe126.it131",
    "access": "public",
    "description": "should error if the callable throws an error.",
    "lineNumber": 56
  },
  {
    "__docId__": 431,
    "kind": "testFile",
    "name": "test/filter.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\ndescribe('#filter', () => {\n  it('should return a Maybe', () => {\n    assert(Maybe.empty().filter(Maybe.just('Hello')) instanceof Maybe);\n  });\n  it('should return same reference if value is non-function', () => {\n    const source = Maybe.empty();\n    assert(source === source.filter());\n  });\n  it('should signal complete if source signals complete', (done) => {\n    const source = Maybe.empty().filter(Boolean);\n\n    source.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  it('should signal success if source signals success and predicate returns true', (done) => {\n    const source = Maybe.just('Hello').filter(Boolean);\n\n    source.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  it('should signal complete if source signals success and predicate returns false', (done) => {\n    const source = Maybe.just('Hello').filter(x => x == null);\n\n    source.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  it('should signal error if source  signals success and predicate throws error', (done) => {\n    const source = Maybe.just('Hello').filter((x) => { throw new Error(x); });\n\n    source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  it('should signal error if source signals error', (done) => {\n    const source = Maybe.error(new Error('Hello')).filter(Boolean);\n\n    source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/filter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "describe132",
    "testId": 132,
    "memberof": "test/filter.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/filter.js~describe132",
    "access": "public",
    "description": "#filter",
    "lineNumber": 5
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/filter.js~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "test/filter.js~describe132.it133",
    "access": "public",
    "description": "should return a Maybe",
    "lineNumber": 6
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/filter.js~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "test/filter.js~describe132.it134",
    "access": "public",
    "description": "should return same reference if value is non-function",
    "lineNumber": 9
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/filter.js~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "test/filter.js~describe132.it135",
    "access": "public",
    "description": "should signal complete if source signals complete",
    "lineNumber": 13
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/filter.js~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "test/filter.js~describe132.it136",
    "access": "public",
    "description": "should signal success if source signals success and predicate returns true",
    "lineNumber": 22
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/filter.js~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "test/filter.js~describe132.it137",
    "access": "public",
    "description": "should signal complete if source signals success and predicate returns false",
    "lineNumber": 31
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/filter.js~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "test/filter.js~describe132.it138",
    "access": "public",
    "description": "should signal error if source  signals success and predicate throws error",
    "lineNumber": 40
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "test/filter.js~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "test/filter.js~describe132.it139",
    "access": "public",
    "description": "should signal error if source signals error",
    "lineNumber": 49
  },
  {
    "__docId__": 440,
    "kind": "testFile",
    "name": "test/flatMap.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#flatMap', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').flatMap(x => Maybe.just(`${x} World`));\n\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.flatMap();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should signal error if mapper returns a non-Maybe', (done) => {\n    const maybe = Maybe.just('Hello').flatMap(() => {});\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete if source emits a complete signal', (done) => {\n    const maybe = Maybe.empty().flatMap(() => Maybe.just('Hello'));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if source emits an error signal', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).flatMap(() => Maybe.just('Hello'));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success of the returned Maybe', (done) => {\n    const maybe = Maybe.just('Hello').flatMap(x => Maybe.just(`${x} World`));\n\n    maybe.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete of the returned Maybe', (done) => {\n    const maybe = Maybe.just('Hello').flatMap(() => Maybe.empty());\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error of the returned Maybe', (done) => {\n    const maybe = Maybe.just('Hello').flatMap(x => Maybe.error(new Error(x)));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/flatMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "describe140",
    "testId": 140,
    "memberof": "test/flatMap.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/flatMap.js~describe140",
    "access": "public",
    "description": "#flatMap",
    "lineNumber": 8
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/flatMap.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe140.it141",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/flatMap.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe140.it142",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 20
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/flatMap.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe140.it143",
    "access": "public",
    "description": "should signal error if mapper returns a non-Maybe",
    "lineNumber": 28
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/flatMap.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe140.it144",
    "access": "public",
    "description": "should signal complete if source emits a complete signal",
    "lineNumber": 40
  },
  {
    "__docId__": 446,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/flatMap.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe140.it145",
    "access": "public",
    "description": "should signal error if source emits an error signal",
    "lineNumber": 52
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/flatMap.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe140.it146",
    "access": "public",
    "description": "should signal success of the returned Maybe",
    "lineNumber": 64
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "test/flatMap.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe140.it147",
    "access": "public",
    "description": "should signal complete of the returned Maybe",
    "lineNumber": 76
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/flatMap.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe140.it148",
    "access": "public",
    "description": "should signal error of the returned Maybe",
    "lineNumber": 88
  },
  {
    "__docId__": 450,
    "kind": "testFile",
    "name": "test/fromCallable.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#fromCallable', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.fromCallable(() => 'Hello World');\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const maybe = Maybe.fromCallable(() => 'Hello World');\n\n    maybe.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should complete', (done) => {\n    const maybe = Maybe.fromCallable(() => {});\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the callable throws an error.', (done) => {\n    const maybe = Maybe.fromCallable(() => {\n      throw new Error('Expected');\n    });\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an success if the callable returns a resolved Promise with a value.', (done) => {\n    const maybe = Maybe.fromCallable(() => Promise.resolve('Hello'));\n\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an complete if the callable returns a resolved Promise with no value.', (done) => {\n    const maybe = Maybe.fromCallable(() => Promise.resolve());\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the callable returns a rejected Promise.', (done) => {\n    const maybe = Maybe.fromCallable(() => Promise.reject(new Error('Expected')));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the callable is not a function', (done) => {\n    const maybe = Maybe.fromCallable();\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      e => (e === 'Maybe.fromCallable: callable received is not a function.' ? done() : done(false)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/fromCallable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 451,
    "kind": "test",
    "name": "describe149",
    "testId": 149,
    "memberof": "test/fromCallable.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/fromCallable.js~describe149",
    "access": "public",
    "description": "#fromCallable",
    "lineNumber": 8
  },
  {
    "__docId__": 452,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/fromCallable.js~describe149",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe149.it150",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "test/fromCallable.js~describe149",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe149.it151",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 19
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/fromCallable.js~describe149",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe149.it152",
    "access": "public",
    "description": "should complete",
    "lineNumber": 31
  },
  {
    "__docId__": 455,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/fromCallable.js~describe149",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe149.it153",
    "access": "public",
    "description": "should signal an error if the callable throws an error.",
    "lineNumber": 43
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/fromCallable.js~describe149",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe149.it154",
    "access": "public",
    "description": "should signal an success if the callable returns a resolved Promise with a value.",
    "lineNumber": 57
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/fromCallable.js~describe149",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe149.it155",
    "access": "public",
    "description": "should signal an complete if the callable returns a resolved Promise with no value.",
    "lineNumber": 69
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "test/fromCallable.js~describe149",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe149.it156",
    "access": "public",
    "description": "should signal an error if the callable returns a rejected Promise.",
    "lineNumber": 81
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/fromCallable.js~describe149",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe149.it157",
    "access": "public",
    "description": "should signal an error if the callable is not a function",
    "lineNumber": 93
  },
  {
    "__docId__": 460,
    "kind": "testFile",
    "name": "test/fromPromise.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n\n/**\n *\n */\ndescribe('#fromPromise', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.fromPromise(new Promise(res => res('Hello World')));\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const maybe = Maybe.fromPromise(new Promise(res => res('Hello World')));\n\n    maybe.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n\n  /**\n   *\n   */\n  it('should signal error if the given value is not Promise like', (done) => {\n    const maybe = Maybe.fromPromise();\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/fromPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "describe158",
    "testId": 158,
    "memberof": "test/fromPromise.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/fromPromise.js~describe158",
    "access": "public",
    "description": "#fromPromise",
    "lineNumber": 9
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "test/fromPromise.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromPromise.js~describe158.it159",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 13
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "test/fromPromise.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromPromise.js~describe158.it160",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 20
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/fromPromise.js~describe158",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromPromise.js~describe158.it161",
    "access": "public",
    "description": "should signal error if the given value is not Promise like",
    "lineNumber": 33
  },
  {
    "__docId__": 465,
    "kind": "testFile",
    "name": "test/fromResolvable.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#fromResolvable', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.fromResolvable(res => res('Hello World'));\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const maybe = Maybe.fromResolvable(res => res('Hello World'));\n\n    maybe.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should complete.', (done) => {\n    const maybe = Maybe.fromResolvable(res => res());\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the given error.', (done) => {\n    const maybe = Maybe.fromResolvable((res, rej) => rej(new Error('Hello World')));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the given value is not a function', (done) => {\n    const maybe = Maybe.fromResolvable();\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/fromResolvable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "test/fromResolvable.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/fromResolvable.js~describe162",
    "access": "public",
    "description": "#fromResolvable",
    "lineNumber": 8
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/fromResolvable.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe162.it163",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/fromResolvable.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe162.it164",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 19
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/fromResolvable.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe162.it165",
    "access": "public",
    "description": "should complete.",
    "lineNumber": 31
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "test/fromResolvable.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe162.it166",
    "access": "public",
    "description": "should error with the given error.",
    "lineNumber": 43
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/fromResolvable.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe162.it167",
    "access": "public",
    "description": "should signal error if the given value is not a function",
    "lineNumber": 55
  },
  {
    "__docId__": 472,
    "kind": "testFile",
    "name": "test/just.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#just', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello World');\n\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const maybe = Maybe.just('Hello World');\n\n    maybe.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if value is undefined.', (done) => {\n    const maybe = Maybe.just();\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/just.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "describe168",
    "testId": 168,
    "memberof": "test/just.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/just.js~describe168",
    "access": "public",
    "description": "#just",
    "lineNumber": 8
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "test/just.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/just.js~describe168.it169",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "test/just.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/just.js~describe168.it170",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 20
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/just.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/just.js~describe168.it171",
    "access": "public",
    "description": "should emit error if value is undefined.",
    "lineNumber": 32
  },
  {
    "__docId__": 477,
    "kind": "testFile",
    "name": "test/lift.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n/**\n *\n */\ndescribe('#lift', () => {\n  /**\n   *\n   */\n  it('should return the same instance if no function is provided', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.lift();\n\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should signal an error if the lift operator returned a non-Observer', (done) => {\n    const maybe = Maybe.just('Hello').lift(() => {});\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should subscribe successfully', (done) => {\n    const maybe = Maybe.just('Hello').lift(observer => ({ onSubscribe: observer.onSubscribe, onSuccess: observer.onSuccess }));\n\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/lift.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "describe172",
    "testId": 172,
    "memberof": "test/lift.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/lift.js~describe172",
    "access": "public",
    "description": "#lift",
    "lineNumber": 7
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/lift.js~describe172",
    "testDepth": 1,
    "static": true,
    "longname": "test/lift.js~describe172.it173",
    "access": "public",
    "description": "should return the same instance if no function is provided",
    "lineNumber": 11
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "test/lift.js~describe172",
    "testDepth": 1,
    "static": true,
    "longname": "test/lift.js~describe172.it174",
    "access": "public",
    "description": "should signal an error if the lift operator returned a non-Observer",
    "lineNumber": 20
  },
  {
    "__docId__": 481,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "test/lift.js~describe172",
    "testDepth": 1,
    "static": true,
    "longname": "test/lift.js~describe172.it175",
    "access": "public",
    "description": "should subscribe successfully",
    "lineNumber": 32
  },
  {
    "__docId__": 482,
    "kind": "testFile",
    "name": "test/map.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#map', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').map(x => `${x} World`);\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const maybe = Maybe.just('Hello').map(x => `${x} World`);\n\n    maybe.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the mapper throws an error', (done) => {\n    const maybe = Maybe.just('Hello').map(() => {\n      throw new Error('Expected');\n    });\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the mapper returns undefined', (done) => {\n    const maybe = Maybe.just('Hello').map(() => undefined);\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should retain the value if no function is supplied.', (done) => {\n    const maybe = Maybe.just('Hello').map();\n\n    maybe.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "describe176",
    "testId": 176,
    "memberof": "test/map.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/map.js~describe176",
    "access": "public",
    "description": "#map",
    "lineNumber": 8
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/map.js~describe176",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.js~describe176.it177",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/map.js~describe176",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.js~describe176.it178",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 19
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/map.js~describe176",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.js~describe176.it179",
    "access": "public",
    "description": "should signal an error if the mapper throws an error",
    "lineNumber": 30
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/map.js~describe176",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.js~describe176.it180",
    "access": "public",
    "description": "should signal an error if the mapper returns undefined",
    "lineNumber": 44
  },
  {
    "__docId__": 488,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "test/map.js~describe176",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.js~describe176.it181",
    "access": "public",
    "description": "should retain the value if no function is supplied.",
    "lineNumber": 56
  },
  {
    "__docId__": 489,
    "kind": "testFile",
    "name": "test/merge.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#merge', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.merge(Maybe.just(Maybe.just('Hello')));\n\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should signal error if no source is provided', (done) => {\n    const maybe = Maybe.merge();\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if source emitted a non-Maybe', (done) => {\n    const maybe = Maybe.merge(Maybe.just('Hello'));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete if source emits a complete signal', (done) => {\n    const maybe = Maybe.merge(Maybe.empty());\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if source emits an error signal', (done) => {\n    const maybe = Maybe.merge(Maybe.error(new Error('Hello')));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success of the signaled Maybe', (done) => {\n    const maybe = Maybe.merge(Maybe.just(Maybe.just('Hello')));\n\n    maybe.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete of the signaled Maybe', (done) => {\n    const maybe = Maybe.merge(Maybe.just(Maybe.empty()));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/merge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "describe182",
    "testId": 182,
    "memberof": "test/merge.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/merge.js~describe182",
    "access": "public",
    "description": "#merge",
    "lineNumber": 8
  },
  {
    "__docId__": 491,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "test/merge.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe182.it183",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/merge.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe182.it184",
    "access": "public",
    "description": "should signal error if no source is provided",
    "lineNumber": 20
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "test/merge.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe182.it185",
    "access": "public",
    "description": "should signal error if source emitted a non-Maybe",
    "lineNumber": 32
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/merge.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe182.it186",
    "access": "public",
    "description": "should signal complete if source emits a complete signal",
    "lineNumber": 44
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "test/merge.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe182.it187",
    "access": "public",
    "description": "should signal error if source emits an error signal",
    "lineNumber": 56
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/merge.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe182.it188",
    "access": "public",
    "description": "should signal success of the signaled Maybe",
    "lineNumber": 68
  },
  {
    "__docId__": 497,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "test/merge.js~describe182",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe182.it189",
    "access": "public",
    "description": "should signal complete of the signaled Maybe",
    "lineNumber": 80
  },
  {
    "__docId__": 498,
    "kind": "testFile",
    "name": "test/never.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#never', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.never();\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should not signal.', () => {\n    const maybe = Maybe.never();\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/never.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 499,
    "kind": "test",
    "name": "describe190",
    "testId": 190,
    "memberof": "test/never.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/never.js~describe190",
    "access": "public",
    "description": "#never",
    "lineNumber": 8
  },
  {
    "__docId__": 500,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/never.js~describe190",
    "testDepth": 1,
    "static": true,
    "longname": "test/never.js~describe190.it191",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "test/never.js~describe190",
    "testDepth": 1,
    "static": true,
    "longname": "test/never.js~describe190.it192",
    "access": "public",
    "description": "should not signal.",
    "lineNumber": 19
  },
  {
    "__docId__": 502,
    "kind": "testFile",
    "name": "test/observeOn.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Scheduler from 'rx-scheduler';\nimport Maybe from '../src/maybe';\n\ndescribe('#observeOn', () => {\n  it('should return a Maybe', () => {\n    assert(Maybe.empty().observeOn(Scheduler.current));\n  });\n  it('should be synchronous with non-Scheduler', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.just('Hello World').observeOn();\n\n    maybe.subscribe(\n      () => { flag = true; },\n      done,\n      done,\n    );\n\n    if (flag) {\n      done();\n    } else {\n      done(false);\n    }\n  });\n  it('should be synchronous with Scheduler.current', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.empty().observeOn(Scheduler.current);\n\n    maybe.subscribe(\n      done,\n      () => { flag = true; },\n      done,\n    );\n\n    if (flag) {\n      done();\n    } else {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.tick', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.empty().observeOn(Scheduler.tick);\n\n    maybe.subscribe(\n      done,\n      () => { flag = true; },\n      done,\n    );\n\n    process.nextTick(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.async', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.empty().observeOn(Scheduler.async);\n\n    maybe.subscribe(\n      done,\n      () => { flag = true; },\n      done,\n    );\n\n    Promise.resolve().then(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.immediate', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.empty().observeOn(Scheduler.immediate);\n\n    maybe.subscribe(\n      done,\n      () => { flag = true; },\n      done,\n    );\n\n    setImmediate(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.timeout', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.error(new Error('Hello World')).observeOn(Scheduler.timeout);\n\n    maybe.subscribe(\n      done,\n      done,\n      () => { flag = true; },\n    );\n\n    setTimeout(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/observeOn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "describe193",
    "testId": 193,
    "memberof": "test/observeOn.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/observeOn.js~describe193",
    "access": "public",
    "description": "#observeOn",
    "lineNumber": 6
  },
  {
    "__docId__": 504,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "test/observeOn.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe193.it194",
    "access": "public",
    "description": "should return a Maybe",
    "lineNumber": 7
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/observeOn.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe193.it195",
    "access": "public",
    "description": "should be synchronous with non-Scheduler",
    "lineNumber": 10
  },
  {
    "__docId__": 506,
    "kind": "test",
    "name": "it196",
    "testId": 196,
    "memberof": "test/observeOn.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe193.it196",
    "access": "public",
    "description": "should be synchronous with Scheduler.current",
    "lineNumber": 27
  },
  {
    "__docId__": 507,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/observeOn.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe193.it197",
    "access": "public",
    "description": "should be asynchronous with Scheduler.tick",
    "lineNumber": 44
  },
  {
    "__docId__": 508,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "test/observeOn.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe193.it198",
    "access": "public",
    "description": "should be asynchronous with Scheduler.async",
    "lineNumber": 67
  },
  {
    "__docId__": 509,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "test/observeOn.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe193.it199",
    "access": "public",
    "description": "should be asynchronous with Scheduler.immediate",
    "lineNumber": 90
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "it200",
    "testId": 200,
    "memberof": "test/observeOn.js~describe193",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe193.it200",
    "access": "public",
    "description": "should be asynchronous with Scheduler.timeout",
    "lineNumber": 113
  },
  {
    "__docId__": 511,
    "kind": "testFile",
    "name": "test/onErrorComplete.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#onErrorComplete', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorComplete(() => 'World');\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if parameter passed is not a Maybe or a function', () => {\n    const source = Maybe.error(new Error('Hello'));\n    const maybe = source.onErrorComplete();\n    assert(maybe === source);\n  });\n  /**\n   *\n   */\n  it('should emit the supplied item by the given function in case of error', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorComplete(() => 'World');\n\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function throws error.', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorComplete(() => { throw new Error('Ooops'); });\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function returns undefined.', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorComplete(() => {});\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/onErrorComplete.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 512,
    "kind": "test",
    "name": "describe201",
    "testId": 201,
    "memberof": "test/onErrorComplete.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/onErrorComplete.js~describe201",
    "access": "public",
    "description": "#onErrorComplete",
    "lineNumber": 8
  },
  {
    "__docId__": 513,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "test/onErrorComplete.js~describe201",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorComplete.js~describe201.it202",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "test/onErrorComplete.js~describe201",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorComplete.js~describe201.it203",
    "access": "public",
    "description": "should return the same instance if parameter passed is not a Maybe or a function",
    "lineNumber": 19
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "it204",
    "testId": 204,
    "memberof": "test/onErrorComplete.js~describe201",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorComplete.js~describe201.it204",
    "access": "public",
    "description": "should emit the supplied item by the given function in case of error",
    "lineNumber": 27
  },
  {
    "__docId__": 516,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "test/onErrorComplete.js~describe201",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorComplete.js~describe201.it205",
    "access": "public",
    "description": "should emit error if provide function throws error.",
    "lineNumber": 39
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "test/onErrorComplete.js~describe201",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorComplete.js~describe201.it206",
    "access": "public",
    "description": "should emit error if provide function returns undefined.",
    "lineNumber": 50
  },
  {
    "__docId__": 518,
    "kind": "testFile",
    "name": "test/onErrorResumeNext.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#onErrorResumeNext', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorResumeNext(Maybe.just('World'));\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if parameter passed is not a Maybe or a function', () => {\n    const source = Maybe.error(new Error('Hello'));\n    const maybe = source.onErrorResumeNext();\n    assert(maybe === source);\n  });\n  /**\n   *\n   */\n  it('should subscribe to the given Maybe', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorResumeNext(Maybe.just('World'));\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success if source emits an error signal', (done) => {\n    const maybe = Maybe.just('Hello').onErrorResumeNext(Maybe.empty());\n\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete if source emits a complete signal', (done) => {\n    const maybe = Maybe.empty().onErrorResumeNext(Maybe.just('Hello'));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should subscribe to the given Maybe-producing Function', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorResumeNext(() => Maybe.just('World'));\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should subscribe to the given Maybe', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorResumeNext(Maybe.empty());\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should subscribe to the given Maybe-producing Function', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorResumeNext(() => Maybe.empty());\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should subscribe to the given Maybe', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorResumeNext(Maybe.error(new Error('Hello')));\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should subscribe to the given Maybe-producing Function', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorResumeNext(() => Maybe.error(new Error('Hello')));\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function throws error.', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorResumeNext(() => { throw new Error('Ooops'); });\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function returns non-Maybe.', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorResumeNext(() => {});\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/onErrorResumeNext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "describe207",
    "testId": 207,
    "memberof": "test/onErrorResumeNext.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207",
    "access": "public",
    "description": "#onErrorResumeNext",
    "lineNumber": 8
  },
  {
    "__docId__": 520,
    "kind": "test",
    "name": "it208",
    "testId": 208,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it208",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 521,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it209",
    "access": "public",
    "description": "should return the same instance if parameter passed is not a Maybe or a function",
    "lineNumber": 19
  },
  {
    "__docId__": 522,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it210",
    "access": "public",
    "description": "should subscribe to the given Maybe",
    "lineNumber": 27
  },
  {
    "__docId__": 523,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it211",
    "access": "public",
    "description": "should signal success if source emits an error signal",
    "lineNumber": 38
  },
  {
    "__docId__": 524,
    "kind": "test",
    "name": "it212",
    "testId": 212,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it212",
    "access": "public",
    "description": "should signal complete if source emits a complete signal",
    "lineNumber": 50
  },
  {
    "__docId__": 525,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it213",
    "access": "public",
    "description": "should subscribe to the given Maybe-producing Function",
    "lineNumber": 62
  },
  {
    "__docId__": 526,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it214",
    "access": "public",
    "description": "should subscribe to the given Maybe",
    "lineNumber": 73
  },
  {
    "__docId__": 527,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it215",
    "access": "public",
    "description": "should subscribe to the given Maybe-producing Function",
    "lineNumber": 84
  },
  {
    "__docId__": 528,
    "kind": "test",
    "name": "it216",
    "testId": 216,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it216",
    "access": "public",
    "description": "should subscribe to the given Maybe",
    "lineNumber": 95
  },
  {
    "__docId__": 529,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it217",
    "access": "public",
    "description": "should subscribe to the given Maybe-producing Function",
    "lineNumber": 106
  },
  {
    "__docId__": 530,
    "kind": "test",
    "name": "it218",
    "testId": 218,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it218",
    "access": "public",
    "description": "should emit error if provide function throws error.",
    "lineNumber": 117
  },
  {
    "__docId__": 531,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "test/onErrorResumeNext.js~describe207",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe207.it219",
    "access": "public",
    "description": "should emit error if provide function returns non-Maybe.",
    "lineNumber": 128
  },
  {
    "__docId__": 532,
    "kind": "testFile",
    "name": "test/onErrorReturn.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#onErrorReturn', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorReturn(() => 'World');\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if parameter passed is not a Maybe or a function', () => {\n    const source = Maybe.error(new Error('Hello'));\n    const maybe = source.onErrorReturn();\n    assert(maybe === source);\n  });\n  /**\n   *\n   */\n  it('should emit the supplied item by the given function in case of error', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorReturn(() => 'World');\n\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function throws error.', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorReturn(() => { throw new Error('Ooops'); });\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function returns undefined.', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorReturn(() => {});\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/onErrorReturn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 533,
    "kind": "test",
    "name": "describe220",
    "testId": 220,
    "memberof": "test/onErrorReturn.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/onErrorReturn.js~describe220",
    "access": "public",
    "description": "#onErrorReturn",
    "lineNumber": 8
  },
  {
    "__docId__": 534,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "test/onErrorReturn.js~describe220",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturn.js~describe220.it221",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 535,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "test/onErrorReturn.js~describe220",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturn.js~describe220.it222",
    "access": "public",
    "description": "should return the same instance if parameter passed is not a Maybe or a function",
    "lineNumber": 19
  },
  {
    "__docId__": 536,
    "kind": "test",
    "name": "it223",
    "testId": 223,
    "memberof": "test/onErrorReturn.js~describe220",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturn.js~describe220.it223",
    "access": "public",
    "description": "should emit the supplied item by the given function in case of error",
    "lineNumber": 27
  },
  {
    "__docId__": 537,
    "kind": "test",
    "name": "it224",
    "testId": 224,
    "memberof": "test/onErrorReturn.js~describe220",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturn.js~describe220.it224",
    "access": "public",
    "description": "should emit error if provide function throws error.",
    "lineNumber": 39
  },
  {
    "__docId__": 538,
    "kind": "test",
    "name": "it225",
    "testId": 225,
    "memberof": "test/onErrorReturn.js~describe220",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturn.js~describe220.it225",
    "access": "public",
    "description": "should emit error if provide function returns undefined.",
    "lineNumber": 50
  },
  {
    "__docId__": 539,
    "kind": "testFile",
    "name": "test/onErrorReturnItem.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#onErrorReturnItem', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorReturnItem('World');\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if parameter passed is not a Maybe or a function', () => {\n    const source = Maybe.error(new Error('Hello'));\n    const maybe = source.onErrorReturnItem();\n    assert(maybe === source);\n  });\n  /**\n   *\n   */\n  it('should emit the given item in case of error', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).onErrorReturnItem('World');\n\n    maybe.subscribe(\n      x => (x === 'World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/onErrorReturnItem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 540,
    "kind": "test",
    "name": "describe226",
    "testId": 226,
    "memberof": "test/onErrorReturnItem.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/onErrorReturnItem.js~describe226",
    "access": "public",
    "description": "#onErrorReturnItem",
    "lineNumber": 8
  },
  {
    "__docId__": 541,
    "kind": "test",
    "name": "it227",
    "testId": 227,
    "memberof": "test/onErrorReturnItem.js~describe226",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturnItem.js~describe226.it227",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 542,
    "kind": "test",
    "name": "it228",
    "testId": 228,
    "memberof": "test/onErrorReturnItem.js~describe226",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturnItem.js~describe226.it228",
    "access": "public",
    "description": "should return the same instance if parameter passed is not a Maybe or a function",
    "lineNumber": 19
  },
  {
    "__docId__": 543,
    "kind": "test",
    "name": "it229",
    "testId": 229,
    "memberof": "test/onErrorReturnItem.js~describe226",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturnItem.js~describe226.it229",
    "access": "public",
    "description": "should emit the given item in case of error",
    "lineNumber": 27
  },
  {
    "__docId__": 544,
    "kind": "testFile",
    "name": "test/retry.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#retry', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.error(new Error('Hello')).retry(x => x === 3);\n\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should signal a success if no error', (done) => {\n    const maybe = Maybe.just('Hello').retry(x => x === 3);\n\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete if no error', (done) => {\n    const maybe = Maybe.empty().retry(x => x === 3);\n\n    maybe.subscribe(\n      () => done(),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should retry if there is an error and if it passes the predicate', (done) => {\n    let retried;\n    const maybe = Maybe.error(new Error('Hello')).retry((x) => {\n      if (x === 2) {\n        retried = true;\n      }\n      return x < 3;\n    });\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => retried && done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if predicate is false', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).retry(x => x === 3);\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/retry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 545,
    "kind": "test",
    "name": "describe230",
    "testId": 230,
    "memberof": "test/retry.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/retry.js~describe230",
    "access": "public",
    "description": "#retry",
    "lineNumber": 8
  },
  {
    "__docId__": 546,
    "kind": "test",
    "name": "it231",
    "testId": 231,
    "memberof": "test/retry.js~describe230",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe230.it231",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 547,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "test/retry.js~describe230",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe230.it232",
    "access": "public",
    "description": "should signal a success if no error",
    "lineNumber": 20
  },
  {
    "__docId__": 548,
    "kind": "test",
    "name": "it233",
    "testId": 233,
    "memberof": "test/retry.js~describe230",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe230.it233",
    "access": "public",
    "description": "should signal complete if no error",
    "lineNumber": 32
  },
  {
    "__docId__": 549,
    "kind": "test",
    "name": "it234",
    "testId": 234,
    "memberof": "test/retry.js~describe230",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe230.it234",
    "access": "public",
    "description": "should retry if there is an error and if it passes the predicate",
    "lineNumber": 44
  },
  {
    "__docId__": 550,
    "kind": "test",
    "name": "it235",
    "testId": 235,
    "memberof": "test/retry.js~describe230",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe230.it235",
    "access": "public",
    "description": "should signal an error if predicate is false",
    "lineNumber": 62
  },
  {
    "__docId__": 551,
    "kind": "testFile",
    "name": "test/subscribeOn.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Scheduler from 'rx-scheduler';\nimport Maybe from '../src/maybe';\n\ndescribe('#subscribeOn', () => {\n  it('should return a Maybe', () => {\n    assert(Maybe.empty().subscribeOn(Scheduler.current));\n  });\n  it('should be synchronous with non-Scheduler', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.just('Hello World').subscribeOn();\n\n    maybe.subscribe(\n      () => { flag = true; },\n      done,\n      done,\n    );\n\n    if (flag) {\n      done();\n    } else {\n      done(false);\n    }\n  });\n  it('should be synchronous with Scheduler.current', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.empty().subscribeOn(Scheduler.current);\n\n    maybe.subscribe(\n      done,\n      () => { flag = true; },\n      done,\n    );\n\n    if (flag) {\n      done();\n    } else {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.tick', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.empty().subscribeOn(Scheduler.tick);\n\n    maybe.subscribe(\n      done,\n      () => { flag = true; },\n      done,\n    );\n\n    process.nextTick(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.async', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.empty().subscribeOn(Scheduler.async);\n\n    maybe.subscribe(\n      done,\n      () => { flag = true; },\n      done,\n    );\n\n    Promise.resolve().then(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.immediate', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.empty().subscribeOn(Scheduler.immediate);\n\n    maybe.subscribe(\n      done,\n      () => { flag = true; },\n      done,\n    );\n\n    setImmediate(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.timeout', (done) => {\n    let flag = false;\n\n    const maybe = Maybe.error(new Error('Hello World')).subscribeOn(Scheduler.timeout);\n\n    maybe.subscribe(\n      done,\n      done,\n      () => { flag = true; },\n    );\n\n    setTimeout(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/subscribeOn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 552,
    "kind": "test",
    "name": "describe236",
    "testId": 236,
    "memberof": "test/subscribeOn.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/subscribeOn.js~describe236",
    "access": "public",
    "description": "#subscribeOn",
    "lineNumber": 6
  },
  {
    "__docId__": 553,
    "kind": "test",
    "name": "it237",
    "testId": 237,
    "memberof": "test/subscribeOn.js~describe236",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe236.it237",
    "access": "public",
    "description": "should return a Maybe",
    "lineNumber": 7
  },
  {
    "__docId__": 554,
    "kind": "test",
    "name": "it238",
    "testId": 238,
    "memberof": "test/subscribeOn.js~describe236",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe236.it238",
    "access": "public",
    "description": "should be synchronous with non-Scheduler",
    "lineNumber": 10
  },
  {
    "__docId__": 555,
    "kind": "test",
    "name": "it239",
    "testId": 239,
    "memberof": "test/subscribeOn.js~describe236",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe236.it239",
    "access": "public",
    "description": "should be synchronous with Scheduler.current",
    "lineNumber": 27
  },
  {
    "__docId__": 556,
    "kind": "test",
    "name": "it240",
    "testId": 240,
    "memberof": "test/subscribeOn.js~describe236",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe236.it240",
    "access": "public",
    "description": "should be asynchronous with Scheduler.tick",
    "lineNumber": 44
  },
  {
    "__docId__": 557,
    "kind": "test",
    "name": "it241",
    "testId": 241,
    "memberof": "test/subscribeOn.js~describe236",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe236.it241",
    "access": "public",
    "description": "should be asynchronous with Scheduler.async",
    "lineNumber": 67
  },
  {
    "__docId__": 558,
    "kind": "test",
    "name": "it242",
    "testId": 242,
    "memberof": "test/subscribeOn.js~describe236",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe236.it242",
    "access": "public",
    "description": "should be asynchronous with Scheduler.immediate",
    "lineNumber": 90
  },
  {
    "__docId__": 559,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "test/subscribeOn.js~describe236",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe236.it243",
    "access": "public",
    "description": "should be asynchronous with Scheduler.timeout",
    "lineNumber": 113
  },
  {
    "__docId__": 560,
    "kind": "testFile",
    "name": "test/switchIfEmpty.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\ndescribe('#switchIfEmpty', () => {\n  it('should return a Maybe', () => {\n    assert(Maybe.empty().switchIfEmpty(Maybe.just('Hello')) instanceof Maybe);\n  });\n  it('should return same reference if value is non-Maybe', () => {\n    const source = Maybe.empty();\n    assert(source === source.switchIfEmpty());\n  });\n  it('should signal success if source signals success', (done) => {\n    const source = Maybe.just('Hello').switchIfEmpty(Maybe.just('Hello'));\n\n    source.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  it('should signal success if source signals complete', (done) => {\n    const source = Maybe.empty().switchIfEmpty(Maybe.just('Hello'));\n\n    source.subscribe(\n      x => (x === 'World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  it('should signal success if source signals complete', (done) => {\n    const source = Maybe.empty().switchIfEmpty(Maybe.empty());\n\n    source.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  it('should signal error if source signals complete', (done) => {\n    const source = Maybe.empty().switchIfEmpty(Maybe.error(new Error('Hello')));\n\n    source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  it('should signal error if source signals error', (done) => {\n    const source = Maybe.error(new Error('Hello')).switchIfEmpty(Maybe.just('Hello'));\n\n    source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/switchIfEmpty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 561,
    "kind": "test",
    "name": "describe244",
    "testId": 244,
    "memberof": "test/switchIfEmpty.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/switchIfEmpty.js~describe244",
    "access": "public",
    "description": "#switchIfEmpty",
    "lineNumber": 5
  },
  {
    "__docId__": 562,
    "kind": "test",
    "name": "it245",
    "testId": 245,
    "memberof": "test/switchIfEmpty.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/switchIfEmpty.js~describe244.it245",
    "access": "public",
    "description": "should return a Maybe",
    "lineNumber": 6
  },
  {
    "__docId__": 563,
    "kind": "test",
    "name": "it246",
    "testId": 246,
    "memberof": "test/switchIfEmpty.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/switchIfEmpty.js~describe244.it246",
    "access": "public",
    "description": "should return same reference if value is non-Maybe",
    "lineNumber": 9
  },
  {
    "__docId__": 564,
    "kind": "test",
    "name": "it247",
    "testId": 247,
    "memberof": "test/switchIfEmpty.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/switchIfEmpty.js~describe244.it247",
    "access": "public",
    "description": "should signal success if source signals success",
    "lineNumber": 13
  },
  {
    "__docId__": 565,
    "kind": "test",
    "name": "it248",
    "testId": 248,
    "memberof": "test/switchIfEmpty.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/switchIfEmpty.js~describe244.it248",
    "access": "public",
    "description": "should signal success if source signals complete",
    "lineNumber": 22
  },
  {
    "__docId__": 566,
    "kind": "test",
    "name": "it249",
    "testId": 249,
    "memberof": "test/switchIfEmpty.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/switchIfEmpty.js~describe244.it249",
    "access": "public",
    "description": "should signal success if source signals complete",
    "lineNumber": 31
  },
  {
    "__docId__": 567,
    "kind": "test",
    "name": "it250",
    "testId": 250,
    "memberof": "test/switchIfEmpty.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/switchIfEmpty.js~describe244.it250",
    "access": "public",
    "description": "should signal error if source signals complete",
    "lineNumber": 40
  },
  {
    "__docId__": 568,
    "kind": "test",
    "name": "it251",
    "testId": 251,
    "memberof": "test/switchIfEmpty.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/switchIfEmpty.js~describe244.it251",
    "access": "public",
    "description": "should signal error if source signals error",
    "lineNumber": 49
  },
  {
    "__docId__": 569,
    "kind": "testFile",
    "name": "test/takeUntil.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#takeUntil', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').takeUntil(Maybe.timer(100));\n\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if no other Maybe is provided', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.takeUntil();\n\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should signal success if other Maybe has not emitted a success signal', (done) => {\n    const maybe = Maybe.just('Hello').takeUntil(Maybe.timer(100));\n\n    maybe.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success if other Maybe has not emitted an error signal', (done) => {\n    const maybe = Maybe.just('Hello').takeUntil(Maybe.error(new Error('World')).delay(100));\n\n    maybe.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete if other Maybe has not emitted a success signal', (done) => {\n    const maybe = Maybe.empty().takeUntil(Maybe.timer(100));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete if other Maybe has not emitted an error signal', (done) => {\n    const maybe = Maybe.empty().takeUntil(Maybe.error(new Error('World')).delay(100));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Maybe has emitted a success signal', (done) => {\n    const maybe = Maybe.just('Hello').delay(100).takeUntil(Maybe.just('World'));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Maybe has emitted a completion signal', (done) => {\n    const maybe = Maybe.just('Hello').delay(100).takeUntil(Maybe.empty());\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Maybe has emitted an error signal', (done) => {\n    const maybe = Maybe.just('Hello').delay(100).takeUntil(Maybe.error(new Error('World')));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if source signals error, nonetheless', (done) => {\n    const maybe = Maybe.error(new Error('Hello')).takeUntil(Maybe.timer(100));\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/takeUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 570,
    "kind": "test",
    "name": "describe252",
    "testId": 252,
    "memberof": "test/takeUntil.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/takeUntil.js~describe252",
    "access": "public",
    "description": "#takeUntil",
    "lineNumber": 8
  },
  {
    "__docId__": 571,
    "kind": "test",
    "name": "it253",
    "testId": 253,
    "memberof": "test/takeUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe252.it253",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 572,
    "kind": "test",
    "name": "it254",
    "testId": 254,
    "memberof": "test/takeUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe252.it254",
    "access": "public",
    "description": "should return the same instance if no other Maybe is provided",
    "lineNumber": 20
  },
  {
    "__docId__": 573,
    "kind": "test",
    "name": "it255",
    "testId": 255,
    "memberof": "test/takeUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe252.it255",
    "access": "public",
    "description": "should signal success if other Maybe has not emitted a success signal",
    "lineNumber": 29
  },
  {
    "__docId__": 574,
    "kind": "test",
    "name": "it256",
    "testId": 256,
    "memberof": "test/takeUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe252.it256",
    "access": "public",
    "description": "should signal success if other Maybe has not emitted an error signal",
    "lineNumber": 41
  },
  {
    "__docId__": 575,
    "kind": "test",
    "name": "it257",
    "testId": 257,
    "memberof": "test/takeUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe252.it257",
    "access": "public",
    "description": "should signal complete if other Maybe has not emitted a success signal",
    "lineNumber": 53
  },
  {
    "__docId__": 576,
    "kind": "test",
    "name": "it258",
    "testId": 258,
    "memberof": "test/takeUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe252.it258",
    "access": "public",
    "description": "should signal complete if other Maybe has not emitted an error signal",
    "lineNumber": 65
  },
  {
    "__docId__": 577,
    "kind": "test",
    "name": "it259",
    "testId": 259,
    "memberof": "test/takeUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe252.it259",
    "access": "public",
    "description": "should signal error if other Maybe has emitted a success signal",
    "lineNumber": 77
  },
  {
    "__docId__": 578,
    "kind": "test",
    "name": "it260",
    "testId": 260,
    "memberof": "test/takeUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe252.it260",
    "access": "public",
    "description": "should signal error if other Maybe has emitted a completion signal",
    "lineNumber": 89
  },
  {
    "__docId__": 579,
    "kind": "test",
    "name": "it261",
    "testId": 261,
    "memberof": "test/takeUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe252.it261",
    "access": "public",
    "description": "should signal error if other Maybe has emitted an error signal",
    "lineNumber": 101
  },
  {
    "__docId__": 580,
    "kind": "test",
    "name": "it262",
    "testId": 262,
    "memberof": "test/takeUntil.js~describe252",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe252.it262",
    "access": "public",
    "description": "should signal error if source signals error, nonetheless",
    "lineNumber": 113
  },
  {
    "__docId__": 581,
    "kind": "testFile",
    "name": "test/then.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#then', () => {\n  /**\n   *\n   */\n  it('should create a Promise', () => {\n    const maybe = Maybe.just('Hello').then(x => x, x => x);\n    assert(maybe instanceof Promise);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/then.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 582,
    "kind": "test",
    "name": "describe263",
    "testId": 263,
    "memberof": "test/then.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/then.js~describe263",
    "access": "public",
    "description": "#then",
    "lineNumber": 8
  },
  {
    "__docId__": 583,
    "kind": "test",
    "name": "it264",
    "testId": 264,
    "memberof": "test/then.js~describe263",
    "testDepth": 1,
    "static": true,
    "longname": "test/then.js~describe263.it264",
    "access": "public",
    "description": "should create a Promise",
    "lineNumber": 12
  },
  {
    "__docId__": 584,
    "kind": "testFile",
    "name": "test/timeout.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#timeout', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').timeout(100);\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is not a number.', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.timeout();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should signal success with the given value.', (done) => {\n    const maybe = Maybe.just('Hello').timeout(100);\n    maybe.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete.', (done) => {\n    const maybe = Maybe.empty().timeout(100);\n    maybe.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const maybe = Maybe.error('Hello').timeout(100);\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the Maybe does not emit item within the given timeout.', (done) => {\n    const maybe = Maybe.timer(200).timeout(100);\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Maybe.timer(200).timeout(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if cancelled.', (done) => {\n    const source = Maybe.error(new Error('Hello')).delay(200).timeout(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/timeout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 585,
    "kind": "test",
    "name": "describe265",
    "testId": 265,
    "memberof": "test/timeout.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/timeout.js~describe265",
    "access": "public",
    "description": "#timeout",
    "lineNumber": 8
  },
  {
    "__docId__": 586,
    "kind": "test",
    "name": "it266",
    "testId": 266,
    "memberof": "test/timeout.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe265.it266",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 587,
    "kind": "test",
    "name": "it267",
    "testId": 267,
    "memberof": "test/timeout.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe265.it267",
    "access": "public",
    "description": "should return the same instance if the amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 588,
    "kind": "test",
    "name": "it268",
    "testId": 268,
    "memberof": "test/timeout.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe265.it268",
    "access": "public",
    "description": "should signal success with the given value.",
    "lineNumber": 27
  },
  {
    "__docId__": 589,
    "kind": "test",
    "name": "it269",
    "testId": 269,
    "memberof": "test/timeout.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe265.it269",
    "access": "public",
    "description": "should signal complete.",
    "lineNumber": 38
  },
  {
    "__docId__": 590,
    "kind": "test",
    "name": "it270",
    "testId": 270,
    "memberof": "test/timeout.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe265.it270",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 49
  },
  {
    "__docId__": 591,
    "kind": "test",
    "name": "it271",
    "testId": 271,
    "memberof": "test/timeout.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe265.it271",
    "access": "public",
    "description": "should signal error if the Maybe does not emit item within the given timeout.",
    "lineNumber": 60
  },
  {
    "__docId__": 592,
    "kind": "test",
    "name": "it272",
    "testId": 272,
    "memberof": "test/timeout.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe265.it272",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 71
  },
  {
    "__docId__": 593,
    "kind": "test",
    "name": "it273",
    "testId": 273,
    "memberof": "test/timeout.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe265.it273",
    "access": "public",
    "description": "should not signal error if cancelled.",
    "lineNumber": 86
  },
  {
    "__docId__": 594,
    "kind": "testFile",
    "name": "test/timer.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#timer', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.timer(100);\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should signal error if amount is not a number.', (done) => {\n    const maybe = Maybe.timer();\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success 0', (done) => {\n    const maybe = Maybe.timer(100);\n    maybe.subscribe(\n      x => (x === 0 ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const maybe = Maybe.timer(100);\n    const controller = maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 595,
    "kind": "test",
    "name": "describe274",
    "testId": 274,
    "memberof": "test/timer.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/timer.js~describe274",
    "access": "public",
    "description": "#timer",
    "lineNumber": 8
  },
  {
    "__docId__": 596,
    "kind": "test",
    "name": "it275",
    "testId": 275,
    "memberof": "test/timer.js~describe274",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe274.it275",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 597,
    "kind": "test",
    "name": "it276",
    "testId": 276,
    "memberof": "test/timer.js~describe274",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe274.it276",
    "access": "public",
    "description": "should signal error if amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 598,
    "kind": "test",
    "name": "it277",
    "testId": 277,
    "memberof": "test/timer.js~describe274",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe274.it277",
    "access": "public",
    "description": "should signal success 0",
    "lineNumber": 31
  },
  {
    "__docId__": 599,
    "kind": "test",
    "name": "it278",
    "testId": 278,
    "memberof": "test/timer.js~describe274",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe274.it278",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 42
  },
  {
    "__docId__": 600,
    "kind": "testFile",
    "name": "test/toPromise.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#toPromise', () => {\n  /**\n   *\n   */\n  it('should create a Promise', () => {\n    const maybe = Maybe.just('Hello').toPromise();\n    assert(maybe instanceof Promise);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/toPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 601,
    "kind": "test",
    "name": "describe279",
    "testId": 279,
    "memberof": "test/toPromise.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/toPromise.js~describe279",
    "access": "public",
    "description": "#toPromise",
    "lineNumber": 8
  },
  {
    "__docId__": 602,
    "kind": "test",
    "name": "it280",
    "testId": 280,
    "memberof": "test/toPromise.js~describe279",
    "testDepth": 1,
    "static": true,
    "longname": "test/toPromise.js~describe279.it280",
    "access": "public",
    "description": "should create a Promise",
    "lineNumber": 12
  },
  {
    "__docId__": 603,
    "kind": "testFile",
    "name": "test/zip.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n*\n*/\ndescribe('#zip', () => {\n  /**\n  *\n  */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.zip([Maybe.just('Hello'), Maybe.just('World')]);\n    assert(maybe instanceof Maybe);\n  });\n  /**\n  *\n  */\n  it('should signal error if sources is not iterable.', (done) => {\n    const maybe = Maybe.zip();\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n  *\n  */\n  it('should signal error if source is empty iterable.', (done) => {\n    const maybe = Maybe.zip([]);\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the zipper throws an error', (done) => {\n    const maybe = Maybe.zip([Maybe.just('Hello'), Maybe.just('World')], () => undefined);\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n  *\n  */\n  it('should signal success with an array (no zipper function).', (done) => {\n    const maybe = Maybe.zip([Maybe.just('Hello').delay(100), Maybe.just('World')]);\n    maybe.subscribe(\n      x => (x instanceof Array ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n  *\n  */\n  it('should signal success with an array with the correct values (no zipper function).', (done) => {\n    const maybe = Maybe.zip([Maybe.just('Hello'), Maybe.just('World')]);\n    maybe.subscribe(\n      x => (x[0] === 'Hello' && x[1] === 'World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n  *\n  */\n  it('should signal success with an array with the correct values, consider non-Maybe (no zipper function).', (done) => {\n    const maybe = Maybe.zip(['Hello', Maybe.just('World')]);\n    maybe.subscribe(\n      x => (x[0] === 'Hello' && x[1] === 'World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n  *\n  */\n  it('should signal error if one of the sources is undefined.', (done) => {\n    const source = Maybe.zip([undefined, Maybe.just('World')]);\n    source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n  *\n  */\n  it('should signal error if a source throws error.', (done) => {\n    const source = Maybe.zip([Maybe.error(new Error('Hello')), Maybe.just('World')]);\n    source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n  *\n  */\n  it('should signal complete if a source throws error.', (done) => {\n    const source = Maybe.zip([Maybe.empty(), Maybe.just('World')]);\n    source.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n  *\n  */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Maybe.zip([Maybe.just('Hello').delay(100), Maybe.just('World')]);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/zip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 604,
    "kind": "test",
    "name": "describe281",
    "testId": 281,
    "memberof": "test/zip.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/zip.js~describe281",
    "access": "public",
    "description": "#zip",
    "lineNumber": 8
  },
  {
    "__docId__": 605,
    "kind": "test",
    "name": "it282",
    "testId": 282,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it282",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 606,
    "kind": "test",
    "name": "it283",
    "testId": 283,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it283",
    "access": "public",
    "description": "should signal error if sources is not iterable.",
    "lineNumber": 19
  },
  {
    "__docId__": 607,
    "kind": "test",
    "name": "it284",
    "testId": 284,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it284",
    "access": "public",
    "description": "should signal error if source is empty iterable.",
    "lineNumber": 30
  },
  {
    "__docId__": 608,
    "kind": "test",
    "name": "it285",
    "testId": 285,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it285",
    "access": "public",
    "description": "should signal an error if the zipper throws an error",
    "lineNumber": 41
  },
  {
    "__docId__": 609,
    "kind": "test",
    "name": "it286",
    "testId": 286,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it286",
    "access": "public",
    "description": "should signal success with an array (no zipper function).",
    "lineNumber": 53
  },
  {
    "__docId__": 610,
    "kind": "test",
    "name": "it287",
    "testId": 287,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it287",
    "access": "public",
    "description": "should signal success with an array with the correct values (no zipper function).",
    "lineNumber": 64
  },
  {
    "__docId__": 611,
    "kind": "test",
    "name": "it288",
    "testId": 288,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it288",
    "access": "public",
    "description": "should signal success with an array with the correct values, consider non-Maybe (no zipper function).",
    "lineNumber": 75
  },
  {
    "__docId__": 612,
    "kind": "test",
    "name": "it289",
    "testId": 289,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it289",
    "access": "public",
    "description": "should signal error if one of the sources is undefined.",
    "lineNumber": 86
  },
  {
    "__docId__": 613,
    "kind": "test",
    "name": "it290",
    "testId": 290,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it290",
    "access": "public",
    "description": "should signal error if a source throws error.",
    "lineNumber": 97
  },
  {
    "__docId__": 614,
    "kind": "test",
    "name": "it291",
    "testId": 291,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it291",
    "access": "public",
    "description": "should signal complete if a source throws error.",
    "lineNumber": 108
  },
  {
    "__docId__": 615,
    "kind": "test",
    "name": "it292",
    "testId": 292,
    "memberof": "test/zip.js~describe281",
    "testDepth": 1,
    "static": true,
    "longname": "test/zip.js~describe281.it292",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 119
  },
  {
    "__docId__": 616,
    "kind": "testFile",
    "name": "test/zipWith.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Maybe from '../src/maybe';\n\n/**\n *\n */\ndescribe('#zipWith', () => {\n  /**\n   *\n   */\n  it('should create a Maybe', () => {\n    const maybe = Maybe.just('Hello').zipWith(Maybe.just('World'));\n    assert(maybe instanceof Maybe);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the other parameter is non-Maybe', () => {\n    const source = Maybe.just('Hello');\n    const maybe = source.zipWith();\n    assert(source === maybe);\n  });\n  /**\n   *\n   */\n  it('should signal an error if the zipper returns undefined', (done) => {\n    const maybe = Maybe.just('Hello').zipWith(Maybe.just('World'), () => undefined);\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the zipper returns undefined', (done) => {\n    const maybe = Maybe.just('Hello').delay(100).zipWith(Maybe.just('World'), () => undefined);\n\n    maybe.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success with an array (no zipper function).', (done) => {\n    const maybe = Maybe.just('Hello').delay(100).zipWith(Maybe.just('World'));\n    maybe.subscribe(\n      x => (x instanceof Array ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success with an array with the correct values (no zipper function).', (done) => {\n    const maybe = Maybe.just('Hello').zipWith(Maybe.just('World'));\n    maybe.subscribe(\n      x => (x[0] === 'Hello' && x[1] === 'World' ? done() : done(false)),\n      () => done(false),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if source throws error.', (done) => {\n    const source = Maybe.error(new Error('Hello')).zipWith(Maybe.just('World'));\n    source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Maybe throws error.', (done) => {\n    const source = Maybe.just('Hello').zipWith(Maybe.error('World'));\n    source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(),\n    );\n  });\n  it('should signal complete if source signals complete.', (done) => {\n    const source = Maybe.empty().zipWith(Maybe.just('World'));\n    source.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal complete if other Maybe signals complete.', (done) => {\n    const source = Maybe.just('World').zipWith(Maybe.empty());\n    source.subscribe(\n      () => done(false),\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Maybe.just('Hello').delay(100).zipWith(Maybe.just('World'));\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-maybe/test/zipWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 617,
    "kind": "test",
    "name": "describe293",
    "testId": 293,
    "memberof": "test/zipWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/zipWith.js~describe293",
    "access": "public",
    "description": "#zipWith",
    "lineNumber": 8
  },
  {
    "__docId__": 618,
    "kind": "test",
    "name": "it294",
    "testId": 294,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it294",
    "access": "public",
    "description": "should create a Maybe",
    "lineNumber": 12
  },
  {
    "__docId__": 619,
    "kind": "test",
    "name": "it295",
    "testId": 295,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it295",
    "access": "public",
    "description": "should return the same instance if the other parameter is non-Maybe",
    "lineNumber": 19
  },
  {
    "__docId__": 620,
    "kind": "test",
    "name": "it296",
    "testId": 296,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it296",
    "access": "public",
    "description": "should signal an error if the zipper returns undefined",
    "lineNumber": 27
  },
  {
    "__docId__": 621,
    "kind": "test",
    "name": "it297",
    "testId": 297,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it297",
    "access": "public",
    "description": "should signal an error if the zipper returns undefined",
    "lineNumber": 39
  },
  {
    "__docId__": 622,
    "kind": "test",
    "name": "it298",
    "testId": 298,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it298",
    "access": "public",
    "description": "should signal success with an array (no zipper function).",
    "lineNumber": 51
  },
  {
    "__docId__": 623,
    "kind": "test",
    "name": "it299",
    "testId": 299,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it299",
    "access": "public",
    "description": "should signal success with an array with the correct values (no zipper function).",
    "lineNumber": 62
  },
  {
    "__docId__": 624,
    "kind": "test",
    "name": "it300",
    "testId": 300,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it300",
    "access": "public",
    "description": "should signal error if source throws error.",
    "lineNumber": 73
  },
  {
    "__docId__": 625,
    "kind": "test",
    "name": "it301",
    "testId": 301,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it301",
    "access": "public",
    "description": "should signal error if other Maybe throws error.",
    "lineNumber": 84
  },
  {
    "__docId__": 626,
    "kind": "test",
    "name": "it302",
    "testId": 302,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it302",
    "access": "public",
    "description": "should signal complete if source signals complete.",
    "lineNumber": 92
  },
  {
    "__docId__": 627,
    "kind": "test",
    "name": "it303",
    "testId": 303,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it303",
    "access": "public",
    "description": "should signal complete if other Maybe signals complete.",
    "lineNumber": 103
  },
  {
    "__docId__": 628,
    "kind": "test",
    "name": "it304",
    "testId": 304,
    "memberof": "test/zipWith.js~describe293",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe293.it304",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 114
  }
]