[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/index.js",
    "content": "\n/* eslint-disable no-plusplus */\n/**\n * @license\n * MIT License\n *\n * Copyright (c) 2019 Alexis Munsayac\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the 'Software'), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n * @author Alexis Munsayac <alexis.munsayac@gmail.com>\n * @copyright Alexis Munsayac 2019\n */\n/**\n * @external {Array} https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n */\n/**\n * @ignore\n */\nconst { isNaN } = Number;\n\n/**\n * @desc\n * Represents an infinite-size Array.\n */\nexport default class Endless {\n  /**\n   * @desc\n   * Creates an Endless from a function\n   * that generates values given an index.\n   * @param {EndlessCallback} expr\n   */\n  constructor(expr) {\n    /**\n     * @typdef {function} EndlessCallback\n     * @param {number} index\n     * @return {any}\n     */\n    /**\n     * @ignore\n     */\n    this.expr = expr;\n\n    const memory = [];\n    /**\n     * @ignore\n     */\n    this.memory = memory;\n\n    /**\n     * @ignore\n     */\n    this.generator = (() => {\n      let i = 0;\n      let s = 0;\n\n      return () => {\n        while (1) {\n          const r = expr(i++);\n\n          if (typeof r !== 'undefined') {\n            // eslint-disable-next-line no-return-assign\n            return (memory[s++] = r);\n          }\n        }\n      };\n    })();\n\n    /**\n     * To gain access to the [] operator, we need to wrap\n     * the Endless instance into a Proxy instance.\n     * @ignore\n     */\n    return new Proxy(this, {\n      get: (t, k) => ((k in t && t[k]) || (!isNaN(k) ? this.get(k) : undefined)),\n      // eslint-disable-next-line no-return-assign\n      set: (_t, k, v) => (!isNaN(k) && (memory[k] = v)),\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  get(i) {\n    const { memory } = this;\n\n    while (typeof memory[i] === 'undefined') {\n      this.generator();\n    }\n\n    return memory[i];\n  }\n\n  /**\n   * @desc\n   * Flattens an Endless of finite lists into an Endless of elements.\n   * That is, remove one level of nesting.\n   * @example\n   * const e = new Endless(x => [x, x*2]);\n   * const f = e.flat();\n   * f.take(4); // 0, 0, 1, 2\n   * @return {Endless}\n   */\n  flat() {\n    let c = [];\n    let n = 0;\n    return new Endless((x) => {\n      while (typeof c[x] === 'undefined') {\n        c = c.concat(this[n++]);\n      }\n      return c[x];\n    });\n  }\n\n  /**\n   * @desc\n   * Expands all elements of an Endless into finite lists\n   * and flattens them.\n   * @example\n   * const e = new Endless(x => x);\n   * const f = e.flatMap(x => [x, x*2]);\n   * f.take(4); // 0, 0, 1, 2\n   * @param {FlatMapCallback} mutator\n   * @return {Endless}\n   */\n  flatMap(mutator) {\n    /**\n     * @typedef {function} FlatMapCallback\n     * @param {!any} element an element of an Endless\n     * @return {Array}\n     */\n    return this.map(x => mutator(x)).flat();\n  }\n\n  /**\n   * @desc\n   * Apply a mapping function to each element of an Endless,\n   * yielding a new Endless of results\n   * @example\n   * const e = new Endless(x => x);\n   * const f = e.map(x => x*2);\n   * f.take(4); // 0, 2, 4, 6\n   * @param {MapCallback} expr\n   * @return {Endless}\n   */\n  map(expr) {\n    /**\n     * @typdef {function} MapCallback\n     * @param {!any} element an element of an Endless\n     * @return {any}\n     */\n    return new Endless(x => expr(this[x]));\n  }\n\n  /**\n   * @desc\n   * Select the elements of a list that satisfy a predicate.\n   * @example\n   * const e = new Endless(x => x);\n   * const f = e.filter(x => x % 3 === 0);\n   * f.take(4); // 0, 3, 6, 9\n   * @param {FilterCallback} expr\n   * @return {Endless}\n   */\n  filter(expr) {\n    /**\n     * @typdef {function} FilterCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    return this.map(x => (expr(x) ? x : undefined));\n  }\n\n  /**\n   * @desc\n   * Finds the index of the first element that satisfy a predicate.\n   * @example\n   * new Endless(x => x).find(x => x % 5 === 0); // 5\n   * @param {FindCallback} expr\n   * @return {number}\n   */\n  find(expr) {\n    /**\n     * @typdef {function} FindCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    let index = 0;\n    while (!expr(this[index])) index += 1;\n    return index;\n  }\n\n  /**\n   * @desc\n   * Selects the indeces of the elements that satisfy a predicate.\n   * @example\n   * const ex = new Endless(x => x + 1).findIndeces(x => x % 2 === 0);\n   * ex.take(5); // [1, 3, 5, 7, 9]\n   * @param {FindIndecesCallback} expr\n   * @return {Endless}\n   */\n  findIndeces(expr) {\n    /**\n     * @typdef {function} FindIndecesCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    return new Endless(x => (expr(this[x]) ? x : undefined));\n  }\n\n  /**\n   * @desc\n   * Finds the index of the first element that is equal to the given value.\n   * @example\n   * new Endless(x => x).indexOf(100); // 100\n   * @param {!any} value\n   * @return {number}\n   */\n  indexOf(value) {\n    return this.find(x => x === value);\n  }\n\n  /**\n   * @desc\n   * Deletes the first element that satisfy the predicate.\n   * @example\n   * const ex = new Endless(x => x).delete(x => x % 2 === 0);\n   * ex.take(5); // [0, 1, 3, 4, 5]\n   * @param {DeleteByCallback} expr\n   * @return {Endless}\n   */\n  deleteBy(expr) {\n    /**\n     * @typdef {function} DeleteByCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    const index = this.find(expr);\n    return new Endless(x => (x === index ? undefined : this[x]));\n  }\n\n  /**\n   * @desc\n   * Deletes the first element that is equal to the given value.\n   * @example\n   * const ex = new Endless(x => x).delete(0);\n   * ex.take(5); // [1, 2, 3, 4, 5]\n   * @param {!any} value\n   * @return {Endless}\n   */\n  delete(value) {\n    return this.deleteBy(x => x === value);\n  }\n\n  /**\n   * @desc\n   * Skips the first set of elements.\n   * @example\n   * const ex = new Endless(x => x).skip(10);\n   * ex.take(5); // [10, 11, 12, 13, 14]\n   * @param {number} amount\n   * @return {Endless}\n   */\n  skip(amount) {\n    return new Endless(x => this[x + amount]);\n  }\n\n  /**\n   * @desc\n   * Skips elements while they satisfy a predicate.\n   * @example\n   * const ex = new Endless(x => x).skipWhile(x => x < 10);\n   * ex.take(5); // [10, 11, 12, 13, 14]\n   * @param {SkipWhileCallback} expr\n   * @return {Endless}\n   */\n  skipWhile(expr) {\n    /**\n     * @typdef {function} SkipWhileCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    const index = this.find(x => !expr(x));\n    return new Endless(x => (x < index ? undefined : this[x]));\n  }\n\n  /**\n   * @desc\n   * Skips elements until an element satifies a predicate.\n   * @example\n   * const ex = new Endless(x => x).skipUntil(x => x === 10);\n   * ex.take(5); // [10, 11, 12, 13, 14]\n   * @param {SkipUntilCallback} expr\n   * @return {Endless}\n   */\n  skipUntil(expr) {\n    /**\n     * @typdef {function} SkipUntilCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    const index = this.find(x => expr(x));\n    return new Endless(x => (x < index ? undefined : this[x]));\n  }\n\n  /**\n   * @desc\n   * alias for 'skip'\n   * @example\n   * const ex = new Endless(x => x).drop(10);\n   * ex.take(5); // [10, 11, 12, 13, 14]\n   * @see {@link Endless#skip}\n   * @param {number} amount\n   * @return {Endless}\n   */\n  drop(amount) {\n    return this.skip(amount);\n  }\n\n  /**\n   * @desc\n   * alias for 'skipWhile'\n   * @example\n   * const ex = new Endless(x => x).dropWhile(x => x < 10);\n   * ex.take(5); // [10, 11, 12, 13, 14]\n   * @see {@link Endless#skipWhile}\n   * @param {SkipWhileCallback} expr\n   * @return {Endless}\n   */\n  dropWhile(expr) {\n    return this.skipWhile(expr);\n  }\n\n  /**\n   * @desc\n   * alias for 'skipUntil'\n   * @example\n   * const ex = new Endless(x => x).dropUntil(x => x === 10);\n   * ex.take(5); // [10, 11, 12, 13, 14]\n   * @see {@link Endless#skipUntil}\n   * @param {SkipUntilCallback} expr\n   * @return {Endless}\n   */\n  dropUntil(expr) {\n    return this.skipUntil(expr);\n  }\n\n  /**\n   * @desc\n   * Selects elements on every given amount.\n   * @example\n   * const ex = new Endless(x => x).step(2);\n   * ex.take(5); // [0, 2, 4, 6, 8]\n   * @param {number} amount\n   * @return {Endless}\n   */\n  step(amount) {\n    return new Endless(x => this[x * amount]);\n  }\n\n  /**\n   * @desc\n   * Concats an array at the beginning of an Endless\n   * @example\n   * const ex = new Endless(x => x).startWith([1, 2, 3, 4, 5]);\n   * ex.take(10); // [1, 2, 3, 4, 5, 0, 1, 2, 3, 4]\n   * @param {Array} arr\n   * @return {Endless}\n   */\n  startWith(arr) {\n    return new Endless(x => (arr.length > x ? arr[x] : this[x - arr.length]));\n  }\n\n  /**\n   * @desc\n   * Takes a finite amount of elements from the beginning\n   * @example\n   * const ex = new Endless(x => x).take(100);\n   * ex; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..., 99]\n   * @param {number} amount\n   * @return {Array}\n   */\n  take(amount) {\n    const result = [];\n    for (let i = 0; i < amount;) result.push(this[i++]);\n    return result;\n  }\n\n  /**\n   * @desc\n   * Takes a finite amount of elements while the elements satisfy a predicate\n   * @example\n   * const ex = new Endless(x => x).takeWhile(x => x < 100);\n   * ex; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..., 99]\n   * @param {TakeWhileCallback} expr\n   * @return {Array}\n   */\n  takeWhile(expr) {\n    /**\n     * @typdef {function} TakeWhileCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    const result = [];\n    for (let i = 0; expr(this[i]);) result.push(this[i++]);\n    return result;\n  }\n\n  /**\n   * @desc\n   * Takes a finite amount of elements until an element satisfy a predicate\n   * @example\n   * const ex = new Endless(x => x).takeUntil(x => x === 100);\n   * ex; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..., 99]\n   * @param {TakeUntilCallback} expr\n   * @return {Array}\n   */\n  takeUntil(expr) {\n    /**\n     * @typdef {function} TakeUntilCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    const result = [];\n    for (let i = 0; !expr(this[i]);) result.push(this[i++]);\n    return result;\n  }\n\n  /**\n   * @desc\n   * Given an index, get a two-tuple of the finite list\n   * of that many elements from the start of a given Endless,\n   * and the Endless that follows them.\n   * @example\n   * const ex = new Endless(x => x).splitAt(10);\n   * ex[0]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   * ex[1].take(5) // [10, 11, 12, 13, 14]\n   * @param {number} index\n   * @return {Array}\n   */\n  splitAt(index) {\n    return [this.take(index), this.skip(index)];\n  }\n\n  /**\n   * @desc\n   * Split an Endless into a longest prefix such that all\n   * the elements of it satisfy a given predicate,\n   * and the rest of the list following them.\n   * @example\n   * const ex = new Endless(x => x).span(x => x < 10);\n   * ex[0]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   * ex[1].take(5) // [10, 11, 12, 13, 14]\n   * @param {SpanCallback} expr\n   * @return {Array}\n   */\n  span(expr) {\n    /**\n     * @typdef {function} SpanCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    return [this.takeWhile(expr), this.skipWhile(expr)];\n  }\n\n  /**\n   * @desc\n   * Split an Endless into a longest prefix such that all\n   * the elements of it do not satisfy a given predicate,\n   * and the rest of the list following them.\n   * @example\n   * const ex = new Endless(x => x).break(x => x === 10);\n   * ex[0]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   * ex[1].take(5) // [10, 11, 12, 13, 14]\n   * @param {BreakCallback} expr\n   * @return {Array}\n   */\n  break(expr) {\n    /**\n     * @typdef {function} BreakCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    return [this.takeUntil(expr), this.skipUntil(expr)];\n  }\n\n  /**\n   * @desc\n   * Given a predicate and an Endless, return a pair of Endless of elements\n   * which do and do not satisfy the predicate, respectively.\n   * @example\n   * const ex = new Endless(x => x).partition(x => x % 2 === 0);\n   * const evens = ex[0];\n   * const odds = ex[1];\n   * evens.take(10); // [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n   * odds.take(10); // [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n   * @param {PartitionCallback} expr\n   * @return {Array}\n   */\n  partition(expr) {\n    /**\n     * @typdef {function} PartitionCallback\n     * @param {!any} element an element of an Endless\n     * @return {boolean}\n     */\n    return [\n      this.filter(expr),\n      this.filter(x => !expr(x)),\n    ];\n  }\n\n  /**\n   * @desc\n   * Given an Endless of finite lists, intersperse the Endless\n   * with a given finite list, and concatenate it.\n   * @example\n   * const ex = new Endless(x => x).intercalate([1, 2, 3]);\n   * ex.take(10); // [0, 1, 2, 3, 1, 1, 2, 3, 2, 1]\n   * @param {Array} values\n   * @return {Endless}\n   */\n  intercalate(values) {\n    return this.flatMap(x => [x, ...values]);\n  }\n\n  /**\n   * @desc\n   * Place a given elements between every adjacent two elements of a given Endless.\n   * @example\n   * const ex = new Endless(x => x).intersperse(3.14);\n   * ex.take(5); // [0, 3.14, 1, 3.14, 2]\n   * @param {...any} values\n   * @return {Endless}\n   */\n  intersperse(...values) {\n    return this.intercalate(values);\n  }\n\n  /**\n   * @desc\n   * Given an Endless, split it into maximal-length finite lists\n   * where every element in each list is equal.\n   * @example\n   * const ex = new Endless(x => x).group(3);\n   * ex.take(3); // [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n   * @param {number} amount\n   * @return {Endless}\n   */\n  group(amount) {\n    return new Endless(x => this.skip(x * amount).take(amount));\n  }\n\n  /**\n   * @desc\n   * Repeat the elements of a non-empty finite list.\n   * @example\n   * const ex = Endless.cycle([1, 2, 3, 4]);\n   * ex.take(8) // [1, 2, 3, 4, 1, 2, 3, 4]\n   * @param {Array} arr\n   * @return {Endless}\n   */\n  static cycle(arr) {\n    const size = arr.length;\n    return new Endless(x => arr[x % size]);\n  }\n\n  /**\n   * @desc\n   * Given a list element, use that as every element in an infinite list.\n   * @example\n   * const ex = Endless.repeat(1, 2, 3, 4);\n   * ex.take(8) // [1, 2, 3, 4, 1, 2, 3, 4]\n   * @param {...any} values\n   * @return {Endless}\n   */\n  static repeat(...values) {\n    return Endless.cycle(values);\n  }\n\n  /**\n   * @desc\n   * Zip two or more Endless into an Endless of n-tuples,\n   * where `(a,b,c,..)` in the nth tuple are the nth elements\n   * of the given Endless instances respectively.\n   * @example\n   * const a = new Endless(x => x);\n   * const b = new Endless(x => x + 1);\n   * const c = new Endless(x => x + 2);\n   * const ex = Endless.zip(a, b, c);\n   * ex.take(4) // [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]]\n   * @param  {...any} lists\n   * @return {Endless}\n   */\n  static zip(...lists) {\n    return new Endless((x) => {\n      const r = [];\n      // eslint-disable-next-line no-restricted-syntax\n      for (const i of lists) {\n        r.push(i[x]);\n      }\n      return r;\n    });\n  }\n\n  /**\n   * @desc\n   * Iterator function for an Endless instance\n   * Use at your own risk.\n   */\n  [Symbol.iterator]() {\n    let i = 0;\n    return {\n      next: () => this[i++],\n    };\n  }\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/endless.js/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Array",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "isNaN",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~isNaN",
    "access": "public",
    "export": false,
    "importPath": "endless-js/src/index.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 36,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "Endless",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Endless",
    "access": "public",
    "export": true,
    "importPath": "endless-js/src/index.js",
    "importStyle": "Endless",
    "description": "Represents an infinite-size Array.",
    "lineNumber": 42,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#constructor",
    "access": "public",
    "description": "Creates an Endless from a function\nthat generates values given an index.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "EndlessCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "expr",
    "memberof": "src/index.js~Endless",
    "static": false,
    "longname": "src/index.js~Endless#expr",
    "access": "public",
    "description": "",
    "lineNumber": 58,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "memory",
    "memberof": "src/index.js~Endless",
    "static": false,
    "longname": "src/index.js~Endless#memory",
    "access": "public",
    "description": "",
    "lineNumber": 64,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "generator",
    "memberof": "src/index.js~Endless",
    "static": false,
    "longname": "src/index.js~Endless#generator",
    "access": "public",
    "description": "",
    "lineNumber": 69,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "get",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#get",
    "access": "public",
    "description": "",
    "lineNumber": 100,
    "ignore": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "flat",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#flat",
    "access": "public",
    "description": "Flattens an Endless of finite lists into an Endless of elements.\nThat is, remove one level of nesting.",
    "examples": [
      "const e = new Endless(x => [x, x*2]);\nconst f = e.flat();\nf.take(4); // 0, 0, 1, 2"
    ],
    "lineNumber": 120,
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "flatMap",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#flatMap",
    "access": "public",
    "description": "Expands all elements of an Endless into finite lists\nand flattens them.",
    "examples": [
      "const e = new Endless(x => x);\nconst f = e.flatMap(x => [x, x*2]);\nf.take(4); // 0, 0, 1, 2"
    ],
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "FlatMapCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "mutator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 59,
    "kind": "typedef",
    "name": "FlatMapCallback",
    "memberof": "src/index.js~Endless",
    "static": true,
    "longname": "src/index.js~Endless.FlatMapCallback",
    "access": "public",
    "description": "",
    "lineNumber": 148,
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "an element of an Endless"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "FlatMapCallback"
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "map",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#map",
    "access": "public",
    "description": "Apply a mapping function to each element of an Endless,\nyielding a new Endless of results",
    "examples": [
      "const e = new Endless(x => x);\nconst f = e.map(x => x*2);\nf.take(4); // 0, 2, 4, 6"
    ],
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "MapCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "filter",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#filter",
    "access": "public",
    "description": "Select the elements of a list that satisfy a predicate.",
    "examples": [
      "const e = new Endless(x => x);\nconst f = e.filter(x => x % 3 === 0);\nf.take(4); // 0, 3, 6, 9"
    ],
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "FilterCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "find",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#find",
    "access": "public",
    "description": "Finds the index of the first element that satisfy a predicate.",
    "examples": [
      "new Endless(x => x).find(x => x % 5 === 0); // 5"
    ],
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "FindCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "findIndeces",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#findIndeces",
    "access": "public",
    "description": "Selects the indeces of the elements that satisfy a predicate.",
    "examples": [
      "const ex = new Endless(x => x + 1).findIndeces(x => x % 2 === 0);\nex.take(5); // [1, 3, 5, 7, 9]"
    ],
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "FindIndecesCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "indexOf",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#indexOf",
    "access": "public",
    "description": "Finds the index of the first element that is equal to the given value.",
    "examples": [
      "new Endless(x => x).indexOf(100); // 100"
    ],
    "lineNumber": 235,
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "deleteBy",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#deleteBy",
    "access": "public",
    "description": "Deletes the first element that satisfy the predicate.",
    "examples": [
      "const ex = new Endless(x => x).delete(x => x % 2 === 0);\nex.take(5); // [0, 1, 3, 4, 5]"
    ],
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "DeleteByCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "delete",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#delete",
    "access": "public",
    "description": "Deletes the first element that is equal to the given value.",
    "examples": [
      "const ex = new Endless(x => x).delete(0);\nex.take(5); // [1, 2, 3, 4, 5]"
    ],
    "lineNumber": 267,
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "skip",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#skip",
    "access": "public",
    "description": "Skips the first set of elements.",
    "examples": [
      "const ex = new Endless(x => x).skip(10);\nex.take(5); // [10, 11, 12, 13, 14]"
    ],
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "skipWhile",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#skipWhile",
    "access": "public",
    "description": "Skips elements while they satisfy a predicate.",
    "examples": [
      "const ex = new Endless(x => x).skipWhile(x => x < 10);\nex.take(5); // [10, 11, 12, 13, 14]"
    ],
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "SkipWhileCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "skipUntil",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#skipUntil",
    "access": "public",
    "description": "Skips elements until an element satifies a predicate.",
    "examples": [
      "const ex = new Endless(x => x).skipUntil(x => x === 10);\nex.take(5); // [10, 11, 12, 13, 14]"
    ],
    "lineNumber": 312,
    "params": [
      {
        "nullable": null,
        "types": [
          "SkipUntilCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "drop",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#drop",
    "access": "public",
    "description": "alias for 'skip'",
    "examples": [
      "const ex = new Endless(x => x).drop(10);\nex.take(5); // [10, 11, 12, 13, 14]"
    ],
    "see": [
      "{@link Endless#skip}"
    ],
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "dropWhile",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#dropWhile",
    "access": "public",
    "description": "alias for 'skipWhile'",
    "examples": [
      "const ex = new Endless(x => x).dropWhile(x => x < 10);\nex.take(5); // [10, 11, 12, 13, 14]"
    ],
    "see": [
      "{@link Endless#skipWhile}"
    ],
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "SkipWhileCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "dropUntil",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#dropUntil",
    "access": "public",
    "description": "alias for 'skipUntil'",
    "examples": [
      "const ex = new Endless(x => x).dropUntil(x => x === 10);\nex.take(5); // [10, 11, 12, 13, 14]"
    ],
    "see": [
      "{@link Endless#skipUntil}"
    ],
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "SkipUntilCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "step",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#step",
    "access": "public",
    "description": "Selects elements on every given amount.",
    "examples": [
      "const ex = new Endless(x => x).step(2);\nex.take(5); // [0, 2, 4, 6, 8]"
    ],
    "lineNumber": 373,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "startWith",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#startWith",
    "access": "public",
    "description": "Concats an array at the beginning of an Endless",
    "examples": [
      "const ex = new Endless(x => x).startWith([1, 2, 3, 4, 5]);\nex.take(10); // [1, 2, 3, 4, 5, 0, 1, 2, 3, 4]"
    ],
    "lineNumber": 386,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "take",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#take",
    "access": "public",
    "description": "Takes a finite amount of elements from the beginning",
    "examples": [
      "const ex = new Endless(x => x).take(100);\nex; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..., 99]"
    ],
    "lineNumber": 399,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "takeWhile",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#takeWhile",
    "access": "public",
    "description": "Takes a finite amount of elements while the elements satisfy a predicate",
    "examples": [
      "const ex = new Endless(x => x).takeWhile(x => x < 100);\nex; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..., 99]"
    ],
    "lineNumber": 414,
    "params": [
      {
        "nullable": null,
        "types": [
          "TakeWhileCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "takeUntil",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#takeUntil",
    "access": "public",
    "description": "Takes a finite amount of elements until an element satisfy a predicate",
    "examples": [
      "const ex = new Endless(x => x).takeUntil(x => x === 100);\nex; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..., 99]"
    ],
    "lineNumber": 434,
    "params": [
      {
        "nullable": null,
        "types": [
          "TakeUntilCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "splitAt",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#splitAt",
    "access": "public",
    "description": "Given an index, get a two-tuple of the finite list\nof that many elements from the start of a given Endless,\nand the Endless that follows them.",
    "examples": [
      "const ex = new Endless(x => x).splitAt(10);\nex[0]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nex[1].take(5) // [10, 11, 12, 13, 14]"
    ],
    "lineNumber": 457,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "span",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#span",
    "access": "public",
    "description": "Split an Endless into a longest prefix such that all\nthe elements of it satisfy a given predicate,\nand the rest of the list following them.",
    "examples": [
      "const ex = new Endless(x => x).span(x => x < 10);\nex[0]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nex[1].take(5) // [10, 11, 12, 13, 14]"
    ],
    "lineNumber": 473,
    "params": [
      {
        "nullable": null,
        "types": [
          "SpanCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "break",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#break",
    "access": "public",
    "description": "Split an Endless into a longest prefix such that all\nthe elements of it do not satisfy a given predicate,\nand the rest of the list following them.",
    "examples": [
      "const ex = new Endless(x => x).break(x => x === 10);\nex[0]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nex[1].take(5) // [10, 11, 12, 13, 14]"
    ],
    "lineNumber": 494,
    "params": [
      {
        "nullable": null,
        "types": [
          "BreakCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "partition",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#partition",
    "access": "public",
    "description": "Given a predicate and an Endless, return a pair of Endless of elements\nwhich do and do not satisfy the predicate, respectively.",
    "examples": [
      "const ex = new Endless(x => x).partition(x => x % 2 === 0);\nconst evens = ex[0];\nconst odds = ex[1];\nevens.take(10); // [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\nodds.take(10); // [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ],
    "lineNumber": 516,
    "params": [
      {
        "nullable": null,
        "types": [
          "PartitionCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "intercalate",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#intercalate",
    "access": "public",
    "description": "Given an Endless of finite lists, intersperse the Endless\nwith a given finite list, and concatenate it.",
    "examples": [
      "const ex = new Endless(x => x).intercalate([1, 2, 3]);\nex.take(10); // [0, 1, 2, 3, 1, 1, 2, 3, 2, 1]"
    ],
    "lineNumber": 538,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "intersperse",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#intersperse",
    "access": "public",
    "description": "Place a given elements between every adjacent two elements of a given Endless.",
    "examples": [
      "const ex = new Endless(x => x).intersperse(3.14);\nex.take(5); // [0, 3.14, 1, 3.14, 2]"
    ],
    "lineNumber": 551,
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "values",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "group",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#group",
    "access": "public",
    "description": "Given an Endless, split it into maximal-length finite lists\nwhere every element in each list is equal.",
    "examples": [
      "const ex = new Endless(x => x).group(3);\nex.take(3); // [[0, 1, 2], [3, 4, 5], [6, 7, 8]]"
    ],
    "lineNumber": 565,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "cycle",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~Endless.cycle",
    "access": "public",
    "description": "Repeat the elements of a non-empty finite list.",
    "examples": [
      "const ex = Endless.cycle([1, 2, 3, 4]);\nex.take(8) // [1, 2, 3, 4, 1, 2, 3, 4]"
    ],
    "lineNumber": 578,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "repeat",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~Endless.repeat",
    "access": "public",
    "description": "Given a list element, use that as every element in an infinite list.",
    "examples": [
      "const ex = Endless.repeat(1, 2, 3, 4);\nex.take(8) // [1, 2, 3, 4, 1, 2, 3, 4]"
    ],
    "lineNumber": 592,
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "values",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "zip",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~Endless.zip",
    "access": "public",
    "description": "Zip two or more Endless into an Endless of n-tuples,\nwhere `(a,b,c,..)` in the nth tuple are the nth elements\nof the given Endless instances respectively.",
    "examples": [
      "const a = new Endless(x => x);\nconst b = new Endless(x => x + 1);\nconst c = new Endless(x => x + 2);\nconst ex = Endless.zip(a, b, c);\nex.take(4) // [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]]"
    ],
    "lineNumber": 610,
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "lists",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Endless"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "src/index.js~Endless",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Endless#[Symbol.iterator]",
    "access": "public",
    "description": "Iterator function for an Endless instance\nUse at your own risk.",
    "lineNumber": 626,
    "params": [],
    "return": {
      "types": [
        "{\"next\": *}"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# endless.js\n\nInfinite List in JS similar to Haskell's InfList\n\n| Platform | Build Status |\n| --- | --- |\n| Linux | [![Build Status](https://travis-ci.org/LXSMNSYC/endless.js.svg?branch=master)](https://travis-ci.org/LXSMNSYC/endless.js) |\n| Windows | [![Build status](https://ci.appveyor.com/api/projects/status/rwooqlryoxow5imw?svg=true)](https://ci.appveyor.com/project/LXSMNSYC/endless-js) |\n\n[![codecov](https://codecov.io/gh/LXSMNSYC/endless.js/branch/master/graph/badge.svg)](https://codecov.io/gh/LXSMNSYC/endless.js)\n\n[![Known Vulnerabilities](https://snyk.io/test/github/LXSMNSYC/endless.js/badge.svg?targetFile=package.json)](https://snyk.io/test/github/LXSMNSYC/endless.js?targetFile=package.json)\n[![devDependencies Status](https://david-dm.org/lxsmnsyc/endless.js/dev-status.svg)](https://david-dm.org/lxsmnsyc/endless.js?type=dev)\n\n## Install\n\nNPM\n\n```bash\nnpm i endless-js\n```\n\nCDN\n\n```html\n<script style=\"https://cdn.jsdelivr.net/npm/endless-js/dist/index.min.js\"></script>\n```\n\n## Usage \n\nEndless behaves similarly to a normal Array instance. The only difference is that Endless can only be constructed given a function that produces values.\n\n```js\nconst example = new Endless(x => x); // [0, 1, 2, 3, 4, 5, ...]\n```\n\nYou can set/get through brackets notation:\n\n```js\nexample[0] = 100;\nexample[0]; // 100\n```\n\n## Documentation\n\n[![Inline docs](http://inch-ci.org/github/lxsmnsyc/endless.js.svg?branch=master)](http://inch-ci.org/github/lxsmnsyc/endless.js)\n\nOnline documentation available at the [Official endless.js docs site](https://lxsmnsyc.github.io/endless.js)\n\n## Build\n\nClone the repo first, then run:\n```bash\nnpm install\n```\n\nTo build:\n```bash\nnpm run build\n```",
    "longname": "/home/snd-admin/Desktop/Repos/endless.js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"endless-js\",\n  \"version\": \"0.1.1\",\n  \"description\": \"Infinite List in JS\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.3.4\",\n    \"@babel/preset-env\": \"^7.3.4\",\n    \"@babel/register\": \"^7.0.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-integrate-test-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.15.1\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-plugin-import\": \"^2.16.0\",\n    \"mocha\": \"^6.0.2\",\n    \"nyc\": \"^13.3.0\",\n    \"rollup\": \"^1.6.0\",\n    \"terser\": \"^3.17.0\"\n  },\n  \"scripts\": {\n    \"linux-mocha\": \"./node_modules/.bin/mocha --require @babel/register -R spec --recursive\",\n    \"linux-test\": \"./node_modules/.bin/nyc --reporter=html npm run linux-mocha\",\n    \"linux-docs\": \"./node_modules/.bin/esdoc\",\n    \"linux-cjs\": \"./node_modules/.bin/rollup src/index.js --format cjs --name \\\"Endless\\\" --file index.js\",\n    \"linux-browser\": \"./node_modules/.bin/rollup src/index.js --format iife --name \\\"Endless\\\" --file dist/index.js\",\n    \"linux-minify\": \"npm run linux-browser && ./node_modules/.bin/terser dist/index.js --compress --mangle --output dist/index.min.js\",\n    \"linux-build\": \"npm run linux-cjs && npm run linux-minify && npm run linux-docs && npm run linux-test\",\n    \"win-mocha\": \"node node_modules/mocha/bin/mocha --require @babel/register -R spec --recursive\",\n    \"win-test\": \"node node_modules/nyc/bin/nyc.js --reporter=html npm run win-mocha\",\n    \"win-docs\": \"node node_modules/esdoc/out/src/ESDocCLI.js\",\n    \"win-cjs\": \"node node_modules/.bin/rollup src/index.js --format cjs --name \\\"Endless\\\" --file index.js\",\n    \"win-browser\": \"node node_modules/.bin/rollup src/index.js --format iife --name \\\"Endless\\\" --file dist/index.js\",\n    \"win-minify\": \"npm run win-browser && node node_modules/.bin/terser dist/index.js --compress --mangle --output dist/index.min.js\",\n    \"win-build\": \"npm run win-cjs && npm run win-minify && npm run win-docs && npm run win-test\",\n    \"mocha\": \"npm run linux-mocha || npm run win-mocha\",\n    \"test\": \"npm run linux-test || npm run win-test\",\n    \"docs\": \"npm run linux-docs || npm run win-docs\",\n    \"cjs\": \"npm run linux-cjs || npm run win-cjs\",\n    \"browser\": \"npm run linux-browser || npm run win-browser\",\n    \"minify\": \"npm run linux-minify || npm run win-minify\",\n    \"build\": \"npm run cjs && npm run minify && npm run docs && npm test\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/LXSMNSYC/endless.js.git\"\n  },\n  \"keywords\": [\n    \"infinite\",\n    \"endless\",\n    \"array\",\n    \"data-structure\",\n    \"list\"\n  ],\n  \"author\": \"LXSMNSYC (alexis.munsayac@gmail.com)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/LXSMNSYC/endless.js/issues\"\n  },\n  \"homepage\": \"https://github.com/LXSMNSYC/endless.js#readme\"\n}\n",
    "longname": "/home/snd-admin/Desktop/Repos/endless.js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 89,
    "kind": "testFile",
    "name": "test/index.js",
    "content": "/* eslint-disable no-plusplus */\n/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Endless from '../src';\n\n/**\n *\n */\ndescribe('Endless', () => {\n  /**\n   *\n   */\n  describe('#flat', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).flat() instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => [x * 2, x + 1]).flat();\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === (i % 2 === 0 ? i : (i + 1) / 2));\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#flatMap', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).flatMap(() => []) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).flatMap(x => [x * 2, x + 1]);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === (i % 2 === 0 ? i : (i + 1) / 2));\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#map', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).map(x => x) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).map(x => x * 2);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === i * 2);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#filter', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).filter(() => true) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).filter(x => x % 2 === 0);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === i * 2);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#find', () => {\n    /**\n     *\n     */\n    it('should return a number', () => {\n      /**\n       *\n       */\n      assert(typeof new Endless(x => x).find(() => 1) === 'number');\n    });\n    /**\n     *\n     */\n    it('should correctly output the index', () => {\n      const ex = new Endless(x => x);\n      for (let i = 0; i < 100; i++) {\n        assert(ex.find(x => x === i) === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#findIndeces', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).findIndeces(x => x % 2 === 0) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).findIndeces(x => x % 2 === 0);\n      for (let i = 0; i < 100; i++) {\n        if (i % 2 === 0) {\n          assert(ex[i] === i * 2);\n        }\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#indexOf', () => {\n    /**\n     *\n     */\n    it('should return a number', () => {\n      /**\n       *\n       */\n      assert(typeof new Endless(x => x).indexOf(1) === 'number');\n    });\n    /**\n     *\n     */\n    it('should correctly output the index', () => {\n      const ex = new Endless(x => x);\n      for (let i = 0; i < 100; i++) {\n        assert(ex.indexOf(i) === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#deleteBy', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).deleteBy(x => x % 2 === 0) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).deleteBy(x => x === 0);\n      assert(ex[0] !== 0);\n      for (let i = 1; i < 100; i++) {\n        assert(ex[i - 1] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#delete', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).delete(0) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).delete(0);\n      assert(ex[0] !== 0);\n      for (let i = 1; i < 100; i++) {\n        assert(ex[i - 1] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#skip', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).skip(1) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).skip(1);\n      assert(ex[0] !== 0);\n      for (let i = 1; i < 100; i++) {\n        assert(ex[i - 1] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#skipWhile', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).skipWhile(x => x < 1) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).skipWhile(x => x < 1);\n      assert(ex[0] !== 0);\n      for (let i = 1; i < 100; i++) {\n        assert(ex[i - 1] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#skipUntil', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).skipUntil(x => x === 1) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).skipUntil(x => x === 1);\n      assert(ex[0] !== 0);\n      for (let i = 1; i < 100; i++) {\n        assert(ex[i - 1] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#drop', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).drop(1) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).drop(1);\n      assert(ex[0] !== 0);\n      for (let i = 1; i < 100; i++) {\n        assert(ex[i - 1] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#dropWhile', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).dropWhile(x => x < 1) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).dropWhile(x => x < 1);\n      assert(ex[0] !== 0);\n      for (let i = 1; i < 100; i++) {\n        assert(ex[i - 1] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#dropUntil', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).dropUntil(x => x === 1) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).dropUntil(x => x === 1);\n      assert(ex[0] !== 0);\n      for (let i = 1; i < 100; i++) {\n        assert(ex[i - 1] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#step', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).step(2) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).step(2);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === i * 2);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#startWith', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).startWith([1, 2, 3, 4, 5]) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const arr = [1, 2, 3, 4, 5];\n      const ex = new Endless(x => x).startWith(arr);\n      for (let i = 0; i < 100; i++) {\n        if (i < 5) {\n          assert(arr[i] === i + 1);\n        } else {\n          assert(ex[i] === i - 5);\n        }\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#take', () => {\n    /**\n     *\n     */\n    it('should return an Array', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).take(100) instanceof Array);\n    });\n    /**\n     *\n     */\n    it('should correctly output an Array', () => {\n      const ex = new Endless(x => x).take(100);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#takeWhile', () => {\n    /**\n     *\n     */\n    it('should return an Array', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).takeWhile(x => x < 100) instanceof Array);\n    });\n    /**\n     *\n     */\n    it('should correctly output an Array', () => {\n      const ex = new Endless(x => x).takeWhile(x => x < 100);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#takeUntil', () => {\n    /**\n     *\n     */\n    it('should return an Array', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).takeUntil(x => x === 100) instanceof Array);\n    });\n    /**\n     *\n     */\n    it('should correctly output an Array', () => {\n      const ex = new Endless(x => x).takeUntil(x => x === 100);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === i);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#splitAt', () => {\n    /**\n     *\n     */\n    it('should return an Array', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).splitAt(10) instanceof Array);\n    });\n    /**\n     *\n     */\n    it('should correctly output an Array', () => {\n      const ex = new Endless(x => x).splitAt(10);\n\n      for (let i = 0; i < 10; i++) {\n        assert(ex[0][i] === i);\n      }\n      for (let i = 0; i < 100; i++) {\n        assert(ex[1][i] === i + 10);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#span', () => {\n    /**\n     *\n     */\n    it('should return an Array', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).span(x => x < 10) instanceof Array);\n    });\n    /**\n     *\n     */\n    it('should correctly output an Array', () => {\n      const ex = new Endless(x => x).span(x => x < 10);\n\n      for (let i = 0; i < 10; i++) {\n        assert(ex[0][i] === i);\n      }\n      for (let i = 0; i < 100; i++) {\n        assert(ex[1][i] === i + 10);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#break', () => {\n    /**\n     *\n     */\n    it('should return an Array', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).break(x => x === 10) instanceof Array);\n    });\n    /**\n     *\n     */\n    it('should correctly output an Array', () => {\n      const ex = new Endless(x => x).break(x => x === 10);\n\n      for (let i = 0; i < 10; i++) {\n        assert(ex[0][i] === i);\n      }\n      for (let i = 0; i < 100; i++) {\n        assert(ex[1][i] === i + 10);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#intercalate', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).intercalate([1]) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).intercalate([1]);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === (i % 2 === 0 ? i / 2 : 1));\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#intersperse', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).intersperse(1) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).intersperse(1);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === (i % 2 === 0 ? i / 2 : 1));\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#group', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).group(3) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = new Endless(x => x).group(3);\n      for (let i = 0; i < 100; i++) {\n        const el = ex[i];\n        assert(el.length === 3);\n        assert(el[0] === i * 3);\n        assert(el[1] === i * 3 + 1);\n        assert(el[2] === i * 3 + 2);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#partition', () => {\n    /**\n     *\n     */\n    it('should return an Array', () => {\n      /**\n       *\n       */\n      assert(new Endless(x => x).partition(x => x % 2 === 0) instanceof Array);\n    });\n    /**\n     *\n     */\n    it('should correctly output an Array', () => {\n      const ex = new Endless(x => x).partition(x => x % 2 === 0);\n\n      for (let i = 0; i < 10; i++) {\n        assert(ex[0][i] === i * 2);\n      }\n      for (let i = 0; i < 100; i++) {\n        assert(ex[1][i] === i * 2 + 1);\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#cycle', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(Endless.cycle([1, 2, 3, 4]) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = Endless.cycle([1, 2, 3, 4]);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === ((i % 4) + 1));\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#repeat', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(Endless.repeat(1, 2, 3, 4) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const ex = Endless.repeat(1, 2, 3, 4);\n      for (let i = 0; i < 100; i++) {\n        assert(ex[i] === ((i % 4) + 1));\n      }\n    });\n  });\n  /**\n   *\n   */\n  describe('#zip', () => {\n    /**\n     *\n     */\n    it('should return an Endless', () => {\n      /**\n       *\n       */\n      assert(Endless.zip(new Endless(x => x), new Endless(x => x + 1)) instanceof Endless);\n    });\n    /**\n     *\n     */\n    it('should correctly output the Endless', () => {\n      const a = new Endless(x => x);\n      const b = new Endless(x => x + 1);\n      const c = new Endless(x => x + 2);\n      const ex = Endless.zip(a, b, c);\n      for (let i = 0; i < 100; i++) {\n        const el = ex[i];\n        assert(el.length === 3);\n        assert(el[0] === i);\n        assert(el[1] === i + 1);\n        assert(el[2] === i + 2);\n      }\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/endless.js/test/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/index.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/index.js~describe0",
    "access": "public",
    "description": "Endless",
    "lineNumber": 9
  },
  {
    "__docId__": 91,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe1",
    "access": "public",
    "description": "#flat",
    "lineNumber": 13
  },
  {
    "__docId__": 92,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/index.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe1.it2",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 17
  },
  {
    "__docId__": 93,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/index.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe1.it3",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 26
  },
  {
    "__docId__": 94,
    "kind": "test",
    "name": "describe4",
    "testId": 4,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe4",
    "access": "public",
    "description": "#flatMap",
    "lineNumber": 36
  },
  {
    "__docId__": 95,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/index.js~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe4.it5",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 40
  },
  {
    "__docId__": 96,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/index.js~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe4.it6",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 49
  },
  {
    "__docId__": 97,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe7",
    "access": "public",
    "description": "#map",
    "lineNumber": 59
  },
  {
    "__docId__": 98,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/index.js~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe7.it8",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 63
  },
  {
    "__docId__": 99,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/index.js~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe7.it9",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 72
  },
  {
    "__docId__": 100,
    "kind": "test",
    "name": "describe10",
    "testId": 10,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe10",
    "access": "public",
    "description": "#filter",
    "lineNumber": 82
  },
  {
    "__docId__": 101,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/index.js~describe0.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe10.it11",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 86
  },
  {
    "__docId__": 102,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/index.js~describe0.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe10.it12",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 95
  },
  {
    "__docId__": 103,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe13",
    "access": "public",
    "description": "#find",
    "lineNumber": 105
  },
  {
    "__docId__": 104,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/index.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe13.it14",
    "access": "public",
    "description": "should return a number",
    "lineNumber": 109
  },
  {
    "__docId__": 105,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/index.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe13.it15",
    "access": "public",
    "description": "should correctly output the index",
    "lineNumber": 118
  },
  {
    "__docId__": 106,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe16",
    "access": "public",
    "description": "#findIndeces",
    "lineNumber": 128
  },
  {
    "__docId__": 107,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/index.js~describe0.describe16",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe16.it17",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 132
  },
  {
    "__docId__": 108,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/index.js~describe0.describe16",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe16.it18",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 141
  },
  {
    "__docId__": 109,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe19",
    "access": "public",
    "description": "#indexOf",
    "lineNumber": 153
  },
  {
    "__docId__": 110,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/index.js~describe0.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe19.it20",
    "access": "public",
    "description": "should return a number",
    "lineNumber": 157
  },
  {
    "__docId__": 111,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/index.js~describe0.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe19.it21",
    "access": "public",
    "description": "should correctly output the index",
    "lineNumber": 166
  },
  {
    "__docId__": 112,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe22",
    "access": "public",
    "description": "#deleteBy",
    "lineNumber": 176
  },
  {
    "__docId__": 113,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/index.js~describe0.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe22.it23",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 180
  },
  {
    "__docId__": 114,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/index.js~describe0.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe22.it24",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 189
  },
  {
    "__docId__": 115,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe25",
    "access": "public",
    "description": "#delete",
    "lineNumber": 200
  },
  {
    "__docId__": 116,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/index.js~describe0.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe25.it26",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 204
  },
  {
    "__docId__": 117,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/index.js~describe0.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe25.it27",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 213
  },
  {
    "__docId__": 118,
    "kind": "test",
    "name": "describe28",
    "testId": 28,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe28",
    "access": "public",
    "description": "#skip",
    "lineNumber": 224
  },
  {
    "__docId__": 119,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/index.js~describe0.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe28.it29",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 228
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/index.js~describe0.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe28.it30",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 237
  },
  {
    "__docId__": 121,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe31",
    "access": "public",
    "description": "#skipWhile",
    "lineNumber": 248
  },
  {
    "__docId__": 122,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/index.js~describe0.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe31.it32",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 252
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/index.js~describe0.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe31.it33",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 261
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe34",
    "access": "public",
    "description": "#skipUntil",
    "lineNumber": 272
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/index.js~describe0.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe34.it35",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 276
  },
  {
    "__docId__": 126,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/index.js~describe0.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe34.it36",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 285
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "describe37",
    "testId": 37,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe37",
    "access": "public",
    "description": "#drop",
    "lineNumber": 296
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/index.js~describe0.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe37.it38",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 300
  },
  {
    "__docId__": 129,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/index.js~describe0.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe37.it39",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 309
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "describe40",
    "testId": 40,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe40",
    "access": "public",
    "description": "#dropWhile",
    "lineNumber": 320
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/index.js~describe0.describe40",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe40.it41",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 324
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/index.js~describe0.describe40",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe40.it42",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 333
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe43",
    "access": "public",
    "description": "#dropUntil",
    "lineNumber": 344
  },
  {
    "__docId__": 134,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/index.js~describe0.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe43.it44",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 348
  },
  {
    "__docId__": 135,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/index.js~describe0.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe43.it45",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 357
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "describe46",
    "testId": 46,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe46",
    "access": "public",
    "description": "#step",
    "lineNumber": 368
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/index.js~describe0.describe46",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe46.it47",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 372
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/index.js~describe0.describe46",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe46.it48",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 381
  },
  {
    "__docId__": 139,
    "kind": "test",
    "name": "describe49",
    "testId": 49,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe49",
    "access": "public",
    "description": "#startWith",
    "lineNumber": 391
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/index.js~describe0.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe49.it50",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 395
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/index.js~describe0.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe49.it51",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 404
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe52",
    "access": "public",
    "description": "#take",
    "lineNumber": 419
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/index.js~describe0.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe52.it53",
    "access": "public",
    "description": "should return an Array",
    "lineNumber": 423
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/index.js~describe0.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe52.it54",
    "access": "public",
    "description": "should correctly output an Array",
    "lineNumber": 432
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe55",
    "access": "public",
    "description": "#takeWhile",
    "lineNumber": 442
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/index.js~describe0.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe55.it56",
    "access": "public",
    "description": "should return an Array",
    "lineNumber": 446
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/index.js~describe0.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe55.it57",
    "access": "public",
    "description": "should correctly output an Array",
    "lineNumber": 455
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe58",
    "access": "public",
    "description": "#takeUntil",
    "lineNumber": 465
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/index.js~describe0.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe58.it59",
    "access": "public",
    "description": "should return an Array",
    "lineNumber": 469
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/index.js~describe0.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe58.it60",
    "access": "public",
    "description": "should correctly output an Array",
    "lineNumber": 478
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe61",
    "access": "public",
    "description": "#splitAt",
    "lineNumber": 488
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/index.js~describe0.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe61.it62",
    "access": "public",
    "description": "should return an Array",
    "lineNumber": 492
  },
  {
    "__docId__": 153,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/index.js~describe0.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe61.it63",
    "access": "public",
    "description": "should correctly output an Array",
    "lineNumber": 501
  },
  {
    "__docId__": 154,
    "kind": "test",
    "name": "describe64",
    "testId": 64,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe64",
    "access": "public",
    "description": "#span",
    "lineNumber": 515
  },
  {
    "__docId__": 155,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/index.js~describe0.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe64.it65",
    "access": "public",
    "description": "should return an Array",
    "lineNumber": 519
  },
  {
    "__docId__": 156,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/index.js~describe0.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe64.it66",
    "access": "public",
    "description": "should correctly output an Array",
    "lineNumber": 528
  },
  {
    "__docId__": 157,
    "kind": "test",
    "name": "describe67",
    "testId": 67,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe67",
    "access": "public",
    "description": "#break",
    "lineNumber": 542
  },
  {
    "__docId__": 158,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/index.js~describe0.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe67.it68",
    "access": "public",
    "description": "should return an Array",
    "lineNumber": 546
  },
  {
    "__docId__": 159,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/index.js~describe0.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe67.it69",
    "access": "public",
    "description": "should correctly output an Array",
    "lineNumber": 555
  },
  {
    "__docId__": 160,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe70",
    "access": "public",
    "description": "#intercalate",
    "lineNumber": 569
  },
  {
    "__docId__": 161,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/index.js~describe0.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe70.it71",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 573
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/index.js~describe0.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe70.it72",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 582
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe73",
    "access": "public",
    "description": "#intersperse",
    "lineNumber": 592
  },
  {
    "__docId__": 164,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/index.js~describe0.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe73.it74",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 596
  },
  {
    "__docId__": 165,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/index.js~describe0.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe73.it75",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 605
  },
  {
    "__docId__": 166,
    "kind": "test",
    "name": "describe76",
    "testId": 76,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe76",
    "access": "public",
    "description": "#group",
    "lineNumber": 615
  },
  {
    "__docId__": 167,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/index.js~describe0.describe76",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe76.it77",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 619
  },
  {
    "__docId__": 168,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/index.js~describe0.describe76",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe76.it78",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 628
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe79",
    "access": "public",
    "description": "#partition",
    "lineNumber": 642
  },
  {
    "__docId__": 170,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/index.js~describe0.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe79.it80",
    "access": "public",
    "description": "should return an Array",
    "lineNumber": 646
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/index.js~describe0.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe79.it81",
    "access": "public",
    "description": "should correctly output an Array",
    "lineNumber": 655
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe82",
    "access": "public",
    "description": "#cycle",
    "lineNumber": 669
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/index.js~describe0.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe82.it83",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 673
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/index.js~describe0.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe82.it84",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 682
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe85",
    "access": "public",
    "description": "#repeat",
    "lineNumber": 692
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/index.js~describe0.describe85",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe85.it86",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 696
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/index.js~describe0.describe85",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe85.it87",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 705
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "test/index.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.js~describe0.describe88",
    "access": "public",
    "description": "#zip",
    "lineNumber": 715
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/index.js~describe0.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe88.it89",
    "access": "public",
    "description": "should return an Endless",
    "lineNumber": 719
  },
  {
    "__docId__": 180,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/index.js~describe0.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/index.js~describe0.describe88.it90",
    "access": "public",
    "description": "should correctly output the Endless",
    "lineNumber": 728
  }
]