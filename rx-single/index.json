[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/emitter.js",
    "content": "import { Cancellable, BooleanCancellable } from 'rx-cancellable';\nimport { isOf, isNull } from './internal/utils';\n/**\n * Abstraction over a SingleObserver that allows associating\n * a resource with it.\n *\n * Calling onSuccess(Object) multiple times has no effect.\n * Calling onError(Error) multiple times or after onSuccess\n * has no effect.\n */\n// eslint-disable-next-line no-unused-vars\nexport default class SingleEmitter extends Cancellable {\n  constructor(success, error) {\n    super();\n    /**\n     * @ignore\n     */\n    this.success = success;\n    /**\n     * @ignore\n     */\n    this.error = error;\n    /**\n     * @ignore\n     */\n    this.link = new BooleanCancellable();\n  }\n\n  /**\n   * Returns true if the emitter is cancelled.\n   * @returns {boolean}\n   */\n  get cancelled() {\n    return this.link.cancelled;\n  }\n\n  /**\n   * Returns true if the emitter is cancelled successfully.\n   * @returns {boolean}\n   */\n  cancel() {\n    return this.link.cancel();\n  }\n\n  /**\n   * Set the given Cancellable as the Emitter's cancellable state.\n   * @param {Cancellable} cancellable\n   * The Cancellable instance\n   * @returns {boolean}\n   * Returns true if the cancellable is valid.\n   */\n  setCancellable(cancellable) {\n    if (isOf(cancellable, Cancellable)) {\n      if (this.cancelled) {\n        cancellable.cancel();\n      } else if (cancellable.cancelled) {\n        this.cancel();\n        return true;\n      } else {\n        const { link } = this;\n        this.link = cancellable;\n        link.cancel();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Emits a success value.\n   * @param {!any} value\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onSuccess(value) {\n    if (this.cancelled) {\n      return;\n    }\n    try {\n      if (isNull(value)) {\n        this.error(new Error('onSuccess called with a null value.'));\n      } else {\n        this.success(value);\n      }\n    } finally {\n      this.cancel();\n    }\n  }\n\n  /**\n   * Emits an error value.\n   * @param {!Error} err\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onError(err) {\n    let report = err;\n    if (!isOf(err, Error)) {\n      report = new Error('onError called with a non-Error value.');\n    }\n    if (this.cancelled) {\n      return;\n    }\n    try {\n      this.error(report);\n    } finally {\n      this.cancel();\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/emitter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "SingleEmitter",
    "memberof": "src/emitter.js",
    "static": true,
    "longname": "src/emitter.js~SingleEmitter",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/emitter.js",
    "importStyle": "SingleEmitter",
    "description": "Abstraction over a SingleObserver that allows associating\na resource with it.\n\nCalling onSuccess(Object) multiple times has no effect.\nCalling onError(Error) multiple times or after onSuccess\nhas no effect.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "rx-cancellable~Cancellable"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/emitter.js~SingleEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~SingleEmitter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "success",
    "memberof": "src/emitter.js~SingleEmitter",
    "static": false,
    "longname": "src/emitter.js~SingleEmitter#success",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "error",
    "memberof": "src/emitter.js~SingleEmitter",
    "static": false,
    "longname": "src/emitter.js~SingleEmitter#error",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "link",
    "memberof": "src/emitter.js~SingleEmitter",
    "static": false,
    "longname": "src/emitter.js~SingleEmitter#link",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "get",
    "name": "cancelled",
    "memberof": "src/emitter.js~SingleEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~SingleEmitter#cancelled",
    "access": "public",
    "description": "Returns true if the emitter is cancelled.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "cancel",
    "memberof": "src/emitter.js~SingleEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~SingleEmitter#cancel",
    "access": "public",
    "description": "Returns true if the emitter is cancelled successfully.",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "setCancellable",
    "memberof": "src/emitter.js~SingleEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~SingleEmitter#setCancellable",
    "access": "public",
    "description": "Set the given Cancellable as the Emitter's cancellable state.",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}\nReturns true if the cancellable is valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Cancellable"
        ],
        "spread": false,
        "optional": false,
        "name": "cancellable",
        "description": "The Cancellable instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the cancellable is valid."
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "onSuccess",
    "memberof": "src/emitter.js~SingleEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~SingleEmitter#onSuccess",
    "access": "public",
    "description": "Emits a success value.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "onError",
    "memberof": "src/emitter.js~SingleEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/emitter.js~SingleEmitter#onError",
    "access": "public",
    "description": "Emits an error value.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": false,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/index.js",
    "content": "/* eslint-disable no-unused-vars */\nimport Single from './single';\nimport SingleEmitter from './emitter';\nimport Observer from './observer';\n\nexport default Single;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/internal/is.js",
    "content": "import Single from '../single';\n/**\n * @ignore\n */\nexport default x => x instanceof Single;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/is.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "is",
    "memberof": "src/internal/is.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/is.js~is",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/is.js",
    "importStyle": "is",
    "description": "",
    "lineNumber": 5,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/internal/operators/amb.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport { CompositeCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { isIterable, cleanObserver } from '../utils';\nimport error from './error';\nimport is from '../is';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const controller = new CompositeCancellable();\n\n  onSubscribe(controller);\n\n  const { sources } = this;\n\n  for (const single of sources) {\n    if (controller.cancelled) {\n      return;\n    }\n\n    if (is(single)) {\n      single.subscribeWith({\n        onSubscribe(c) {\n          controller.add(c);\n        },\n        // eslint-disable-next-line no-loop-func\n        onSuccess(x) {\n          onSuccess(x);\n          controller.cancel();\n        },\n        onError(x) {\n          onError(x);\n          controller.cancel();\n        },\n      });\n    } else {\n      onError(new Error('Single.amb: One of the sources is a non-Single.'));\n      controller.cancel();\n      break;\n    }\n  }\n}\n/**\n * @ignore\n */\nexport default (sources) => {\n  if (!isIterable(sources)) {\n    return error(new Error('Single.amb: sources is not Iterable.'));\n  }\n  const single = new Single(subscribeActual);\n  single.sources = sources;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/amb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/amb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/amb.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/amb.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "amb",
    "memberof": "src/internal/operators/amb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/amb.js~amb",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/amb.js",
    "importStyle": "amb",
    "description": "",
    "lineNumber": 50,
    "ignore": true,
    "params": [
      {
        "name": "sources",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/internal/operators/ambArray.js",
    "content": "/* eslint-disable no-restricted-syntax */\nimport { CompositeCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { cleanObserver, immediateError, isArray } from '../utils';\nimport error from './error';\nimport is from '../is';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { sources } = this;\n  const { length } = sources;\n\n  if (length === 0) {\n    immediateError(observer, new Error('Single.ambArray: sources Array is empty.'));\n  } else {\n    const controller = new CompositeCancellable();\n\n    onSubscribe(controller);\n\n    for (let i = 0; i < length; i += 1) {\n      const single = sources[i];\n      if (controller.cancelled) {\n        return;\n      }\n      if (is(single)) {\n        single.subscribeWith({\n          onSubscribe(c) {\n            controller.add(c);\n          },\n          // eslint-disable-next-line no-loop-func\n          onSuccess(x) {\n            onSuccess(x);\n            controller.cancel();\n          },\n          onError(x) {\n            onError(x);\n            controller.cancel();\n          },\n        });\n      } else {\n        onError(new Error('Single.ambArray: One of the sources is a non-Single.'));\n        controller.cancel();\n        break;\n      }\n    }\n  }\n}\n/**\n * @ignore\n */\nexport default (sources) => {\n  if (!isArray(sources)) {\n    return error(new Error('Single.ambArray: sources is not an Array.'));\n  }\n  const single = new Single(subscribeActual);\n  single.sources = sources;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/ambArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/ambArray.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/ambArray.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/ambArray.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "ambArray",
    "memberof": "src/internal/operators/ambArray.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/ambArray.js~ambArray",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/ambArray.js",
    "importStyle": "ambArray",
    "description": "",
    "lineNumber": 55,
    "ignore": true,
    "params": [
      {
        "name": "sources",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/internal/operators/ambWith.js",
    "content": "import ambArray from './ambArray';\nimport is from '../is';\n/**\n * @ignore\n */\nexport default (source, other) => {\n  if (!(is(other))) {\n    return source;\n  }\n  return ambArray([source, other]);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/ambWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "ambWith",
    "memberof": "src/internal/operators/ambWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/ambWith.js~ambWith",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/ambWith.js",
    "importStyle": "ambWith",
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/internal/operators/cache.js",
    "content": "import { BooleanCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { cleanObserver, exists } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const {\n    source, cached, observers, subscribed,\n  } = this;\n\n  if (!cached) {\n    const index = observers.length;\n    observers[index] = observer;\n\n    const controller = new BooleanCancellable();\n\n    controller.addEventListener('cancel', () => {\n      observers.splice(index, 1);\n    });\n\n    onSubscribe(controller);\n\n    if (!subscribed) {\n      source.subscribeWith({\n        onSubscribe() {\n          // not applicable\n        },\n        onSuccess: (x) => {\n          this.cached = true;\n          this.value = x;\n\n          // eslint-disable-next-line no-restricted-syntax\n          for (const obs of observers) {\n            obs.onSuccess(x);\n          }\n          controller.cancel();\n          this.observers = undefined;\n        },\n        onError: (x) => {\n          this.cached = true;\n          this.error = x;\n\n          // eslint-disable-next-line no-restricted-syntax\n          for (const obs of observers) {\n            obs.onError(x);\n          }\n          controller.cancel();\n          this.observers = undefined;\n        },\n      });\n      this.subscribed = true;\n    }\n  } else {\n    const controller = new BooleanCancellable();\n    onSubscribe(controller);\n\n    const { value, error } = this;\n    if (exists(value)) {\n      onSuccess(value);\n    }\n    if (exists(error)) {\n      onError(error);\n    }\n    controller.cancel();\n  }\n}\n\n/**\n * @ignore\n */\nexport default (source) => {\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.cached = false;\n  single.subscribed = false;\n  single.observers = [];\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/cache.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/cache.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/cache.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "cache",
    "memberof": "src/internal/operators/cache.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/cache.js~cache",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/cache.js",
    "importStyle": "cache",
    "description": "",
    "lineNumber": 75,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/internal/operators/compose.js",
    "content": "import error from './error';\nimport { isFunction } from '../utils';\nimport is from '../is';\n\n/**\n * @ignore\n */\nexport default (source, transformer) => {\n  if (!isFunction(transformer)) {\n    return source;\n  }\n\n  let result;\n\n  try {\n    result = transformer(source);\n\n    if (!is(result)) {\n      throw new Error('Single.compose: transformer returned a non-Single.');\n    }\n  } catch (e) {\n    result = error(e);\n  }\n\n  return result;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/compose.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "compose",
    "memberof": "src/internal/operators/compose.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/compose.js~compose",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/compose.js",
    "importStyle": "compose",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "transformer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/internal/operators/contains.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction, isNull } from '../utils';\n\n/**\n * @ignore\n */\nconst containsComparer = (x, y) => x === y;\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { value, comparer } = this;\n\n  this.source.subscribeWith({\n    onSubscribe,\n    onSuccess(x) {\n      let result;\n      try {\n        result = comparer(x, value);\n      } catch (e) {\n        onError(e);\n        return;\n      }\n      onSuccess(result);\n    },\n    onError,\n  });\n}\n/**\n * @ignore\n */\nexport default (source, value, comparer) => {\n  if (isNull(value)) {\n    return source;\n  }\n\n  let cmp = comparer;\n  if (!isFunction(cmp)) {\n    cmp = containsComparer;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.value = value;\n  single.comparer = cmp;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/contains.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "containsComparer",
    "memberof": "src/internal/operators/contains.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/contains.js~containsComparer",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/contains.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/contains.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/contains.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/contains.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "contains",
    "memberof": "src/internal/operators/contains.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/contains.js~contains",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/contains.js",
    "importStyle": "contains",
    "description": "",
    "lineNumber": 35,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "comparer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/internal/operators/create.js",
    "content": "import { cleanObserver, isFunction } from '../utils';\nimport Single from '../../single';\nimport error from './error';\nimport SingleEmitter from '../../emitter';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const emitter = new SingleEmitter(onSuccess, onError);\n\n  onSubscribe(emitter);\n\n  try {\n    this.subscriber(emitter);\n  } catch (ex) {\n    emitter.onError(ex);\n  }\n}\n/**\n * @ignore\n */\nexport default (subscriber) => {\n  if (!isFunction(subscriber)) {\n    return error(new Error('Single.create: There are no subscribers.'));\n  }\n  const single = new Single(subscribeActual);\n  single.subscriber = subscriber;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/create.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/create.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/create.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "create",
    "memberof": "src/internal/operators/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/create.js~create",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/create.js",
    "importStyle": "create",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "subscriber",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/internal/operators/defer.js",
    "content": "import Single from '../../single';\nimport { immediateError, cleanObserver, exists } from '../utils';\nimport is from '../is';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  let result;\n\n  let err;\n  try {\n    result = this.supplier();\n    if (!is(result)) {\n      throw new Error('Single.defer: supplier returned a non-Single.');\n    }\n  } catch (e) {\n    err = e;\n  }\n\n  if (exists(err)) {\n    immediateError(observer, err);\n  } else {\n    result.subscribeWith({\n      onSubscribe,\n      onSuccess,\n      onError,\n    });\n  }\n}\n/**\n * @ignore\n */\nexport default (supplier) => {\n  const single = new Single(subscribeActual);\n  single.supplier = supplier;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/defer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/defer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/defer.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/defer.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "defer",
    "memberof": "src/internal/operators/defer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/defer.js~defer",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/defer.js",
    "importStyle": "defer",
    "description": "",
    "lineNumber": 36,
    "ignore": true,
    "params": [
      {
        "name": "supplier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/internal/operators/delay.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport Scheduler from 'rx-scheduler';\nimport Single from '../../single';\nimport { cleanObserver, isNumber, isOf } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { amount, scheduler, doDelayError } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  this.source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onSuccess(x) {\n      controller.link(\n        scheduler.delay(() => {\n          onSuccess(x);\n        }, amount),\n      );\n    },\n    onError(x) {\n      controller.link(\n        scheduler.delay(() => {\n          onError(x);\n        }, doDelayError ? amount : 0),\n      );\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, amount, scheduler, doDelayError) => {\n  if (!isNumber(amount)) {\n    return source;\n  }\n  let sched = scheduler;\n  if (!isOf(sched, Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.amount = amount;\n  single.scheduler = sched;\n  single.doDelayError = doDelayError;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/delay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/delay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delay.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/delay.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "delay",
    "memberof": "src/internal/operators/delay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delay.js~delay",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/delay.js",
    "importStyle": "delay",
    "description": "",
    "lineNumber": 41,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      },
      {
        "name": "doDelayError",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/internal/operators/delaySubscription.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport Scheduler from 'rx-scheduler';\nimport Single from '../../single';\nimport { cleanObserver, isNumber, isOf } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { amount, scheduler, source } = this;\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  controller.link(\n    scheduler.delay(() => {\n      controller.unlink();\n      source.subscribeWith({\n        onSubscribe(ac) {\n          controller.link(ac);\n        },\n        onSuccess,\n        onError,\n      });\n    }, amount),\n  );\n}\n/**\n * @ignore\n */\nexport default (source, amount, scheduler) => {\n  if (!isNumber(amount)) {\n    return source;\n  }\n  let sched = scheduler;\n  if (!isOf(sched, Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.amount = amount;\n  single.scheduler = sched;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/delaySubscription.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/delaySubscription.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delaySubscription.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/delaySubscription.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "delaySubscription",
    "memberof": "src/internal/operators/delaySubscription.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delaySubscription.js~delaySubscription",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/delaySubscription.js",
    "importStyle": "delaySubscription",
    "description": "",
    "lineNumber": 33,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/internal/operators/delayUntil.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { cleanObserver } from '../utils';\nimport is from '../is';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, other } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  other.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onSuccess() {\n      controller.unlink();\n      source.subscribeWith({\n        onSubscribe(ac) {\n          controller.link(ac);\n        },\n        onSuccess,\n        onError,\n      });\n    },\n    onError,\n  });\n}\n/**\n * @ignore\n */\nexport default (source, other) => {\n  if (!is(other)) {\n    return source;\n  }\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.other = other;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/delayUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/delayUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delayUntil.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/delayUntil.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "delayUntil",
    "memberof": "src/internal/operators/delayUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/delayUntil.js~delayUntil",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/delayUntil.js",
    "importStyle": "delayUntil",
    "description": "",
    "lineNumber": 38,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/internal/operators/doAfterSuccess.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onSuccess(x) {\n      onSuccess(x);\n      callable(x);\n    },\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.callable = callable;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/doAfterSuccess.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doAfterSuccess.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doAfterSuccess.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/doAfterSuccess.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "doAfterSuccess",
    "memberof": "src/internal/operators/doAfterSuccess.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doAfterSuccess.js~doAfterSuccess",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/doAfterSuccess.js",
    "importStyle": "doAfterSuccess",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/internal/operators/doAfterTerminate.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onSuccess(x) {\n      onSuccess(x);\n      callable();\n    },\n    onError(x) {\n      onError(x);\n      callable();\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.callable = callable;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/doAfterTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doAfterTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doAfterTerminate.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/doAfterTerminate.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "doAfterTerminate",
    "memberof": "src/internal/operators/doAfterTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doAfterTerminate.js~doAfterTerminate",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/doAfterTerminate.js",
    "importStyle": "doAfterTerminate",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/internal/operators/doFinally.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  let called = false;\n  source.subscribeWith({\n    onSubscribe(ac) {\n      ac.addEventListener('cancel', () => {\n        if (!called) {\n          callable();\n          called = true;\n        }\n      });\n      onSubscribe(ac);\n    },\n    onSuccess(x) {\n      onSuccess(x);\n      if (!called) {\n        callable();\n        called = true;\n      }\n    },\n    onError(x) {\n      onError(x);\n      if (!called) {\n        callable();\n        called = true;\n      }\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.callable = callable;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/doFinally.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doFinally.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doFinally.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/doFinally.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "doFinally",
    "memberof": "src/internal/operators/doFinally.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doFinally.js~doFinally",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/doFinally.js",
    "importStyle": "doFinally",
    "description": "",
    "lineNumber": 43,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "src/internal/operators/doOnCancel.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      ac.addEventListener('cancel', callable);\n      onSubscribe(ac);\n    },\n    onSuccess,\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.callable = callable;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/doOnCancel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnCancel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnCancel.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/doOnCancel.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "doOnCancel",
    "memberof": "src/internal/operators/doOnCancel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnCancel.js~doOnCancel",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/doOnCancel.js",
    "importStyle": "doOnCancel",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/internal/operators/doOnError.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onSuccess,\n    onError(x) {\n      callable(x);\n      onError(x);\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.callable = callable;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/doOnError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnError.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/doOnError.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "doOnError",
    "memberof": "src/internal/operators/doOnError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnError.js~doOnError",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/doOnError.js",
    "importStyle": "doOnError",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/internal/operators/doOnEvent.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onSuccess(x) {\n      callable(x);\n      onSuccess(x);\n    },\n    onError(x) {\n      callable(undefined, x);\n      onError(x);\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.callable = callable;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/doOnEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnEvent.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnEvent.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/doOnEvent.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "doOnEvent",
    "memberof": "src/internal/operators/doOnEvent.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnEvent.js~doOnEvent",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/doOnEvent.js",
    "importStyle": "doOnEvent",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/internal/operators/doOnSubscribe.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe(d) {\n      callable(d);\n      onSubscribe(d);\n    },\n    onSuccess,\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.callable = callable;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/doOnSubscribe.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnSubscribe.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnSubscribe.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/doOnSubscribe.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "doOnSubscribe",
    "memberof": "src/internal/operators/doOnSubscribe.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnSubscribe.js~doOnSubscribe",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/doOnSubscribe.js",
    "importStyle": "doOnSubscribe",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/internal/operators/doOnSuccess.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onSuccess(x) {\n      callable(x);\n      onSuccess(x);\n    },\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.callable = callable;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/doOnSuccess.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnSuccess.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnSuccess.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/doOnSuccess.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "doOnSuccess",
    "memberof": "src/internal/operators/doOnSuccess.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnSuccess.js~doOnSuccess",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/doOnSuccess.js",
    "importStyle": "doOnSuccess",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/internal/operators/doOnTerminate.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, callable } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onSuccess(x) {\n      callable();\n      onSuccess(x);\n    },\n    onError(x) {\n      callable();\n      onError(x);\n    },\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, callable) => {\n  if (!isFunction(callable)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.callable = callable;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/doOnTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/doOnTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnTerminate.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/doOnTerminate.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "doOnTerminate",
    "memberof": "src/internal/operators/doOnTerminate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/doOnTerminate.js~doOnTerminate",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/doOnTerminate.js",
    "importStyle": "doOnTerminate",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/internal/operators/error.js",
    "content": "import {\n  toCallable, immediateError, isFunction, isNull, isOf,\n} from '../utils';\nimport Single from '../../single';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  let err;\n\n  try {\n    err = this.supplier();\n\n    if (isNull(err)) {\n      throw new Error('Single.error: Error supplier returned a null value.');\n    }\n  } catch (e) {\n    err = e;\n  }\n  immediateError(observer, err);\n}\n/**\n * @ignore\n */\nexport default (value) => {\n  let report = value;\n  if (!(isOf(value, Error) || isFunction(value))) {\n    report = new Error('Single.error received a non-Error value.');\n  }\n\n  if (!isFunction(value)) {\n    report = toCallable(report);\n  }\n  const single = new Single(subscribeActual);\n  single.supplier = report;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/error.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/error.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "error",
    "memberof": "src/internal/operators/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/error.js~error",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/error.js",
    "importStyle": "error",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/internal/operators/flatMap.js",
    "content": "import { LinkedCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\nimport is from '../is';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSubscribe, onError, onSuccess } = cleanObserver(observer);\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  const { mapper, source } = this;\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onSuccess(x) {\n      controller.unlink();\n      let result;\n      try {\n        result = mapper(x);\n\n        if (!is(result)) {\n          throw new Error('Single.flatMap: mapper returned a non-Single');\n        }\n      } catch (e) {\n        onError(e);\n        controller.cancel();\n        return;\n      }\n      result.subscribeWith({\n        onSubscribe(ac) {\n          controller.link(ac);\n        },\n        onSuccess,\n        onError,\n      });\n    },\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source, mapper) => {\n  if (!isFunction(mapper)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.mapper = mapper;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/flatMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/flatMap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/flatMap.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/flatMap.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "flatMap",
    "memberof": "src/internal/operators/flatMap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/flatMap.js~flatMap",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/flatMap.js",
    "importStyle": "flatMap",
    "description": "",
    "lineNumber": 51,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/internal/operators/fromCallable.js",
    "content": "import Single from '../../single';\nimport SingleEmitter from '../../emitter';\nimport error from './error';\nimport fromPromise from './fromPromise';\nimport {\n  isPromise, cleanObserver, isFunction,\n} from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const emitter = new SingleEmitter(onSuccess, onError);\n\n  onSubscribe(emitter);\n\n  let result;\n  try {\n    result = this.callable();\n  } catch (e) {\n    emitter.onError(e);\n    return;\n  }\n\n  if (isPromise(result)) {\n    fromPromise(result).subscribeWith({\n      onSubscribe(ac) {\n        emitter.setCancellable(ac);\n      },\n      onSuccess(x) {\n        emitter.onSuccess(x);\n      },\n      onError(e) {\n        emitter.onError(e);\n      },\n    });\n  } else {\n    emitter.onSuccess(result);\n  }\n}\n/**\n * @ignore\n */\nexport default (callable) => {\n  if (!isFunction(callable)) {\n    return error(new Error('Single.fromCallable: callable received is not a function.'));\n  }\n  const single = new Single(subscribeActual);\n  single.callable = callable;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/fromCallable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/fromCallable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromCallable.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/fromCallable.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "fromCallable",
    "memberof": "src/internal/operators/fromCallable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromCallable.js~fromCallable",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/fromCallable.js",
    "importStyle": "fromCallable",
    "description": "",
    "lineNumber": 46,
    "ignore": true,
    "params": [
      {
        "name": "callable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/internal/operators/fromPromise.js",
    "content": "import Single from '../../single';\nimport {\n  isPromise, cleanObserver,\n} from '../utils';\nimport error from './error';\nimport SingleEmitter from '../../emitter';\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const emitter = new SingleEmitter(onSuccess, onError);\n\n  onSubscribe(emitter);\n\n  this.promise.then(\n    x => emitter.onSuccess(x),\n    x => emitter.onError(x),\n  );\n}\n/**\n * @ignore\n */\nexport default (promise) => {\n  if (!isPromise(promise)) {\n    return error(new Error('Single.fromPromise: expects a Promise-like value.'));\n  }\n  const single = new Single(subscribeActual);\n  single.promise = promise;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/fromPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/fromPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromPromise.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/fromPromise.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "fromPromise",
    "memberof": "src/internal/operators/fromPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromPromise.js~fromPromise",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/fromPromise.js",
    "importStyle": "fromPromise",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "promise",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "src/internal/operators/fromResolvable.js",
    "content": "import {\n  cleanObserver, isFunction,\n} from '../utils';\nimport Single from '../../single';\nimport error from './error';\nimport SingleEmitter from '../../emitter';\n\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const emitter = new SingleEmitter(onSuccess, onError);\n\n  onSubscribe(emitter);\n\n  this.subscriber(\n    x => emitter.onSuccess(x),\n    x => emitter.onError(x),\n  );\n}\n/**\n * @ignore\n */\nexport default (subscriber) => {\n  if (!isFunction(subscriber)) {\n    return error(new Error('Single.fromResolvable: expects a function.'));\n  }\n  const single = new Single(subscribeActual);\n  single.subscriber = subscriber;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/fromResolvable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/fromResolvable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromResolvable.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/fromResolvable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "fromResolvable",
    "memberof": "src/internal/operators/fromResolvable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/fromResolvable.js~fromResolvable",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/fromResolvable.js",
    "importStyle": "fromResolvable",
    "description": "",
    "lineNumber": 23,
    "ignore": true,
    "params": [
      {
        "name": "subscriber",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/internal/operators/just.js",
    "content": "import Single from '../../single';\nimport error from './error';\nimport { immediateSuccess, isNull } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  immediateSuccess(observer, this.value);\n}\n/**\n * @ignore\n */\nexport default (value) => {\n  if (isNull(value)) {\n    return error(new Error('Single.just: received a null value.'));\n  }\n  const single = new Single(subscribeActual);\n  single.value = value;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/just.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/just.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/just.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/just.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "just",
    "memberof": "src/internal/operators/just.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/just.js~just",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/just.js",
    "importStyle": "just",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/internal/operators/lift.js",
    "content": "import Single from '../../single';\nimport { isObserver, immediateError, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  let result;\n\n  try {\n    result = this.operator(observer);\n\n    if (!isObserver(result)) {\n      throw new Error('Single.lift: operator returned a non-Observer.');\n    }\n  } catch (e) {\n    immediateError(observer, e);\n    return;\n  }\n\n  this.source.subscribeWith(result);\n}\n\n/**\n * @ignore\n */\nexport default (source, operator) => {\n  if (!isFunction(operator)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.operator = operator;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/lift.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/lift.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/lift.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/lift.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "lift",
    "memberof": "src/internal/operators/lift.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/lift.js~lift",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/lift.js",
    "importStyle": "lift",
    "description": "",
    "lineNumber": 27,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "operator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/internal/operators/map.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction, isNull } from '../utils';\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { mapper } = this;\n\n  this.source.subscribeWith({\n    onSubscribe,\n    onSuccess(x) {\n      let result;\n      try {\n        result = mapper(x);\n        if (isNull(result)) {\n          throw new Error('Single.map: mapper function returned a null value.');\n        }\n      } catch (e) {\n        onError(e);\n        return;\n      }\n      onSuccess(result);\n    },\n    onError,\n  });\n}\n/**\n * @ignore\n */\nexport default (source, mapper) => {\n  if (!isFunction(mapper)) {\n    return source;\n  }\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.mapper = mapper;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/map.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/map.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/map.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "map",
    "memberof": "src/internal/operators/map.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/map.js~map",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/map.js",
    "importStyle": "map",
    "description": "",
    "lineNumber": 32,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "src/internal/operators/merge.js",
    "content": "\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport error from './error';\nimport { cleanObserver } from '../utils';\nimport is from '../is';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSubscribe, onError, onSuccess } = cleanObserver(observer);\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  this.source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onSuccess(x) {\n      controller.unlink();\n      let result = x;\n      if (!is(x)) {\n        result = error(new Error('Single.merge: source emitted a non-Single value.'));\n      }\n      result.subscribeWith({\n        onSubscribe(ac) {\n          controller.link(ac);\n        },\n        onSuccess,\n        onError,\n      });\n    },\n    onError,\n  });\n}\n\n/**\n * @ignore\n */\nexport default (source) => {\n  if (!is(source)) {\n    return error(new Error('Single.merge: source is not a Single.'));\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/merge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/merge.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/merge.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/merge.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "merge",
    "memberof": "src/internal/operators/merge.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/merge.js~merge",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/merge.js",
    "importStyle": "merge",
    "description": "",
    "lineNumber": 43,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/internal/operators/never.js",
    "content": "/* eslint-disable class-methods-use-this */\nimport { UNCANCELLED } from 'rx-cancellable';\nimport Single from '../../single';\nimport { isNull } from '../utils';\n/**\n * @ignore\n */\nlet INSTANCE;\n/**\n * @ignore\n */\nexport default () => {\n  if (isNull(INSTANCE)) {\n    INSTANCE = new Single(o => o.onSubscribe(UNCANCELLED));\n  }\n  return INSTANCE;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/never.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "never",
    "memberof": "src/internal/operators/never.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/never.js~never",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/never.js",
    "importStyle": "never",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/internal/operators/observeOn.js",
    "content": "\nimport Scheduler from 'rx-scheduler';\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { cleanObserver, isOf } from '../utils';\n\nfunction subscribeActual(observer) {\n  const { onSubscribe, onSuccess, onError } = cleanObserver(observer);\n\n  const { source, scheduler } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onSuccess(x) {\n      controller.link(scheduler.schedule(() => {\n        onSuccess(x);\n      }));\n    },\n    onError(x) {\n      controller.link(scheduler.schedule(() => {\n        onError(x);\n      }));\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, scheduler) => {\n  let sched = scheduler;\n  if (!isOf(sched, Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.scheduler = sched;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/observeOn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/observeOn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/observeOn.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/observeOn.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "observeOn",
    "memberof": "src/internal/operators/observeOn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/observeOn.js~observeOn",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/observeOn.js",
    "importStyle": "observeOn",
    "description": "",
    "lineNumber": 35,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/internal/operators/onErrorResumeNext.js",
    "content": "\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\nimport is from '../is';\n\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, resumeIfError } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onSuccess,\n    onError(x) {\n      controller.unlink();\n      let result;\n\n      if (isFunction(resumeIfError)) {\n        try {\n          result = resumeIfError(x);\n          if (!is(result)) {\n            throw new Error('Single.onErrorResumeNext: returned an non-Single.');\n          }\n        } catch (e) {\n          onError(new Error([x, e]));\n          controller.cancel();\n          return;\n        }\n      } else {\n        result = resumeIfError;\n      }\n\n      result.subscribeWith({\n        onSubscribe(ac) {\n          controller.link(ac);\n        },\n        onSuccess,\n        onError,\n      });\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, resumeIfError) => {\n  if (!(isFunction(resumeIfError) || is(resumeIfError))) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.resumeIfError = resumeIfError;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/onErrorResumeNext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/onErrorResumeNext.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorResumeNext.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/onErrorResumeNext.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "onErrorResumeNext",
    "memberof": "src/internal/operators/onErrorResumeNext.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorResumeNext.js~onErrorResumeNext",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/onErrorResumeNext.js",
    "importStyle": "onErrorResumeNext",
    "description": "",
    "lineNumber": 53,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "resumeIfError",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/internal/operators/onErrorReturn.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isFunction, isNull } from '../utils';\n\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { source, item } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onSuccess,\n    onError(x) {\n      let result;\n\n      try {\n        result = item(x);\n\n        if (isNull(result)) {\n          throw new Error(new Error('Single.onErrorReturn: returned a null value.'));\n        }\n      } catch (e) {\n        onError([x, e]);\n        return;\n      }\n      onSuccess(result);\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, item) => {\n  if (!isFunction(item)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.item = item;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/onErrorReturn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/onErrorReturn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorReturn.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/onErrorReturn.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "onErrorReturn",
    "memberof": "src/internal/operators/onErrorReturn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorReturn.js~onErrorReturn",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/onErrorReturn.js",
    "importStyle": "onErrorReturn",
    "description": "",
    "lineNumber": 32,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/internal/operators/onErrorReturnItem.js",
    "content": "import Single from '../../single';\nimport { cleanObserver, isNull } from '../utils';\n\nfunction subscribeActual(observer) {\n  const { onSuccess, onSubscribe } = cleanObserver(observer);\n\n  const { source, item } = this;\n\n  source.subscribeWith({\n    onSubscribe,\n    onSuccess,\n    onError() {\n      onSuccess(item);\n    },\n  });\n}\n/**\n * @ignore\n */\nexport default (source, item) => {\n  if (isNull(item)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.item = item;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/onErrorReturnItem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/onErrorReturnItem.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorReturnItem.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/onErrorReturnItem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "onErrorReturnItem",
    "memberof": "src/internal/operators/onErrorReturnItem.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/onErrorReturnItem.js~onErrorReturnItem",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/onErrorReturnItem.js",
    "importStyle": "onErrorReturnItem",
    "description": "",
    "lineNumber": 20,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/internal/operators/retry.js",
    "content": "\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { cleanObserver, isFunction } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSubscribe, onSuccess, onError } = cleanObserver(observer);\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  const { source, bipredicate } = this;\n\n  let retries = 0;\n\n  const sub = () => {\n    retries += 1;\n    controller.unlink();\n    source.subscribeWith({\n      onSubscribe(ac) {\n        controller.link(ac);\n      },\n      onSuccess,\n      onError(x) {\n        if (isFunction(bipredicate)) {\n          const result = bipredicate(retries, x);\n\n          if (result) {\n            sub();\n          } else {\n            onError(x);\n            controller.cancel();\n          }\n        } else {\n          sub();\n        }\n      },\n    });\n  };\n\n  sub();\n}\n\n/**\n * @ignore\n */\nexport default (source, bipredicate) => {\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.bipredicate = bipredicate;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/retry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/retry.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/retry.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "retry",
    "memberof": "src/internal/operators/retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/retry.js~retry",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/retry.js",
    "importStyle": "retry",
    "description": "",
    "lineNumber": 51,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "bipredicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/internal/operators/subscribeOn.js",
    "content": "\nimport Scheduler from 'rx-scheduler';\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { cleanObserver, isOf } from '../utils';\n\nfunction subscribeActual(observer) {\n  const { onSubscribe, onSuccess, onError } = cleanObserver(observer);\n\n  const { source, scheduler } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  controller.link(scheduler.schedule(() => {\n    controller.unlink();\n    source.subscribeWith({\n      onSubscribe(ac) {\n        controller.link(ac);\n      },\n      onSuccess,\n      onError,\n    });\n  }));\n}\n/**\n * @ignore\n */\nexport default (source, scheduler) => {\n  let sched = scheduler;\n  if (!isOf(sched, Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.scheduler = sched;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/subscribeOn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/subscribeOn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/subscribeOn.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/subscribeOn.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "subscribeOn",
    "memberof": "src/internal/operators/subscribeOn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/subscribeOn.js~subscribeOn",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/subscribeOn.js",
    "importStyle": "subscribeOn",
    "description": "",
    "lineNumber": 30,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "src/internal/operators/takeUntil.js",
    "content": "\nimport { CompositeCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { cleanObserver } from '../utils';\nimport is from '../is';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSubscribe, onSuccess, onError } = cleanObserver(observer);\n\n  const controller = new CompositeCancellable();\n\n  onSubscribe(controller);\n\n  const { source, other } = this;\n\n  other.subscribeWith({\n    onSubscribe(ac) {\n      controller.add(ac);\n    },\n    onSuccess() {\n      onError(new Error('Single.takeUntil: Source cancelled by other Single.'));\n      controller.cancel();\n    },\n    onError(x) {\n      onError(new Error(['Single.takeUntil: Source cancelled by other Single.', x]));\n      controller.cancel();\n    },\n  });\n\n  source.subscribeWith({\n    onSubscribe(ac) {\n      controller.add(ac);\n    },\n    onSuccess(x) {\n      onSuccess(x);\n      controller.cancel();\n    },\n    onError(x) {\n      onError(x);\n      controller.cancel();\n    },\n  });\n}\n\n/**\n * @ignore\n */\nconst takeUntil = (source, other) => {\n  if (!is(other)) {\n    return source;\n  }\n\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.other = other;\n  return single;\n};\n\nexport default takeUntil;\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/takeUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/takeUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/takeUntil.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/takeUntil.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "takeUntil",
    "memberof": "src/internal/operators/takeUntil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/takeUntil.js~takeUntil",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/takeUntil.js",
    "importStyle": "takeUntil",
    "description": "",
    "lineNumber": 51,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/internal/operators/timeout.js",
    "content": "import Scheduler from 'rx-scheduler';\nimport { LinkedCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport { cleanObserver, isNumber, isOf } from '../utils';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const { amount, scheduler } = this;\n\n  const controller = new LinkedCancellable();\n\n  onSubscribe(controller);\n\n  const timeout = scheduler.delay(\n    () => {\n      onError(new Error('Single.timeout: TimeoutException (no success signals within the specified timeout).'));\n      controller.cancel();\n    },\n    amount,\n  );\n\n  controller.addEventListener('cancel', () => timeout.cancel());\n\n  this.source.subscribeWith({\n    onSubscribe(ac) {\n      controller.link(ac);\n    },\n    onSuccess,\n    onError,\n  });\n}\n/**\n * @ignore\n */\nexport default (source, amount, scheduler) => {\n  if (!isNumber(amount)) {\n    return source;\n  }\n  let sched = scheduler;\n  if (!isOf(sched, Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const single = new Single(subscribeActual);\n  single.source = source;\n  single.amount = amount;\n  single.scheduler = sched;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/timeout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/timeout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timeout.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/timeout.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "timeout",
    "memberof": "src/internal/operators/timeout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timeout.js~timeout",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/timeout.js",
    "importStyle": "timeout",
    "description": "",
    "lineNumber": 39,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/internal/operators/timer.js",
    "content": "import Scheduler from 'rx-scheduler';\nimport Single from '../../single';\nimport { cleanObserver, isNumber, isOf } from '../utils';\nimport error from './error';\n\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onSubscribe } = cleanObserver(observer);\n  onSubscribe(this.scheduler.delay(() => onSuccess(0), this.amount));\n}\n/**\n * @ignore\n */\nexport default (amount, scheduler) => {\n  if (!isNumber(amount)) {\n    return error(new Error('Single.timer: \"amount\" is not a number.'));\n  }\n\n  let sched = scheduler;\n  if (!isOf(sched, Scheduler.interface)) {\n    sched = Scheduler.current;\n  }\n  const single = new Single(subscribeActual);\n  single.amount = amount;\n  single.scheduler = sched;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/timer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timer.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/timer.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "timer",
    "memberof": "src/internal/operators/timer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/timer.js~timer",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/timer.js",
    "importStyle": "timer",
    "description": "",
    "lineNumber": 16,
    "ignore": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheduler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/internal/operators/zipArray.js",
    "content": "\nimport { CompositeCancellable } from 'rx-cancellable';\nimport Single from '../../single';\nimport {\n  cleanObserver, isFunction, isArray, isNull,\n} from '../utils';\nimport error from './error';\nimport is from '../is';\n\nconst defaultZipper = x => x;\n/**\n * @ignore\n */\nfunction subscribeActual(observer) {\n  const { onSuccess, onError, onSubscribe } = cleanObserver(observer);\n\n  const result = [];\n\n  const controller = new CompositeCancellable();\n\n  onSubscribe(controller);\n\n  const { sources, zipper } = this;\n\n  const size = sources.length;\n\n  if (size === 0) {\n    onError(new Error('Single.zipArray: source array is empty'));\n    controller.cancel();\n    return;\n  }\n\n  let pending = size;\n\n  for (let i = 0; i < size; i += 1) {\n    if (controller.cancelled) {\n      return;\n    }\n    const single = sources[i];\n\n    if (is(single)) {\n      single.subscribeWith({\n        onSubscribe(ac) {\n          controller.add(ac);\n        },\n        // eslint-disable-next-line no-loop-func\n        onSuccess(x) {\n          result[i] = x;\n          pending -= 1;\n          if (pending === 0) {\n            let r;\n            try {\n              r = zipper(result);\n              if (isNull(r)) {\n                throw new Error('Single.zipArray: zipper function returned a null value.');\n              }\n            } catch (e) {\n              onError(e);\n              controller.cancel();\n              return;\n            }\n            onSuccess(r);\n            controller.cancel();\n          }\n        },\n        onError(x) {\n          onError(x);\n          controller.cancel();\n        },\n      });\n    } else {\n      onError(new Error('Single.zipArray: One of the sources is non-Single.'));\n      controller.cancel();\n      return;\n    }\n  }\n}\n/**\n * @ignore\n */\nexport default (sources, zipper) => {\n  if (!isArray(sources)) {\n    return error(new Error('Single.zipArray: sources is a non-Array.'));\n  }\n  let fn = zipper;\n  if (!isFunction(zipper)) {\n    fn = defaultZipper;\n  }\n  const single = new Single(subscribeActual);\n  single.sources = sources;\n  single.zipper = fn;\n  return single;\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/zipArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "defaultZipper",
    "memberof": "src/internal/operators/zipArray.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/zipArray.js~defaultZipper",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/zipArray.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "subscribeActual",
    "memberof": "src/internal/operators/zipArray.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/zipArray.js~subscribeActual",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/operators/zipArray.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "zipArray",
    "memberof": "src/internal/operators/zipArray.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/zipArray.js~zipArray",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/zipArray.js",
    "importStyle": "zipArray",
    "description": "",
    "lineNumber": 81,
    "ignore": true,
    "params": [
      {
        "name": "sources",
        "types": [
          "*"
        ]
      },
      {
        "name": "zipper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/internal/operators/zipWith.js",
    "content": "import is from '../is';\nimport zipArray from './zipArray';\n/**\n * @ignore\n */\nexport default (source, other, zipper) => {\n  if (!is(other)) {\n    return source;\n  }\n  return zipArray([source, other], zipper);\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators/zipWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "zipWith",
    "memberof": "src/internal/operators/zipWith.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/operators/zipWith.js~zipWith",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/operators/zipWith.js",
    "importStyle": "zipWith",
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "other",
        "types": [
          "*"
        ]
      },
      {
        "name": "zipper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/internal/operators.js",
    "content": "/* eslint-disable import/no-cycle */\n/**\n * @ignore\n */\nexport { default as amb } from './operators/amb';\nexport { default as ambArray } from './operators/ambArray';\nexport { default as ambWith } from './operators/ambWith';\nexport { default as cache } from './operators/cache';\nexport { default as create } from './operators/create';\nexport { default as compose } from './operators/compose';\nexport { default as contains } from './operators/contains';\nexport { default as defer } from './operators/defer';\nexport { default as delay } from './operators/delay';\nexport { default as delaySubscription } from './operators/delaySubscription';\nexport { default as delayUntil } from './operators/delayUntil';\nexport { default as doAfterSuccess } from './operators/doAfterSuccess';\nexport { default as doAfterTerminate } from './operators/doAfterTerminate';\nexport { default as doFinally } from './operators/doFinally';\nexport { default as doOnCancel } from './operators/doOnCancel';\nexport { default as doOnError } from './operators/doOnError';\nexport { default as doOnEvent } from './operators/doOnEvent';\nexport { default as doOnSuccess } from './operators/doOnSuccess';\nexport { default as doOnSubscribe } from './operators/doOnSubscribe';\nexport { default as doOnTerminate } from './operators/doOnTerminate';\nexport { default as error } from './operators/error';\nexport { default as flatMap } from './operators/flatMap';\nexport { default as fromCallable } from './operators/fromCallable';\nexport { default as fromPromise } from './operators/fromPromise';\nexport { default as fromResolvable } from './operators/fromResolvable';\nexport { default as just } from './operators/just';\nexport { default as lift } from './operators/lift';\nexport { default as map } from './operators/map';\nexport { default as merge } from './operators/merge';\nexport { default as observeOn } from './operators/observeOn';\nexport { default as onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { default as onErrorReturn } from './operators/onErrorReturn';\nexport { default as onErrorReturnItem } from './operators/onErrorReturnItem';\nexport { default as never } from './operators/never';\nexport { default as retry } from './operators/retry';\nexport { default as subscribeOn } from './operators/subscribeOn';\nexport { default as takeUntil } from './operators/takeUntil';\nexport { default as timer } from './operators/timer';\nexport { default as timeout } from './operators/timeout';\nexport { default as zipArray } from './operators/zipArray';\nexport { default as zipWith } from './operators/zipWith';\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/operators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/internal/utils.js",
    "content": "import { BooleanCancellable } from 'rx-cancellable';\n/**\n * @ignore\n */\n// eslint-disable-next-line valid-typeof\nconst isType = (x, y) => typeof x === y;\n/**\n * @ignore\n */\nexport const isFunction = x => isType(x, 'function');\n/**\n * @ignore\n */\nexport const isNumber = x => isType(x, 'number');\n/**\n * @ignore\n */\nexport const isObject = x => isType(x, 'object');\n/**\n * @ignore\n */\nexport const isNull = x => x == null;\n/**\n * @ignore\n */\nexport const exists = x => x != null;\n/**\n * @ignore\n */\nexport const isOf = (x, y) => x instanceof y;\n/**\n * @ignore\n */\nexport const isArray = x => isOf(x, Array);\n/**\n * @ignore\n */\nexport const isIterable = obj => isObject(obj) && isFunction(obj[Symbol.iterator]);\n/**\n * @ignore\n */\nexport const isObserver = obj => isObject(obj) && isFunction(obj.onSubscribe);\n/**\n * @ignore\n */\nexport const toCallable = x => () => x;\n/**\n * @ignore\n */\nexport const isPromise = (obj) => {\n  if (isNull(obj)) return false;\n  if (isOf(obj, Promise)) return true;\n  return (isObject(obj) || isFunction(obj)) && isFunction(obj.then);\n};\n/**\n * @ignore\n */\nconst identity = x => x;\n/**\n * @ignore\n */\nconst throwError = (x) => { throw x; };\n/**\n * @ignore\n */\nexport const cleanObserver = x => ({\n  onSubscribe: x.onSubscribe,\n  onSuccess: isFunction(x.onSuccess) ? x.onSuccess : identity,\n  onError: isFunction(x.onError) ? x.onError : throwError,\n});\n/**\n * @ignore\n */\nexport const immediateSuccess = (o, x) => {\n  const { onSubscribe, onSuccess } = cleanObserver(o);\n  const controller = new BooleanCancellable();\n  onSubscribe(controller);\n\n  if (!controller.cancelled) {\n    onSuccess(x);\n    controller.cancel();\n  }\n};\n/**\n * @ignore\n */\nexport const immediateError = (o, x) => {\n  const { onSubscribe, onError } = cleanObserver(o);\n  const controller = new BooleanCancellable();\n  onSubscribe(controller);\n\n  if (!controller.cancelled) {\n    onError(x);\n    controller.cancel();\n  }\n};\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/internal/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "isType",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isType",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{isFunction}",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "isNumber",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isNumber",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{isNumber}",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{isObject}",
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "isNull",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isNull",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{isNull}",
    "description": "",
    "lineNumber": 22,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "exists",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~exists",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{exists}",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "isOf",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isOf",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{isOf}",
    "description": "",
    "lineNumber": 30,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "isArray",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isArray",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{isArray}",
    "description": "",
    "lineNumber": 34,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "isIterable",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isIterable",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{isIterable}",
    "description": "",
    "lineNumber": 38,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "isObserver",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isObserver",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{isObserver}",
    "description": "",
    "lineNumber": 42,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "toCallable",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~toCallable",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{toCallable}",
    "description": "",
    "lineNumber": 46,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "isPromise",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~isPromise",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{isPromise}",
    "description": "",
    "lineNumber": 50,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "identity",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~identity",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 58,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "throwError",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~throwError",
    "access": "public",
    "export": false,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 62,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "cleanObserver",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~cleanObserver",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{cleanObserver}",
    "description": "",
    "lineNumber": 66,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "immediateSuccess",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~immediateSuccess",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{immediateSuccess}",
    "description": "",
    "lineNumber": 74,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "immediateError",
    "memberof": "src/internal/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/internal/utils.js~immediateError",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/internal/utils.js",
    "importStyle": "{immediateError}",
    "description": "",
    "lineNumber": 87,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/observer.js",
    "content": "/**\n * Provides a mechanism for receiving push-based notification\n * of a single value or an error.\n *\n * When a SingleObserver is subscribed to a Single through\n * the Single.subscribe(SingleObserver) method, the Single\n * calls onSubscribe(Cancellable) with a Cancellable that\n * allows cancelling the sequence at any time. A well-behaved\n * Single will call a SingleObserver's onSuccess(Object) method\n * exactly once or the SingleObserver's onError(Error) method\n * exactly once as they are considered mutually exclusive\n * terminal signals.\n *\n * the invocation pattern must adhere to the following protocol:\n *\n * <code>onSubscribe (onSuccess | onError)?</code>\n *\n * Subscribing a SingleObserver to multiple Singles is not recommended.\n * If such reuse happens, it is the duty of the SingleObserver\n * implementation to be ready to receive multiple calls to its methods\n * and ensure proper concurrent behavior of its business logic.\n *\n * Calling onSubscribe(Cancellable), onSuccess(Object) or onError(Error)\n * with a null argument is forbidden.\n * @interface\n */\n// eslint-disable-next-line no-unused-vars\nexport default class SingleObserver {\n  /**\n   * Receives the Cancellable subscription.\n   * @param {!Cancellable} d\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onSubscribe(d) {}\n\n  /**\n   * Receives a success value.\n   * @param {!any} value\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onSuccess(value) {}\n\n  /**\n   * Receives an error value.\n   * @param {!Error} err\n   * @abstract\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  onError(err) {}\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/observer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "class",
    "name": "SingleObserver",
    "memberof": "src/observer.js",
    "static": true,
    "longname": "src/observer.js~SingleObserver",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/observer.js",
    "importStyle": "SingleObserver",
    "description": "Provides a mechanism for receiving push-based notification\nof a single value or an error.\n\nWhen a SingleObserver is subscribed to a Single through\nthe Single.subscribe(SingleObserver) method, the Single\ncalls onSubscribe(Cancellable) with a Cancellable that\nallows cancelling the sequence at any time. A well-behaved\nSingle will call a SingleObserver's onSuccess(Object) method\nexactly once or the SingleObserver's onError(Error) method\nexactly once as they are considered mutually exclusive\nterminal signals.\n\nthe invocation pattern must adhere to the following protocol:\n\n<code>onSubscribe (onSuccess | onError)?</code>\n\nSubscribing a SingleObserver to multiple Singles is not recommended.\nIf such reuse happens, it is the duty of the SingleObserver\nimplementation to be ready to receive multiple calls to its methods\nand ensure proper concurrent behavior of its business logic.\n\nCalling onSubscribe(Cancellable), onSuccess(Object) or onError(Error)\nwith a null argument is forbidden.",
    "lineNumber": 28,
    "interface": true
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "onSubscribe",
    "memberof": "src/observer.js~SingleObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/observer.js~SingleObserver#onSubscribe",
    "access": "public",
    "description": "Receives the Cancellable subscription.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": false,
        "types": [
          "Cancellable"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "onSuccess",
    "memberof": "src/observer.js~SingleObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/observer.js~SingleObserver#onSuccess",
    "access": "public",
    "description": "Receives a success value.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "onError",
    "memberof": "src/observer.js~SingleObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/observer.js~SingleObserver#onError",
    "access": "public",
    "description": "Receives an error value.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": false,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "src/single.js",
    "content": "/**\n * @license\n * MIT License\n *\n * Copyright (c) 2019 Alexis Munsayac\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n * @author Alexis Munsayac <alexis.munsayac@gmail.com>\n * @copyright Alexis Munsayac 2019\n */\n/**\n * @external {Scheduler} https://lxsmnsyc.github.io/rx-scheduler/\n */\n/**\n * @external {Iterable} https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n */\n/**\n * @external {Thennable} https://promisesaplus.com/\n */\n/**\n * @external {PromiseLike} https://promisesaplus.com/\n */\n/**\n * @external {Cancellable} https://lxsmnsyc.github.io/rx-cancellable/\n */\nimport { LinkedCancellable } from 'rx-cancellable';\nimport {\n  create, contains, just, error, defer, delay,\n  never, map, fromPromise, fromResolvable, fromCallable,\n  timer, doAfterSuccess, doAfterTerminate, doFinally,\n  doOnCancel, doOnError, doOnSuccess, doOnEvent,\n  onErrorResumeNext, onErrorReturnItem, onErrorReturn,\n  timeout, zipWith, doOnSubscribe, ambWith, amb,\n  doOnTerminate, cache, delaySubscription, delayUntil,\n  merge, flatMap, retry, compose, lift, takeUntil, observeOn, subscribeOn, ambArray, zipArray,\n} from './internal/operators';\nimport { isObserver } from './internal/utils';\n\n/**\n * The Single class implements the Reactive Pattern\n * for a single value response.\n *\n * Single behaves similarly to Observable except that\n * it can only emit either a single successful value\n * or an error (there is no \"onComplete\" notification\n * as there is for an Observable).\n *\n * The Single class default consumer type it interacts\n * with is the SingleObserver via the subscribeWith(SingleObserver)\n * or the subscribe(onSuccess, onError) method.\n *\n * The Single operates with the following sequential protocol:\n * <code>onSubscribe (onSuccess | onError)?</code>\n *\n * Note that onSuccess and onError are mutually exclusive\n * events; unlike Observable, onSuccess is never followed\n * by onError.\n *\n * Like Observable, a running Single can be stopped through\n * the Cancellable instance provided to consumers through\n * SingleObserver.onSubscribe(Cancellable).\n *\n * Singles are cold by default, but using a toPromise method,\n * you can achieve a hot-like Single.\n *\n * The documentation for this class makes use of marble diagrams.\n * The following legend explains these diagrams:\n *\n * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.legend.png\" class=\"diagram\">\n */\nexport default class Single {\n  /**\n   * @ignore\n   */\n  constructor(subscribeActual) {\n    this.subscribeActual = subscribeActual;\n  }\n\n  /**\n   * Provides an API (via a cold Single) that bridges\n   * the reactive world with the callback-style world.\n   *\n   * This subscriber is a function that receives\n   * an object that implements the Emitter interface.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.create.png\" class=\"diagram\">\n   *\n   * @example\n   * const single = Single.create(e => e.onSuccess('Hello World'));\n   * @param {!function(e: Emitter):any} subscriber\n   * A function that accepts the Emitter interface.\n   * @returns {Single}\n   */\n  static create(subscriber) {\n    return create(subscriber);\n  }\n\n  /**\n   * Runs multiple Singles and signals the events of\n   * the first one that signals (cancelling the rest).\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.amb.png\" class=\"diagram\">\n   *\n   * @param {!Iterable} sources\n   * the Iterable sequence of sources. A subscription\n   * to each source will occur in the same order as in\n   * this Iterable.\n   * @returns {Single}\n   */\n  static amb(sources) {\n    return amb(sources);\n  }\n\n  /**\n   * Runs multiple Singles and signals the events of\n   * the first one that signals (cancelling the rest).\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.ambArray.png\" class=\"diagram\">\n   *\n   * @param {!Array} sources\n   * the array of sources. A subscription to each source\n   * will occur in the same order as in this array.\n   * @returns {Single}\n   */\n  static ambArray(sources) {\n    return ambArray(sources);\n  }\n\n  /**\n   * Signals the event of this or the other Single whichever\n   * signals first.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.ambWith.png\" class=\"diagram\">\n   *\n   * @param {!Single} other\n   * the other Single to race for the first emission\n   * of success or error.\n   * @returns {Single}\n   * A subscription to this provided source will occur\n   * after subscribing to the current source.\n   */\n  ambWith(other) {\n    return ambWith(this, other);\n  }\n\n  /**\n   * Stores the success value or exception from the\n   * current Single and replays it to late Observers.\n   *\n   * The returned Single subscribes to the current Single\n   * when the first SingleObserver subscribes.\n   *\n   * @returns {Single}\n   */\n  cache() {\n    return cache(this);\n  }\n\n  /**\n   * Transform a Single by applying a particular Transformer\n   * function to it.\n   *\n   * This method operates on the Single itself whereas #lift\n   * operates on the Single's Observers.\n   *\n   * If the operator you are creating is designed to act on\n   * the individual item emitted by a Single, use lift.\n   *\n   * If your operator is designed to transform the source Single\n   * as a whole (for instance, by applying a particular set of\n   * existing operators to it) use compose.\n   *\n   * @param {!function(source: Single):Single} transformer\n   * @returns {Single}\n   * the source Single, transformed by the transformer function\n   */\n  compose(transformer) {\n    return compose(this, transformer);\n  }\n\n  /**\n   * Signals true if the current Single signals a success\n   * value that is equal or if the comparer returns true\n   * with the value provided.\n   *\n   * @param {!any} value\n   * the value to compare against the success value of this Single.\n   * @param {?function(x: any, successValue: any):any} comparer\n   * the function that receives the success value of\n   * this Single, the value provided and should return\n   * true if they are considered equal.\n   * @returns {Single}\n   */\n  contains(value, comparer) {\n    return contains(this, value, comparer);\n  }\n\n  /**\n   * Calls a function for each individual SingleObserver\n   * to return the actual Single to be subscribed to.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.defer.png\" class=\"diagram\">\n   *\n   * @param {!function():any} callable\n   * the Callable that is called for each individual\n   * SingleObserver and returns a Single instance to subscribe to.\n   * @returns {Single}\n   */\n  static defer(callable) {\n    return defer(callable);\n  }\n\n  /**\n   * Delays the emission of the success signal from\n   * the current Single by the specified amount.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.delay.e.png\" class=\"diagram\">\n   *\n   * @param {!Number} amount\n   * the amount of time the success signal should be\n   * delayed for (in milliseconds).\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   * @param {?Boolean} doDelayError\n   * if true, both success and error signals are delayed.\n   * if false, only success signals are delayed.\n   * @returns {Single}\n   */\n  delay(amount, scheduler, doDelayError) {\n    return delay(this, amount, scheduler, doDelayError);\n  }\n\n  /**\n   * Delays the actual subscription to the current\n   * Single until the given time delay elapsed.\n   *\n   * @param {!Number} amount\n   * the time amount to wait with the subscription\n   * (in milliseconds).\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   * @returns {Single}\n   */\n  delaySubscription(amount, scheduler) {\n    return delaySubscription(this, amount, scheduler);\n  }\n\n  /**\n   * Delays the actual subscription to the current Single\n   * until the given other Single signals success.\n   *\n   * If the delaying source signals an error, that error is\n   * re-emitted and no subscription to the current Single\n   * happens.\n   *\n   * @param {!Single} other\n   * the Single that has to complete before the subscription\n   * to the current Single happens.\n   * @returns {Single}\n   */\n  delayUntil(other) {\n    return delayUntil(this, other);\n  }\n\n  /**\n   * Calls the specified callable with the success\n   * item after this item has been emitted to the\n   * downstream.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doAfterSuccess.png\" class=\"diagram\">\n   *\n   * @param {!function(x: any)} callable\n   * the function that will be called after emitting\n   * an item from upstream to the downstream\n   * @returns {Single}\n   */\n  doAfterSuccess(callable) {\n    return doAfterSuccess(this, callable);\n  }\n\n  /**\n   * Registers a function to be called after this\n   * Single invokes either onSuccess or onError.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doAfterTerminate.png\" class=\"diagram\">\n   *\n   * @param {!function} callable\n   * a function to be invoked when the source Single finishes.\n   * @returns {Single}\n   * a Single that emits the same items as the source\n   * Single, then invokes the function.\n   */\n  doAfterTerminate(callable) {\n    return doAfterTerminate(this, callable);\n  }\n\n  /**\n   * Calls the specified action after this Single signals\n   * onSuccess or onError or gets cancelled by the downstream.\n   *\n   * In case of a race between a terminal event and a cancel\n   * call, the provided onFinally action is executed once per\n   * subscription.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doFinally.png\" class=\"diagram\">\n   *\n   * @param {!Function} callable\n   * the action function when this Single terminates or gets cancelled\n   * @returns {Single}\n   */\n  doFinally(callable) {\n    return doFinally(this, callable);\n  }\n\n  /**\n   * Calls the shared function if a SingleObserver\n   * subscribed to the current Single cancels\n   * the common Cancellable it received via\n   * onSubscribe.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doOnDispose.png\" class=\"diagram\">\n   *\n   * @param {!Function} callable\n   * the function called when the subscription is cancelled\n   * @returns {Single}\n   */\n  doOnCancel(callable) {\n    return doOnCancel(this, callable);\n  }\n\n  /**\n   * Calls the shared function with the error\n   * sent via onError for each SingleObserver that\n   * subscribes to the current Single.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doOnError.2.png\" class=\"diagram\">\n   *\n   * @param {!function(x: any)} callable\n   * the function called with the success value of onError\n   * @returns {Single}\n   */\n  doOnError(callable) {\n    return doOnError(this, callable);\n  }\n\n  /**\n   * Calls the shared consumer with the error\n   * sent via onError or the value via onSuccess\n   * for each SingleObserver that subscribes\n   * to the current Single.\n   *\n   * @param {!function(onSuccess: any, onError: any)} callable\n   * the function called with the success value of onEvent\n   * @returns {Single}\n   */\n  doOnEvent(callable) {\n    return doOnEvent(this, callable);\n  }\n\n  /**\n   * Calls the shared function with the Cancellable\n   * sent through the onSubscribe for each SingleObserver\n   * that subscribes to the current Single.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doOnSubscribe.png\" class=\"diagram\">\n   *\n   * @param {!function(x: Cancellable)} callable\n   * the function called with the Cancellable sent via onSubscribe\n   * @returns {Single}\n   */\n  doOnSubscribe(callable) {\n    return doOnSubscribe(this, callable);\n  }\n\n  /**\n   * Calls the shared function with the error sent\n   * via onSuccess for each SingleObserver that subscribes\n   * to the current Single.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doOnSuccess.2.png\" class=\"diagram\">\n   *\n   * @param {!function(x: any)} callable\n   * the function called with the success value of onSuccess\n   * @returns {Single}\n   */\n  doOnSuccess(callable) {\n    return doOnSuccess(this, callable);\n  }\n\n  /**\n   * Returns a Single instance that calls the given\n   * onTerminate callback just before this Single\n   * completes normally or with an exception.\n   *\n   * This differs from doAfterTerminate in that this happens\n   * before the onComplete or onError notification.\n   *\n   * @param {!Function} callable\n   * the action to invoke when the consumer calls\n   * onComplete or onError\n   * @returns {Single}\n   */\n  doOnTerminate(callable) {\n    return doOnTerminate(this, callable);\n  }\n\n  /**\n   * Creates a Single with an error.\n   *\n   * Signals an error returned by the callback function\n   * for each individual SingleObserver or returns a Single\n   * that invokes a subscriber's onError method when\n   * the subscriber subscribes to it.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.error.png\" class=\"diagram\">\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.error.c.png\" class=\"diagram\">\n   *\n   * @param {!(function():Error|Error)} err\n   * - the callable that is called for each individual\n   * SingleObserver and returns or throws a value to be emitted.\n   * - the particular value to pass to onError\n   * @returns {Single}\n   * a Single that invokes the subscriber's onError method\n   * when the subscriber subscribes to it\n   */\n  static error(err) {\n    return error(err);\n  }\n\n  /**\n   * Returns a Single that is based on applying a specified\n   * function to the item emitted by the source Single, where\n   * that function returns a Single.\n   *\n   * @param {!function(x: any):Single} mapper\n   * a function that, when applied to the item emitted by the\n   * source Single, returns a Single\n   * @returns {Single}\n   * the Single returned from mapper when applied to the item\n   * emitted by the source Single\n   */\n  flatMap(mapper) {\n    return flatMap(this, mapper);\n  }\n\n  /**\n   * Returns a Single that invokes passed function and\n   * emits its result for each new SingleObserver that\n   * subscribes.\n   *\n   * Allows you to defer execution of passed function\n   * until SingleObserver subscribes to the Single. It makes\n   * passed function \"lazy\".\n   *\n   * Result of the function invocation will be emitted\n   * by the Single.\n   *\n   * If the result is a Promise-like instance, the\n   * SingleObserver is then subscribed to the Promise through\n   * the fromPromise operator.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.fromCallable.png\" class=\"diagram\">\n   *\n   * @param {!function():any} callable\n   * function which execution should be deferred, it will\n   * be invoked when SingleObserver will subscribe to\n   * the Single.\n   * @returns {Single}\n   * a Single whose SingleObserver' subscriptions trigger\n   * an invocation of the given function.\n   */\n  static fromCallable(callable) {\n    return fromCallable(callable);\n  }\n\n  /**\n   * Converts a Promise-like instance into a Single.\n   *\n   * @param {!(Promise|Thennable|PromiseLike)} promise\n   * The promise to be converted into a Single.\n   * @returns {Single}\n   */\n  static fromPromise(promise) {\n    return fromPromise(promise);\n  }\n\n  /**\n   * Provides a Promise-like interface for emitting signals.\n   *\n   * @param {!function(resolve: function, reject:function))} fulfillable\n   * A function that accepts two parameters: resolve and reject,\n   * similar to a Promise construct.\n   * @returns {Single}\n   */\n  static fromResolvable(fulfillable) {\n    return fromResolvable(fulfillable);\n  }\n\n  /**\n   * Returns a Single that emits a specified item.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.just.png\" class=\"diagram\">\n   *\n   * @param {!any} value\n   * the item to emit\n   * @returns {Single}\n   * a Single that emits item\n   */\n  static just(value) {\n    return just(value);\n  }\n\n  /**\n   * This method requires advanced knowledge about building\n   * operators, please consider other standard composition\n   * methods first; Returns a Single which, when subscribed\n   * to, invokes the operator function for each individual\n   * downstream Single and allows the insertion of a custom\n   * operator by accessing the downstream's SingleObserver during\n   * this subscription phase and providing a new SingleObserver,\n   * containing the custom operator's intended business logic,\n   * that will be used in the subscription process going\n   * further upstream.\n   *\n   * Generally, such a new SingleObserver will wrap the downstream's\n   * SingleObserver and forwards the onSuccess and onError events\n   * from the upstream directly or according to the emission\n   * pattern the custom operator's business logic requires.\n   * In addition, such operator can intercept the flow control\n   * calls of cancel and signal.cancelled that would have traveled\n   * upstream and perform additional actions depending on the\n   * same business logic requirements.\n   *\n   * Note that implementing custom operators via this lift()\n   * method adds slightly more overhead by requiring an additional\n   * allocation and indirection per assembled flows. Instead,\n   * using compose() method and  creating a transformer function\n   * with it is recommended.\n   *\n   * @param {!function(observer: SingleObserver):SingleObserver} operator\n   * the function that receives the downstream's SingleObserver\n   * and should return a SingleObserver with custom behavior\n   * to be used as the consumer for the current Single.\n   * @returns {Single}\n   */\n  lift(operator) {\n    return lift(this, operator);\n  }\n\n  /**\n   * Returns a Single that applies a specified function\n   * to the item emitted by the source Single and emits\n   * the result of this function application.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.map.png\" class=\"diagram\">\n   *\n   * @param {?function(x: any):any} mapper\n   * a function to apply to the item emitted by the Single\n   * @returns {Single}\n   * a Single that emits the item from the source Single,\n   * transformed by the specified function\n   */\n  map(mapper) {\n    return map(this, mapper);\n  }\n\n  /**\n   * Flattens a Single that emits a Single into a single Single\n   * that emits the item emitted by the nested Single, without\n   * any transformation.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.merge.oo.png\" class=\"diagram\">\n   *\n   * @param {!Single} source\n   * a Single that emits a Single\n   * @returns {Single}\n   * a Single that emits the item that is the result of flattening\n   * the Single emitted by source.\n   */\n  static merge(source) {\n    return merge(source);\n  }\n\n  /**\n   * Returns a singleton instance of a never-signalling\n   * Single (only calls onSubscribe).\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.never.png\" class=\"diagram\">\n   *\n   * @returns {Single}\n   */\n  static never() {\n    return never();\n  }\n\n  /**\n   * Modifies a Single to emit its item (or notify of its error)\n   * on a specified Scheduler, asynchronously.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.observeOn.png\" class=\"diagram\">\n   *\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   * @return {Single}\n   * the source Single modified so that its subscribers are\n   * notified on the specified Scheduler\n   */\n  observeOn(scheduler) {\n    return observeOn(this, scheduler);\n  }\n\n  /**\n   * Instructs a Single to pass control to another\n   * Single rather than invoking SingleObserver.onError\n   * if it encounters an error.\n   *\n   * By default, when a Single encounters an error\n   * that prevents it from emitting the expected item\n   * to its SingleObserver, the Single invokes its SingleObserver's\n   * onError method, and then quits without invoking any\n   * more of its SingleObserver's methods.\n   *\n   * The onErrorResumeNext method changes this behavior.\n   * If you pass another Single (resumeIfError) or if you\n   * pass a function that will return another Single\n   * (resumeIfError) to a Single's onErrorResumeNext\n   * method, if the original Single encounters an error,\n   * instead of invoking its SingleObserver's onError method,\n   * it will instead relinquish control to resumeIfError\n   * which will invoke the SingleObserver's onSuccess method\n   * if it is able to do so. In such a case,\n   * because no Single necessarily invokes onError, the\n   * SingleObserver may never know that an error happened.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.onErrorResumeNext.f.png\" class=\"diagram\">\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.onErrorResumeNext.png\" class=\"diagram\">\n   *\n   * @param {!(function(x: any):Single|Single)} resumeIfError\n   * @returns {Single}\n   */\n  onErrorResumeNext(resumeIfError) {\n    return onErrorResumeNext(this, resumeIfError);\n  }\n\n  /**\n   * Instructs a Single to emit an item (returned by\n   * a specified function) rather than invoking\n   * onError if it encounters an error.\n   *\n   * By default, when a Single encounters an error that\n   * prevents it from emitting the expected item to its\n   * subscriber, the Single invokes its subscriber's\n   * SingleObserver.onError method, and then quits without\n   * invoking any more of its subscriber's methods.\n   * The onErrorReturn method changes this behavior.\n   * If you pass a function (resumeFunction) to a Single's\n   * onErrorReturn method, if the original Single encounters\n   * an error, instead of invoking its subscriber's\n   * SingleObserver.onError method, it will instead emit the\n   * return value of resumeIfError.\n   *\n   * You can use this to prevent errors from propagating\n   * or to supply fallback data should errors be encountered.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.onErrorReturn.png\" class=\"diagram\">\n   *\n   * @param {!function(e: any):any} resumeFunction\n   * a function that returns an item that the new Single\n   * will emit if the source Single encounters an error\n   * @returns {Single}\n   */\n  onErrorReturn(resumeFunction) {\n    return onErrorReturn(this, resumeFunction);\n  }\n\n\n  /**\n   * Signals the specified value as success in case\n   * the current Single signals an error.\n   *\n   * @param {!any} item\n   * the value to signal if the current Single fails\n   * @returns {Single}\n   */\n  onErrorReturnItem(item) {\n    return onErrorReturnItem(this, item);\n  }\n\n  /**\n   * Re-subscribe to the current Single if the given predicate\n   * returns true when the Single fails with an onError.\n   *\n   * If no predicate is provided, repeatedly re-subscribes to\n   * the current Single indefinitely if it fails with an onError.\n   *\n   * @param {?function(retries: number, err: Error):boolean} predicate\n   * the predicate called with the resubscription count and the failure\n   * value and should return true if a resubscription should happen.\n   * @returns {Single}\n   */\n  retry(predicate) {\n    return retry(this, predicate);\n  }\n\n  /**\n   * Asynchronously subscribes subscribers to this Single\n   * on the specified Scheduler.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.subscribeOn.png\" class=\"diagram\">\n   *\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   * @returns {Single}\n   * the source Single modified so that its subscriptions happen\n   * on the specified Scheduler\n   */\n  subscribeOn(scheduler) {\n    return subscribeOn(this, scheduler);\n  }\n\n  /**\n   * @desc\n   * Subscribes with an Object that is an SingleObserver.\n   *\n   * An Object is considered as an SingleObserver if:\n   *  - if it has the method onSubscribe\n   *  - if it has the method onSuccess (optional)\n   *  - if it has the method onError (optional)\n   *\n   * The onSubscribe method is called when subscribeWith\n   * or subscribe is executed. This method receives an\n   * Cancellable instance.\n   *\n   * @param {!Object} observer\n   * @returns {undefined}\n   */\n  subscribeWith(observer) {\n    if (isObserver(observer)) {\n      this.subscribeActual.call(this, observer);\n    }\n  }\n\n  /**\n   * @desc\n   * Subscribes to a Single instance with an onSuccess\n   * and an onError method.\n   *\n   * onSuccess receives a non-undefined value.\n   * onError receives a string(or an Error object).\n   *\n   * Both are called once.\n   * @param {?function(x: any)} onSuccess\n   * the function you have designed to accept the emission\n   * from the Single\n   * @param {?function(x: Error)} onError\n   * the function you have designed to accept any error\n   * notification from the Single\n   * @returns {Cancellable}\n   * an Cancellable reference can request the Single to cancel.\n   */\n  subscribe(onSuccess, onError) {\n    const controller = new LinkedCancellable();\n    this.subscribeWith({\n      onSubscribe(ac) {\n        controller.link(ac);\n      },\n      onSuccess,\n      onError,\n    });\n    return controller;\n  }\n\n  /**\n   * Returns a Single that emits the item emitted by\n   * the source Single until a second Single emits an\n   * item. Upon emission of an item from other,\n   * this will emit an error rather than go to\n   * SingleObserver.onSuccess.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/takeUntil.png\" class=\"diagram\">\n   *\n   * @param {Single} other\n   * the Single whose emitted item will cause takeUntil\n   * to emit the item from the source Single\n   * @returns {Single}\n   * a Single that emits the item emitted by the source\n   * Single until such time as other emits its item\n   */\n  takeUntil(other) {\n    return takeUntil(this, other);\n  }\n\n  /**\n   * Signals success with 0 value after the given\n   * delay for each SingleObserver.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.timer.png\" class=\"diagram\">\n   *\n   * @param {!Number} amount\n   * the amount of time in milliseconds.\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   * @returns {Single}\n   */\n  static timer(amount, scheduler) {\n    return timer(amount, scheduler);\n  }\n\n  /**\n   * Signals a TimeoutException if the current Single\n   * doesn't signal a success value within the specified\n   * timeout window.\n   * @param {!Number} amount\n   * amount of time in milliseconds.\n   * @param {?Scheduler} scheduler\n   * the target scheduler to use for the non-blocking wait and emission.\n   * By default, schedules on the current thread.\n   * @returns {Single}\n   */\n  timeout(amount, scheduler) {\n    return timeout(this, amount, scheduler);\n  }\n\n  /**\n   * Waits until all Single sources provided via\n   * an array signal a success value and calls a zipper\n   * function with an array of these values to return\n   * a result to be emitted to downstream.\n   *\n   * If the array of Single is empty an error is\n   * signalled immediately.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.zip.png\" class=\"diagram\">\n   *\n   * @param {!Array} sources\n   * the array of Single instances. An empty sequence\n   * will result in an onError signal.\n   * @param {?Function} zipper\n   * the function that receives an array with values\n   * from each Single and should return a value to be\n   * emitted to downstream\n   * @returns {Single}\n   */\n  static zipArray(sources, zipper) {\n    return zipArray(sources, zipper);\n  }\n\n  /**\n   * Returns a Single that emits the result of applying\n   * a specified function to the pair of items emitted\n   * by the source Single and another specified Single.\n   *\n   * <img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.zip.png\" class=\"diagram\">\n   *\n   * @param {!Single} other\n   * the other Single\n   * @param {?Function} zipper\n   * a function that combines the pairs of items from\n   * the two Singles to generate the items to be emitted\n   * by the resulting Single\n   * @returns {Single}\n   * a Single that pairs up values from the source Single\n   * and the other Single and emits the results of\n   * zipper applied to these pairs\n   */\n  zipWith(other, zipper) {\n    return zipWith(this, other, zipper);\n  }\n\n  /**\n   * Converts the Single to a Promise instance.\n   *\n   * @returns {Promise}\n   */\n  toPromise() {\n    return new Promise((res, rej) => {\n      this.subscribe(res, rej);\n    });\n  }\n\n  /**\n   * Converts the Single to a Promise instance\n   * and attaches callbacks to it.\n   *\n   * @param {!function(x: any):any} onFulfill\n   * @param {?function(x: Error):any} onReject\n   * @returns {Promise}\n   */\n  then(onFulfill, onReject) {\n    return this.toPromise().then(onFulfill, onReject);\n  }\n\n  /**\n   * Converts the Single to a Promise instance\n   * and attaches an onRejection callback to it.\n   *\n   * @param {!function(x: Error):any} onReject\n   * @returns {Promise}\n   */\n  catch(onReject) {\n    return this.toPromise().catch(onReject);\n  }\n}\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/src/single.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "external",
    "name": "Scheduler",
    "externalLink": "https://lxsmnsyc.github.io/rx-scheduler/",
    "memberof": "src/single.js",
    "static": true,
    "longname": "src/single.js~Scheduler",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 210,
    "kind": "external",
    "name": "Iterable",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols",
    "memberof": "src/single.js",
    "static": true,
    "longname": "src/single.js~Iterable",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 211,
    "kind": "external",
    "name": "Thennable",
    "externalLink": "https://promisesaplus.com/",
    "memberof": "src/single.js",
    "static": true,
    "longname": "src/single.js~Thennable",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 212,
    "kind": "external",
    "name": "PromiseLike",
    "externalLink": "https://promisesaplus.com/",
    "memberof": "src/single.js",
    "static": true,
    "longname": "src/single.js~PromiseLike",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 213,
    "kind": "external",
    "name": "Cancellable",
    "externalLink": "https://lxsmnsyc.github.io/rx-cancellable/",
    "memberof": "src/single.js",
    "static": true,
    "longname": "src/single.js~Cancellable",
    "access": "public",
    "description": "",
    "lineNumber": 43
  },
  {
    "__docId__": 214,
    "kind": "class",
    "name": "Single",
    "memberof": "src/single.js",
    "static": true,
    "longname": "src/single.js~Single",
    "access": "public",
    "export": true,
    "importPath": "rx-single/src/single.js",
    "importStyle": "Single",
    "description": "The Single class implements the Reactive Pattern\nfor a single value response.\n\nSingle behaves similarly to Observable except that\nit can only emit either a single successful value\nor an error (there is no \"onComplete\" notification\nas there is for an Observable).\n\nThe Single class default consumer type it interacts\nwith is the SingleObserver via the subscribeWith(SingleObserver)\nor the subscribe(onSuccess, onError) method.\n\nThe Single operates with the following sequential protocol:\n<code>onSubscribe (onSuccess | onError)?</code>\n\nNote that onSuccess and onError are mutually exclusive\nevents; unlike Observable, onSuccess is never followed\nby onError.\n\nLike Observable, a running Single can be stopped through\nthe Cancellable instance provided to consumers through\nSingleObserver.onSubscribe(Cancellable).\n\nSingles are cold by default, but using a toPromise method,\nyou can achieve a hot-like Single.\n\nThe documentation for this class makes use of marble diagrams.\nThe following legend explains these diagrams:\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.legend.png\" class=\"diagram\">",
    "lineNumber": 88,
    "interface": false
  },
  {
    "__docId__": 215,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 92,
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "subscribeActual",
    "memberof": "src/single.js~Single",
    "static": false,
    "longname": "src/single.js~Single#subscribeActual",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "create",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.create",
    "access": "public",
    "description": "Provides an API (via a cold Single) that bridges\nthe reactive world with the callback-style world.\n\nThis subscriber is a function that receives\nan object that implements the Emitter interface.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.create.png\" class=\"diagram\">",
    "examples": [
      "const single = Single.create(e => e.onSuccess('Hello World'));"
    ],
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(e: Emitter):any"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriber",
        "description": "A function that accepts the Emitter interface."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "amb",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.amb",
    "access": "public",
    "description": "Runs multiple Singles and signals the events of\nthe first one that signals (cancelling the rest).\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.amb.png\" class=\"diagram\">",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "the Iterable sequence of sources. A subscription\nto each source will occur in the same order as in\nthis Iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "ambArray",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.ambArray",
    "access": "public",
    "description": "Runs multiple Singles and signals the events of\nthe first one that signals (cancelling the rest).\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.ambArray.png\" class=\"diagram\">",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "the array of sources. A subscription to each source\nwill occur in the same order as in this array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "ambWith",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#ambWith",
    "access": "public",
    "description": "Signals the event of this or the other Single whichever\nsignals first.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.ambWith.png\" class=\"diagram\">",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\nA subscription to this provided source will occur\nafter subscribing to the current source."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Single"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other Single to race for the first emission\nof success or error."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "A subscription to this provided source will occur\nafter subscribing to the current source."
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "cache",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#cache",
    "access": "public",
    "description": "Stores the success value or exception from the\ncurrent Single and replays it to late Observers.\n\nThe returned Single subscribes to the current Single\nwhen the first SingleObserver subscribes.",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "compose",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#compose",
    "access": "public",
    "description": "Transform a Single by applying a particular Transformer\nfunction to it.\n\nThis method operates on the Single itself whereas #lift\noperates on the Single's Observers.\n\nIf the operator you are creating is designed to act on\nthe individual item emitted by a Single, use lift.\n\nIf your operator is designed to transform the source Single\nas a whole (for instance, by applying a particular set of\nexisting operators to it) use compose.",
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\nthe source Single, transformed by the transformer function"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(source: Single):Single"
        ],
        "spread": false,
        "optional": false,
        "name": "transformer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "the source Single, transformed by the transformer function"
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "contains",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#contains",
    "access": "public",
    "description": "Signals true if the current Single signals a success\nvalue that is equal or if the comparer returns true\nwith the value provided.",
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the value to compare against the success value of this Single."
      },
      {
        "nullable": true,
        "types": [
          "function(x: any, successValue: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "comparer",
        "description": "the function that receives the success value of\nthis Single, the value provided and should return\ntrue if they are considered equal."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "defer",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.defer",
    "access": "public",
    "description": "Calls a function for each individual SingleObserver\nto return the actual Single to be subscribed to.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.defer.png\" class=\"diagram\">",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():any"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "the Callable that is called for each individual\nSingleObserver and returns a Single instance to subscribe to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "delay",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#delay",
    "access": "public",
    "description": "Delays the emission of the success signal from\nthe current Single by the specified amount.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.delay.e.png\" class=\"diagram\">",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "the amount of time the success signal should be\ndelayed for (in milliseconds)."
      },
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      },
      {
        "nullable": true,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "doDelayError",
        "description": "if true, both success and error signals are delayed.\nif false, only success signals are delayed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "delaySubscription",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#delaySubscription",
    "access": "public",
    "description": "Delays the actual subscription to the current\nSingle until the given time delay elapsed.",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "the time amount to wait with the subscription\n(in milliseconds)."
      },
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "delayUntil",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#delayUntil",
    "access": "public",
    "description": "Delays the actual subscription to the current Single\nuntil the given other Single signals success.\n\nIf the delaying source signals an error, that error is\nre-emitted and no subscription to the current Single\nhappens.",
    "lineNumber": 280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Single"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the Single that has to complete before the subscription\nto the current Single happens."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "doAfterSuccess",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#doAfterSuccess",
    "access": "public",
    "description": "Calls the specified callable with the success\nitem after this item has been emitted to the\ndownstream.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doAfterSuccess.png\" class=\"diagram\">",
    "lineNumber": 296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "the function that will be called after emitting\nan item from upstream to the downstream"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "doAfterTerminate",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#doAfterTerminate",
    "access": "public",
    "description": "Registers a function to be called after this\nSingle invokes either onSuccess or onError.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doAfterTerminate.png\" class=\"diagram\">",
    "lineNumber": 312,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\na Single that emits the same items as the source\nSingle, then invokes the function."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "a function to be invoked when the source Single finishes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "a Single that emits the same items as the source\nSingle, then invokes the function."
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "doFinally",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#doFinally",
    "access": "public",
    "description": "Calls the specified action after this Single signals\nonSuccess or onError or gets cancelled by the downstream.\n\nIn case of a race between a terminal event and a cancel\ncall, the provided onFinally action is executed once per\nsubscription.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doFinally.png\" class=\"diagram\">",
    "lineNumber": 330,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "the action function when this Single terminates or gets cancelled"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "doOnCancel",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#doOnCancel",
    "access": "public",
    "description": "Calls the shared function if a SingleObserver\nsubscribed to the current Single cancels\nthe common Cancellable it received via\nonSubscribe.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doOnDispose.png\" class=\"diagram\">",
    "lineNumber": 346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "the function called when the subscription is cancelled"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "doOnError",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#doOnError",
    "access": "public",
    "description": "Calls the shared function with the error\nsent via onError for each SingleObserver that\nsubscribes to the current Single.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doOnError.2.png\" class=\"diagram\">",
    "lineNumber": 361,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "the function called with the success value of onError"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "doOnEvent",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#doOnEvent",
    "access": "public",
    "description": "Calls the shared consumer with the error\nsent via onError or the value via onSuccess\nfor each SingleObserver that subscribes\nto the current Single.",
    "lineNumber": 375,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(onSuccess: any, onError: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "the function called with the success value of onEvent"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "doOnSubscribe",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#doOnSubscribe",
    "access": "public",
    "description": "Calls the shared function with the Cancellable\nsent through the onSubscribe for each SingleObserver\nthat subscribes to the current Single.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doOnSubscribe.png\" class=\"diagram\">",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: Cancellable)"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "the function called with the Cancellable sent via onSubscribe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "doOnSuccess",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#doOnSuccess",
    "access": "public",
    "description": "Calls the shared function with the error sent\nvia onSuccess for each SingleObserver that subscribes\nto the current Single.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.doOnSuccess.2.png\" class=\"diagram\">",
    "lineNumber": 405,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "the function called with the success value of onSuccess"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "doOnTerminate",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#doOnTerminate",
    "access": "public",
    "description": "Returns a Single instance that calls the given\nonTerminate callback just before this Single\ncompletes normally or with an exception.\n\nThis differs from doAfterTerminate in that this happens\nbefore the onComplete or onError notification.",
    "lineNumber": 422,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "the action to invoke when the consumer calls\nonComplete or onError"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "error",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.error",
    "access": "public",
    "description": "Creates a Single with an error.\n\nSignals an error returned by the callback function\nfor each individual SingleObserver or returns a Single\nthat invokes a subscriber's onError method when\nthe subscriber subscribes to it.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.error.png\" class=\"diagram\">\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.error.c.png\" class=\"diagram\">",
    "lineNumber": 445,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\na Single that invokes the subscriber's onError method\nwhen the subscriber subscribes to it"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():Error",
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "the callable that is called for each individual\nSingleObserver and returns or throws a value to be emitted.\n- the particular value to pass to onError"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "a Single that invokes the subscriber's onError method\nwhen the subscriber subscribes to it"
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "flatMap",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#flatMap",
    "access": "public",
    "description": "Returns a Single that is based on applying a specified\nfunction to the item emitted by the source Single, where\nthat function returns a Single.",
    "lineNumber": 461,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\nthe Single returned from mapper when applied to the item\nemitted by the source Single"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: any):Single"
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": "a function that, when applied to the item emitted by the\nsource Single, returns a Single"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "the Single returned from mapper when applied to the item\nemitted by the source Single"
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "fromCallable",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.fromCallable",
    "access": "public",
    "description": "Returns a Single that invokes passed function and\nemits its result for each new SingleObserver that\nsubscribes.\n\nAllows you to defer execution of passed function\nuntil SingleObserver subscribes to the Single. It makes\npassed function \"lazy\".\n\nResult of the function invocation will be emitted\nby the Single.\n\nIf the result is a Promise-like instance, the\nSingleObserver is then subscribed to the Promise through\nthe fromPromise operator.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.fromCallable.png\" class=\"diagram\">",
    "lineNumber": 491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\na Single whose SingleObserver' subscriptions trigger\nan invocation of the given function."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function():any"
        ],
        "spread": false,
        "optional": false,
        "name": "callable",
        "description": "function which execution should be deferred, it will\nbe invoked when SingleObserver will subscribe to\nthe Single."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "a Single whose SingleObserver' subscriptions trigger\nan invocation of the given function."
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "fromPromise",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.fromPromise",
    "access": "public",
    "description": "Converts a Promise-like instance into a Single.",
    "lineNumber": 502,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Promise",
          "Thennable",
          "PromiseLike"
        ],
        "spread": false,
        "optional": false,
        "name": "promise",
        "description": "The promise to be converted into a Single."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "fromResolvable",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.fromResolvable",
    "access": "public",
    "description": "Provides a Promise-like interface for emitting signals.",
    "lineNumber": 514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(resolve: function, reject:function))"
        ],
        "spread": false,
        "optional": false,
        "name": "fulfillable",
        "description": "A function that accepts two parameters: resolve and reject,\nsimilar to a Promise construct."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "just",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.just",
    "access": "public",
    "description": "Returns a Single that emits a specified item.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.just.png\" class=\"diagram\">",
    "lineNumber": 528,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\na Single that emits item"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the item to emit"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "a Single that emits item"
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "lift",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#lift",
    "access": "public",
    "description": "This method requires advanced knowledge about building\noperators, please consider other standard composition\nmethods first; Returns a Single which, when subscribed\nto, invokes the operator function for each individual\ndownstream Single and allows the insertion of a custom\noperator by accessing the downstream's SingleObserver during\nthis subscription phase and providing a new SingleObserver,\ncontaining the custom operator's intended business logic,\nthat will be used in the subscription process going\nfurther upstream.\n\nGenerally, such a new SingleObserver will wrap the downstream's\nSingleObserver and forwards the onSuccess and onError events\nfrom the upstream directly or according to the emission\npattern the custom operator's business logic requires.\nIn addition, such operator can intercept the flow control\ncalls of cancel and signal.cancelled that would have traveled\nupstream and perform additional actions depending on the\nsame business logic requirements.\n\nNote that implementing custom operators via this lift()\nmethod adds slightly more overhead by requiring an additional\nallocation and indirection per assembled flows. Instead,\nusing compose() method and  creating a transformer function\nwith it is recommended.",
    "lineNumber": 565,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(observer: SingleObserver):SingleObserver"
        ],
        "spread": false,
        "optional": false,
        "name": "operator",
        "description": "the function that receives the downstream's SingleObserver\nand should return a SingleObserver with custom behavior\nto be used as the consumer for the current Single."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "map",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#map",
    "access": "public",
    "description": "Returns a Single that applies a specified function\nto the item emitted by the source Single and emits\nthe result of this function application.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.map.png\" class=\"diagram\">",
    "lineNumber": 582,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\na Single that emits the item from the source Single,\ntransformed by the specified function"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "function(x: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": "a function to apply to the item emitted by the Single"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "a Single that emits the item from the source Single,\ntransformed by the specified function"
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "merge",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.merge",
    "access": "public",
    "description": "Flattens a Single that emits a Single into a single Single\nthat emits the item emitted by the nested Single, without\nany transformation.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.merge.oo.png\" class=\"diagram\">",
    "lineNumber": 599,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\na Single that emits the item that is the result of flattening\nthe Single emitted by source."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Single"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "a Single that emits a Single"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "a Single that emits the item that is the result of flattening\nthe Single emitted by source."
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "never",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.never",
    "access": "public",
    "description": "Returns a singleton instance of a never-signalling\nSingle (only calls onSubscribe).\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.never.png\" class=\"diagram\">",
    "lineNumber": 611,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "observeOn",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#observeOn",
    "access": "public",
    "description": "Modifies a Single to emit its item (or notify of its error)\non a specified Scheduler, asynchronously.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.observeOn.png\" class=\"diagram\">",
    "lineNumber": 628,
    "params": [
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "the source Single modified so that its subscribers are\nnotified on the specified Scheduler"
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "onErrorResumeNext",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#onErrorResumeNext",
    "access": "public",
    "description": "Instructs a Single to pass control to another\nSingle rather than invoking SingleObserver.onError\nif it encounters an error.\n\nBy default, when a Single encounters an error\nthat prevents it from emitting the expected item\nto its SingleObserver, the Single invokes its SingleObserver's\nonError method, and then quits without invoking any\nmore of its SingleObserver's methods.\n\nThe onErrorResumeNext method changes this behavior.\nIf you pass another Single (resumeIfError) or if you\npass a function that will return another Single\n(resumeIfError) to a Single's onErrorResumeNext\nmethod, if the original Single encounters an error,\ninstead of invoking its SingleObserver's onError method,\nit will instead relinquish control to resumeIfError\nwhich will invoke the SingleObserver's onSuccess method\nif it is able to do so. In such a case,\nbecause no Single necessarily invokes onError, the\nSingleObserver may never know that an error happened.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.onErrorResumeNext.f.png\" class=\"diagram\">\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.onErrorResumeNext.png\" class=\"diagram\">",
    "lineNumber": 661,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: any):Single",
          "Single"
        ],
        "spread": false,
        "optional": false,
        "name": "resumeIfError",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "onErrorReturn",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#onErrorReturn",
    "access": "public",
    "description": "Instructs a Single to emit an item (returned by\na specified function) rather than invoking\nonError if it encounters an error.\n\nBy default, when a Single encounters an error that\nprevents it from emitting the expected item to its\nsubscriber, the Single invokes its subscriber's\nSingleObserver.onError method, and then quits without\ninvoking any more of its subscriber's methods.\nThe onErrorReturn method changes this behavior.\nIf you pass a function (resumeFunction) to a Single's\nonErrorReturn method, if the original Single encounters\nan error, instead of invoking its subscriber's\nSingleObserver.onError method, it will instead emit the\nreturn value of resumeIfError.\n\nYou can use this to prevent errors from propagating\nor to supply fallback data should errors be encountered.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.onErrorReturn.png\" class=\"diagram\">",
    "lineNumber": 692,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(e: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "resumeFunction",
        "description": "a function that returns an item that the new Single\nwill emit if the source Single encounters an error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "onErrorReturnItem",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#onErrorReturnItem",
    "access": "public",
    "description": "Signals the specified value as success in case\nthe current Single signals an error.",
    "lineNumber": 705,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "the value to signal if the current Single fails"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "retry",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#retry",
    "access": "public",
    "description": "Re-subscribe to the current Single if the given predicate\nreturns true when the Single fails with an onError.\n\nIf no predicate is provided, repeatedly re-subscribes to\nthe current Single indefinitely if it fails with an onError.",
    "lineNumber": 721,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "function(retries: number, err: Error):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "the predicate called with the resubscription count and the failure\nvalue and should return true if a resubscription should happen."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "subscribeOn",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#subscribeOn",
    "access": "public",
    "description": "Asynchronously subscribes subscribers to this Single\non the specified Scheduler.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.subscribeOn.png\" class=\"diagram\">",
    "lineNumber": 738,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\nthe source Single modified so that its subscriptions happen\non the specified Scheduler"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "the source Single modified so that its subscriptions happen\non the specified Scheduler"
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "subscribeWith",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#subscribeWith",
    "access": "public",
    "description": "Subscribes with an Object that is an SingleObserver.\n\nAn Object is considered as an SingleObserver if:\n - if it has the method onSubscribe\n - if it has the method onSuccess (optional)\n - if it has the method onError (optional)\n\nThe onSubscribe method is called when subscribeWith\nor subscribe is executed. This method receives an\nCancellable instance.",
    "lineNumber": 758,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#subscribe",
    "access": "public",
    "description": "Subscribes to a Single instance with an onSuccess\nand an onError method.\n\nonSuccess receives a non-undefined value.\nonError receives a string(or an Error object).\n\nBoth are called once.",
    "lineNumber": 782,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Cancellable}\nan Cancellable reference can request the Single to cancel."
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "function(x: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "the function you have designed to accept the emission\nfrom the Single"
      },
      {
        "nullable": true,
        "types": [
          "function(x: Error)"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "the function you have designed to accept any error\nnotification from the Single"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cancellable"
      ],
      "spread": false,
      "description": "an Cancellable reference can request the Single to cancel."
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "takeUntil",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#takeUntil",
    "access": "public",
    "description": "Returns a Single that emits the item emitted by\nthe source Single until a second Single emits an\nitem. Upon emission of an item from other,\nthis will emit an error rather than go to\nSingleObserver.onSuccess.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/takeUntil.png\" class=\"diagram\">",
    "lineNumber": 810,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\na Single that emits the item emitted by the source\nSingle until such time as other emits its item"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Single"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the Single whose emitted item will cause takeUntil\nto emit the item from the source Single"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "a Single that emits the item emitted by the source\nSingle until such time as other emits its item"
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "timer",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.timer",
    "access": "public",
    "description": "Signals success with 0 value after the given\ndelay for each SingleObserver.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.timer.png\" class=\"diagram\">",
    "lineNumber": 827,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "the amount of time in milliseconds."
      },
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "timeout",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#timeout",
    "access": "public",
    "description": "Signals a TimeoutException if the current Single\ndoesn't signal a success value within the specified\ntimeout window.",
    "lineNumber": 842,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "amount of time in milliseconds."
      },
      {
        "nullable": true,
        "types": [
          "Scheduler"
        ],
        "spread": false,
        "optional": false,
        "name": "scheduler",
        "description": "the target scheduler to use for the non-blocking wait and emission.\nBy default, schedules on the current thread."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "zipArray",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/single.js~Single.zipArray",
    "access": "public",
    "description": "Waits until all Single sources provided via\nan array signal a success value and calls a zipper\nfunction with an array of these values to return\na result to be emitted to downstream.\n\nIf the array of Single is empty an error is\nsignalled immediately.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.zip.png\" class=\"diagram\">",
    "lineNumber": 866,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "the array of Single instances. An empty sequence\nwill result in an onError signal."
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "zipper",
        "description": "the function that receives an array with values\nfrom each Single and should return a value to be\nemitted to downstream"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "zipWith",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#zipWith",
    "access": "public",
    "description": "Returns a Single that emits the result of applying\na specified function to the pair of items emitted\nby the source Single and another specified Single.\n\n<img src=\"https://raw.githubusercontent.com/LXSMNSYC/rx-single/master/assets/images/Single.zip.png\" class=\"diagram\">",
    "lineNumber": 888,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Single}\na Single that pairs up values from the source Single\nand the other Single and emits the results of\nzipper applied to these pairs"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Single"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other Single"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "zipper",
        "description": "a function that combines the pairs of items from\nthe two Singles to generate the items to be emitted\nby the resulting Single"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Single"
      ],
      "spread": false,
      "description": "a Single that pairs up values from the source Single\nand the other Single and emits the results of\nzipper applied to these pairs"
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "toPromise",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#toPromise",
    "access": "public",
    "description": "Converts the Single to a Promise instance.",
    "lineNumber": 897,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "then",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#then",
    "access": "public",
    "description": "Converts the Single to a Promise instance\nand attaches callbacks to it.",
    "lineNumber": 911,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: any):any"
        ],
        "spread": false,
        "optional": false,
        "name": "onFulfill",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "function(x: Error):any"
        ],
        "spread": false,
        "optional": false,
        "name": "onReject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "catch",
    "memberof": "src/single.js~Single",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/single.js~Single#catch",
    "access": "public",
    "description": "Converts the Single to a Promise instance\nand attaches an onRejection callback to it.",
    "lineNumber": 922,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function(x: Error):any"
        ],
        "spread": false,
        "optional": false,
        "name": "onReject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "# rx-single\n\nReactive Extensions - represents a deferred computation with an indication for a single value or exception.\n\n[![NPM](https://nodei.co/npm/rx-single.png)](https://nodei.co/npm/rx-single/)\n\n[![](https://data.jsdelivr.com/v1/package/npm/rx-single/badge)](https://www.jsdelivr.com/package/npm/rx-single)\n[![HitCount](http://hits.dwyl.io/lxsmnsyc/rx-single.svg)](http://hits.dwyl.io/lxsmnsyc/rx-single)\n\n| Platform | Build Status |\n| --- | --- |\n| Linux | [![Build Status](https://travis-ci.org/LXSMNSYC/rx-single.svg?branch=master)](https://travis-ci.org/LXSMNSYC/rx-single) |\n| Windows | [![Build status](https://ci.appveyor.com/api/projects/status/mkjwe462uk80axx4?svg=true)](https://ci.appveyor.com/project/LXSMNSYC/rx-single) |\n\n\n[![codecov](https://codecov.io/gh/LXSMNSYC/rx-single/branch/master/graph/badge.svg)](https://codecov.io/gh/LXSMNSYC/rx-single)\n[![Known Vulnerabilities](https://snyk.io/test/github/LXSMNSYC/rx-single/badge.svg?targetFile=package.json)](https://snyk.io/test/github/LXSMNSYC/rx-single?targetFile=package.json)\n\n## Install\n\nNPM\n\n```bash\nnpm i rx-single\n```\n\nCDN\n\n* jsDelivr\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/rx-cancellable/dist/index.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/rx-scheduler/dist/index.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/rx-single/dist/index.min.js\"></script>\n```\n\n* unpkg\n```html\n<script src=\"https://unpkg.com/rx-cancellable/dist/index.min.js\"></script>\n<script src=\"https://unpkg.com/rx-scheduler/dist/index.min.js\"></script>\n<script src=\"https://unpkg.com/rx-single/dist/index.min.js\"></script>\n```\n\n## Usage\n\n### Loading the module\n\n#### CommonJS\n\n```js\nconst Single = require('rx-single');\n```\n\nLoading the CommonJS module provides the Single class.\n\n#### Browser\n\nLoading the JavaScript file for the rx-single provides the Single class\n\n## Documentation\n\nYou can read the documentation at the [official doc site](https://lxsmnsyc.github.io/rx-single/)\n\n## Build\n\nClone the repo first, then run the following to install the dependencies\n\n```bash\nnpm install\n```\n\nTo build the coverages, run the test suite, the docs, and the distributable modules:\n\n```bash\nnpm run build\n```\n\n## Changelogs\n* 0.11.0\n  - Massive performance boost\n  - Renamed `zip` to `zipArray`\n  - added `ambArray`\n* 0.10.0\n  - Replaced AbortController with [Cancellable](https://lxsmnsyc.github.io/rx-cancellable/).\n  - Renamed `doOnAbort` with `doOnCancel`\n* 0.9.0\n  - now uses [Schedulers](https://github.com/LXSMNSYC/rx-scheduler)\n  - `delay`, `delaySubscription`, `timeout` and `timer` now accepts `Schedulers` (defaults to `Scheduler.current`).\n  - added two new operators: `observeOn` (observes the emissions on a given Scheduler) and `subscribeOn` (subscribes to a given Single on a given Scheduler).\n* 0.8.0\n  - Fixed fromCallable subscription overhead\n* 0.7.0\n  - Replaced operator bindings with operator reference + Function.call\n* 0.6.0\n  - Fixed some operators not guarding observers.\n* 0.4.0\n  - Null values are now guarded. Previously, only undefined values are guarded.\n* 0.3.0\n  - Disposable deprecated. Single now uses AbortController for representing state of disposition.\n  - Renamed doOnDispose to doOnAbort\n* 0.2.0\n  - onError (both Observer and Emitter) now only accepts Error instances.\n  - if no onError function is provided for the subscription, the error to be received is thrown instead.\n  - Single.error now only accepts Error instances.\n  - fixed error message for Single.amb\n* 0.1.0\n  - Release",
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"rx-single\",\n  \"version\": \"0.10.3\",\n  \"description\": \"Reactive Extensions - Represents an asynchronous value or error\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"linux-mocha\": \"./node_modules/.bin/mocha --require @babel/register -R spec --recursive\",\n    \"linux-test\": \"./node_modules/.bin/nyc --reporter=html npm run linux-mocha\",\n    \"linux-docs\": \"./node_modules/.bin/esdoc\",\n    \"linux-cjs\": \"./node_modules/.bin/rollup src/index.js --format cjs --name \\\"Single\\\" --file index.js\",\n    \"linux-browser\": \"./node_modules/.bin/rollup src/index.js --format iife --name \\\"Single\\\" --file dist/index.js -g \\\"rx-cancellable:Cancellable\\\"\",\n    \"linux-minify\": \"npm run linux-browser && ./node_modules/.bin/terser dist/index.js --compress --mangle --output dist/index.min.js\",\n    \"linux-build\": \"npm run linux-cjs && npm run linux-minify && npm run linux-docs && npm run linux-test\",\n    \"win-mocha\": \"node node_modules/mocha/bin/mocha --require @babel/register -R spec --recursive\",\n    \"win-test\": \"node node_modules/nyc/bin/nyc.js --reporter=html npm run win-mocha\",\n    \"win-docs\": \"node node_modules/esdoc/out/src/ESDocCLI.js\",\n    \"win-cjs\": \"node node_modules/.bin/rollup src/index.js --format cjs --name \\\"Single\\\" --file index.js\",\n    \"win-browser\": \"node node_modules/.bin/rollup src/index.js --format iife --name \\\"Single\\\" --file dist/index.js -g \\\"rx-cancellable:Cancellable\\\"\",\n    \"win-minify\": \"npm run win-browser && node node_modules/.bin/terser dist/index.js --compress --mangle --output dist/index.min.js\",\n    \"win-build\": \"npm run win-cjs && npm run win-minify && npm run win-docs && npm run win-test\",\n    \"mocha\": \"npm run linux-mocha || npm run win-mocha\",\n    \"test\": \"npm run linux-test || npm run win-test\",\n    \"docs\": \"npm run linux-docs || npm run win-docs\",\n    \"cjs\": \"npm run linux-cjs || npm run win-cjs\",\n    \"browser\": \"npm run linux-browser || npm run win-browser\",\n    \"minify\": \"npm run linux-minify || npm run win-minify\",\n    \"build\": \"npm run cjs && npm run minify && npm run docs && npm test\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/LXSMNSYC/rx-single.git\"\n  },\n  \"keywords\": [\n    \"rxjs\",\n    \"reactivex\",\n    \"reactive\"\n  ],\n  \"author\": \"LXSMNSYC (alexis.munsayac@gmail.com)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/LXSMNSYC/rx-single/issues\"\n  },\n  \"homepage\": \"https://github.com/LXSMNSYC/rx-single#readme\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.4.3\",\n    \"@babel/preset-env\": \"^7.4.3\",\n    \"@babel/register\": \"^7.4.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-custom-theme\": \"^1.4.2\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"esdoc-integrate-test-plugin\": \"^1.0.0\",\n    \"esdoc-publish-html-plugin\": \"^1.1.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.16.0\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-plugin-import\": \"^2.17.1\",\n    \"mocha\": \"^6.1.3\",\n    \"nyc\": \"^13.3.0\",\n    \"rollup\": \"^1.10.0\",\n    \"terser\": \"^3.17.0\"\n  },\n  \"dependencies\": {\n    \"rx-cancellable\": \"^0.3.0\",\n    \"rx-scheduler\": \"^0.2.4\"\n  }\n}\n",
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 263,
    "kind": "testFile",
    "name": "test/amb.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#amb', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.amb([Single.just('First'), Single.just('Second')]);\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should signal success from the earliest source.', (done) => {\n    const single = Single.amb([Single.just('Hello'), Single.timer(100)]);\n    single.subscribe(\n      () => done(),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the earliest source.', (done) => {\n    const single = Single.amb([Single.error(new Error('Hello')), Single.timer(100)]);\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if one of the source is non-Single.', (done) => {\n    const single = Single.amb(['Hello', Single.timer(100)]);\n    single.subscribe(\n      done,\n      e => (e instanceof Error ? done() : done(e)),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if given argument is not Iterable', (done) => {\n    const single = Single.amb();\n    single.subscribe(\n      done,\n      e => (e instanceof Error ? done() : done(e)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/amb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/amb.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/amb.js~describe0",
    "access": "public",
    "description": "#amb",
    "lineNumber": 8
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it1",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it2",
    "access": "public",
    "description": "should signal success from the earliest source.",
    "lineNumber": 19
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it3",
    "access": "public",
    "description": "should signal error from the earliest source.",
    "lineNumber": 29
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it4",
    "access": "public",
    "description": "should signal error if one of the source is non-Single.",
    "lineNumber": 39
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/amb.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/amb.js~describe0.it5",
    "access": "public",
    "description": "should signal error if given argument is not Iterable",
    "lineNumber": 49
  },
  {
    "__docId__": 270,
    "kind": "testFile",
    "name": "test/ambArray.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#ambArray', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.ambArray([Single.just('First'), Single.just('Second')]);\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should signal success from the earliest source.', (done) => {\n    const single = Single.ambArray([Single.just('Hello'), Single.timer(100)]);\n    single.subscribe(\n      () => done(),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the earliest source.', (done) => {\n    const single = Single.ambArray([Single.error(new Error('Hello')), Single.timer(100)]);\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if one of the source is non-Single.', (done) => {\n    const single = Single.ambArray(['Hello', Single.timer(100)]);\n    single.subscribe(\n      done,\n      e => (e instanceof Error ? done() : done(e)),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if given argument is not Iterable', (done) => {\n    const single = Single.ambArray();\n    single.subscribe(\n      done,\n      e => (e instanceof Error ? done() : done(e)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/ambArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "test/ambArray.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/ambArray.js~describe6",
    "access": "public",
    "description": "#ambArray",
    "lineNumber": 8
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/ambArray.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambArray.js~describe6.it7",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/ambArray.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambArray.js~describe6.it8",
    "access": "public",
    "description": "should signal success from the earliest source.",
    "lineNumber": 19
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/ambArray.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambArray.js~describe6.it9",
    "access": "public",
    "description": "should signal error from the earliest source.",
    "lineNumber": 29
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/ambArray.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambArray.js~describe6.it10",
    "access": "public",
    "description": "should signal error if one of the source is non-Single.",
    "lineNumber": 39
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/ambArray.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambArray.js~describe6.it11",
    "access": "public",
    "description": "should signal error if given argument is not Iterable",
    "lineNumber": 49
  },
  {
    "__docId__": 277,
    "kind": "testFile",
    "name": "test/ambWith.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#ambWith', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('First').ambWith(Single.just('Second'));\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the other value is non-Single', () => {\n    const source = Single.just('Hello');\n    const single = source.ambWith();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should signal success from the source (if earlier)', (done) => {\n    const single = Single.just('Hello').ambWith(Single.timer(100));\n    single.subscribe(\n      () => done(),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success from the other (if earlier).', (done) => {\n    const single = Single.timer(100).ambWith(Single.just('Hello'));\n    single.subscribe(\n      () => done(),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the source (if earlier).', (done) => {\n    const single = Single.error(new Error('Hello')).ambWith(Single.timer(100));\n    single.subscribe(\n      done,\n      e => (e instanceof Error ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error from the other (if earlier).', (done) => {\n    const single = Single.timer(100).ambWith(Single.error(new Error('Hello')));\n    single.subscribe(\n      done,\n      e => (e instanceof Error ? done() : done(false)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/ambWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/ambWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/ambWith.js~describe12",
    "access": "public",
    "description": "#ambWith",
    "lineNumber": 8
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/ambWith.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe12.it13",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/ambWith.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe12.it14",
    "access": "public",
    "description": "should return the same instance if the other value is non-Single",
    "lineNumber": 19
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/ambWith.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe12.it15",
    "access": "public",
    "description": "should signal success from the source (if earlier)",
    "lineNumber": 27
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/ambWith.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe12.it16",
    "access": "public",
    "description": "should signal success from the other (if earlier).",
    "lineNumber": 37
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/ambWith.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe12.it17",
    "access": "public",
    "description": "should signal error from the source (if earlier).",
    "lineNumber": 47
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/ambWith.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/ambWith.js~describe12.it18",
    "access": "public",
    "description": "should signal error from the other (if earlier).",
    "lineNumber": 57
  },
  {
    "__docId__": 285,
    "kind": "testFile",
    "name": "test/cache.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#cache', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello World').cache();\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should signal cached success value', (done) => {\n    let flag;\n    const single = Single.just('Hello World').delay(100).cache();\n\n    setTimeout(() => {\n      single.subscribe(\n        () => { flag = true; },\n        done,\n      );\n      setTimeout(() => {\n        single.subscribe(\n          x => (flag ? done() : done(x)),\n          done,\n        );\n      }, 100);\n    }, 200);\n  });\n  /**\n   *\n   */\n  it('should signal cached error value', (done) => {\n    let flag;\n    const single = Single.error(new Error('Hello')).delay(100).cache();\n\n    setTimeout(() => {\n      single.subscribe(\n        done,\n        () => { flag = true; },\n      );\n\n      setTimeout(() => {\n        single.subscribe(\n          done,\n          e => (flag && e instanceof Error ? done() : done(e)),\n        );\n      }, 100);\n    }, 200);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/cache.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cache.js~describe19",
    "access": "public",
    "description": "#cache",
    "lineNumber": 8
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/cache.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache.js~describe19.it20",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/cache.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache.js~describe19.it21",
    "access": "public",
    "description": "should signal cached success value",
    "lineNumber": 19
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/cache.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache.js~describe19.it22",
    "access": "public",
    "description": "should signal cached error value",
    "lineNumber": 39
  },
  {
    "__docId__": 290,
    "kind": "testFile",
    "name": "test/catch.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#catch', () => {\n  /**\n   *\n   */\n  it('should create a Promise', () => {\n    const single = Single.just('Hello').catch(x => x);\n    assert(single instanceof Promise);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/catch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/catch.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/catch.js~describe23",
    "access": "public",
    "description": "#catch",
    "lineNumber": 8
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/catch.js~describe23",
    "testDepth": 1,
    "static": true,
    "longname": "test/catch.js~describe23.it24",
    "access": "public",
    "description": "should create a Promise",
    "lineNumber": 12
  },
  {
    "__docId__": 293,
    "kind": "testFile",
    "name": "test/compose.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#compose', () => {\n  /**\n   *\n   */\n  it('should return the same instance if no function is provided', () => {\n    const source = Single.just('Hello');\n    const single = source.compose();\n\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should return a Single from the transformer', () => {\n    const single = Single.just('Hello').compose(source => source.map(x => `${x} World`));\n\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should correctly signal the composed Single', (done) => {\n    const single = Single.just('Hello').compose(source => source.map(x => `${x} World`));\n\n    single.subscribe(\n      x => (x === 'Hello World' ? done() : done(x)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the transformer function returned a non-Single', (done) => {\n    const single = Single.just('Hello').compose(() => undefined);\n\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/compose.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/compose.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/compose.js~describe25",
    "access": "public",
    "description": "#compose",
    "lineNumber": 8
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/compose.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe25.it26",
    "access": "public",
    "description": "should return the same instance if no function is provided",
    "lineNumber": 12
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/compose.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe25.it27",
    "access": "public",
    "description": "should return a Single from the transformer",
    "lineNumber": 21
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/compose.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe25.it28",
    "access": "public",
    "description": "should correctly signal the composed Single",
    "lineNumber": 29
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/compose.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/compose.js~describe25.it29",
    "access": "public",
    "description": "should signal error if the transformer function returned a non-Single",
    "lineNumber": 40
  },
  {
    "__docId__": 299,
    "kind": "testFile",
    "name": "test/contains.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#contains', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello World').contains('Hello World');\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the compared value is undefined', () => {\n    const source = Single.just('Hello');\n    const single = source.contains();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should signal true if the success value and the compared value are both equal.', (done) => {\n    const single = Single.just('Hello World').contains('Hello World');\n    single.subscribe(\n      x => (x ? done() : done(false)),\n      e => done(e),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal false if the success value and the compared value are both equal.', (done) => {\n    const single = Single.just('Hello').contains('Hello World');\n    single.subscribe(\n      x => (x ? done(false) : done()),\n      e => done(e),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the comparer throws an error.', (done) => {\n    const single = Single.just('Hello').contains('Hello World', () => {\n      throw new Error('Expected');\n    });\n\n    single.subscribe(\n      () => done(false),\n      e => (e instanceof Error ? done() : done(e)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/contains.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/contains.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/contains.js~describe30",
    "access": "public",
    "description": "#contains",
    "lineNumber": 8
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/contains.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/contains.js~describe30.it31",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/contains.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/contains.js~describe30.it32",
    "access": "public",
    "description": "should return the same instance if the compared value is undefined",
    "lineNumber": 19
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/contains.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/contains.js~describe30.it33",
    "access": "public",
    "description": "should signal true if the success value and the compared value are both equal.",
    "lineNumber": 27
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/contains.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/contains.js~describe30.it34",
    "access": "public",
    "description": "should signal false if the success value and the compared value are both equal.",
    "lineNumber": 37
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/contains.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/contains.js~describe30.it35",
    "access": "public",
    "description": "should signal an error if the comparer throws an error.",
    "lineNumber": 47
  },
  {
    "__docId__": 306,
    "kind": "testFile",
    "name": "test/create.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#create', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.create(e => e.onSuccess('Hello World'));\n\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should signal error if the create received a non-function', (done) => {\n    const single = Single.create();\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the emitter signals success with undefined value.', (done) => {\n    const single = Single.create(e => e.onSuccess() || e.onSuccess());\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the emitter signals error with undefined value.', (done) => {\n    const single = Single.create(e => e.onError() || e.onError());\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should be cancel successfully if emitter is cancel before any signal.', (done) => {\n    const single = Single.create((e) => {\n      setTimeout(() => e.onSuccess(true), 100);\n    });\n\n    const controller = single.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should signal error if subscriber throws an error.', (done) => {\n    const single = Single.create(() => {\n      throw new Error('Expected');\n    });\n\n    single.subscribe(\n      () => done(false),\n      e => (e instanceof Error ? done() : done(e)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/create.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "test/create.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/create.js~describe36",
    "access": "public",
    "description": "#create",
    "lineNumber": 8
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/create.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe36.it37",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/create.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe36.it38",
    "access": "public",
    "description": "should signal error if the create received a non-function",
    "lineNumber": 20
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/create.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe36.it39",
    "access": "public",
    "description": "should signal error if the emitter signals success with undefined value.",
    "lineNumber": 31
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/create.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe36.it40",
    "access": "public",
    "description": "should signal error if the emitter signals error with undefined value.",
    "lineNumber": 42
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/create.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe36.it41",
    "access": "public",
    "description": "should be cancel successfully if emitter is cancel before any signal.",
    "lineNumber": 53
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/create.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/create.js~describe36.it42",
    "access": "public",
    "description": "should signal error if subscriber throws an error.",
    "lineNumber": 70
  },
  {
    "__docId__": 314,
    "kind": "testFile",
    "name": "test/defer.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#defer', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.defer(() => Single.just('Hello World'));\n\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const single = Single.defer(() => Single.just('Hello World'));\n\n    single.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      e => done(e),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if callable returns a non-Single', (done) => {\n    const single = Single.defer(() => {});\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if callable throws an error', (done) => {\n    const single = Single.defer(() => {\n      throw new Error('Expected');\n    });\n\n    single.subscribe(\n      () => done(false),\n      e => (e instanceof Error ? done() : done(false)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/defer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "test/defer.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/defer.js~describe43",
    "access": "public",
    "description": "#defer",
    "lineNumber": 8
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/defer.js~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe43.it44",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/defer.js~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe43.it45",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 20
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/defer.js~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe43.it46",
    "access": "public",
    "description": "should signal error if callable returns a non-Single",
    "lineNumber": 31
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/defer.js~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "test/defer.js~describe43.it47",
    "access": "public",
    "description": "should signal error if callable throws an error",
    "lineNumber": 42
  },
  {
    "__docId__": 320,
    "kind": "testFile",
    "name": "test/delay.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#delay', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').delay(100);\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is not a number.', () => {\n    const source = Single.just('Hello');\n    const single = source.delay();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should signal success with the given value.', (done) => {\n    const single = Single.just('Hello').delay(100);\n    single.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const single = Single.error(new Error('Hello')).delay(100);\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Single.just('Hello').delay(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if cancelled.', (done) => {\n    const source = Single.error(new Error('Hello')).delay(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/delay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/delay.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/delay.js~describe48",
    "access": "public",
    "description": "#delay",
    "lineNumber": 8
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/delay.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe48.it49",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/delay.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe48.it50",
    "access": "public",
    "description": "should return the same instance if the amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/delay.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe48.it51",
    "access": "public",
    "description": "should signal success with the given value.",
    "lineNumber": 27
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/delay.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe48.it52",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 37
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/delay.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe48.it53",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 47
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/delay.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/delay.js~describe48.it54",
    "access": "public",
    "description": "should not signal error if cancelled.",
    "lineNumber": 62
  },
  {
    "__docId__": 328,
    "kind": "testFile",
    "name": "test/delaySubscription.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#delaySubscription', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').delaySubscription(100);\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is not a number.', () => {\n    const source = Single.just('Hello');\n    const single = source.delaySubscription();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should signal success with the given value.', (done) => {\n    const single = Single.just('Hello').delaySubscription(100);\n    single.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const single = Single.error(new Error('Hello')).delaySubscription(100);\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Single.just('Hello').delaySubscription(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if cancelled.', (done) => {\n    const source = Single.error(new Error('Hello')).delaySubscription(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/delaySubscription.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/delaySubscription.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/delaySubscription.js~describe55",
    "access": "public",
    "description": "#delaySubscription",
    "lineNumber": 8
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it56",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it57",
    "access": "public",
    "description": "should return the same instance if the amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it58",
    "access": "public",
    "description": "should signal success with the given value.",
    "lineNumber": 27
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it59",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 37
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it60",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 47
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/delaySubscription.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/delaySubscription.js~describe55.it61",
    "access": "public",
    "description": "should not signal error if cancelled.",
    "lineNumber": 62
  },
  {
    "__docId__": 336,
    "kind": "testFile",
    "name": "test/delayUntil.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#delayUntil', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').delayUntil(Single.timer(100));\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the provided value is not a Single.', () => {\n    const source = Single.just('Hello');\n    const single = source.delayUntil();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should signal success with the given value.', (done) => {\n    const single = Single.just('Hello').delayUntil(Single.timer(100));\n    single.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const single = Single.error(new Error('Hello')).delayUntil(Single.timer(100));\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Single signals error.', (done) => {\n    const single = Single.error(new Error('World')).delayUntil(Single.error(new Error('Hello')));\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Single.just('Hello').delayUntil(Single.timer(100));\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if cancelled.', (done) => {\n    const source = Single.error(new Error('Hello')).delayUntil(Single.timer(100));\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/delayUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "describe62",
    "testId": 62,
    "memberof": "test/delayUntil.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/delayUntil.js~describe62",
    "access": "public",
    "description": "#delayUntil",
    "lineNumber": 8
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/delayUntil.js~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe62.it63",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/delayUntil.js~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe62.it64",
    "access": "public",
    "description": "should return the same instance if the provided value is not a Single.",
    "lineNumber": 19
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/delayUntil.js~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe62.it65",
    "access": "public",
    "description": "should signal success with the given value.",
    "lineNumber": 27
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/delayUntil.js~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe62.it66",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 37
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/delayUntil.js~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe62.it67",
    "access": "public",
    "description": "should signal error if other Single signals error.",
    "lineNumber": 47
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/delayUntil.js~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe62.it68",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 57
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/delayUntil.js~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "test/delayUntil.js~describe62.it69",
    "access": "public",
    "description": "should not signal error if cancelled.",
    "lineNumber": 72
  },
  {
    "__docId__": 345,
    "kind": "testFile",
    "name": "test/doAfterSuccess.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#doAfterSuccess', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').doAfterSuccess(x => console.log(`after success: ${x}`));\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Single.just('Hello');\n    const single = source.doAfterSuccess();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should call the given function after success.', (done) => {\n    let called;\n    const source = Single.just('Hello');\n    const single = source.doAfterSuccess(() => called && done());\n    single.subscribe(\n      () => { called = true; },\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/doAfterSuccess.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/doAfterSuccess.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doAfterSuccess.js~describe70",
    "access": "public",
    "description": "#doAfterSuccess",
    "lineNumber": 8
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/doAfterSuccess.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterSuccess.js~describe70.it71",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/doAfterSuccess.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterSuccess.js~describe70.it72",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/doAfterSuccess.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterSuccess.js~describe70.it73",
    "access": "public",
    "description": "should call the given function after success.",
    "lineNumber": 27
  },
  {
    "__docId__": 350,
    "kind": "testFile",
    "name": "test/doAfterTerminate.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#doAfterTerminate', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').doAfterSuccess(() => {});\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Single.just('Hello');\n    const single = source.doAfterTerminate();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should call the given function after success.', (done) => {\n    let called;\n    const source = Single.just('Hello');\n    const single = source.doAfterTerminate(() => called && done());\n    single.subscribe(\n      () => { called = true; },\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function after error.', (done) => {\n    let called;\n    const source = Single.error(new Error('Hello'));\n    const single = source.doAfterTerminate(() => called && done());\n    single.subscribe(\n      () => done(false),\n      () => { called = true; },\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/doAfterTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "test/doAfterTerminate.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe74",
    "access": "public",
    "description": "#doAfterTerminate",
    "lineNumber": 8
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/doAfterTerminate.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe74.it75",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/doAfterTerminate.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe74.it76",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/doAfterTerminate.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe74.it77",
    "access": "public",
    "description": "should call the given function after success.",
    "lineNumber": 27
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/doAfterTerminate.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/doAfterTerminate.js~describe74.it78",
    "access": "public",
    "description": "should call the given function after error.",
    "lineNumber": 39
  },
  {
    "__docId__": 356,
    "kind": "testFile",
    "name": "test/doFinally.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#doFinally', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').doFinally(() => {});\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Single.just('Hello');\n    const single = source.doFinally();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should call the given function after success.', (done) => {\n    let called;\n    const source = Single.just('Hello');\n    const single = source.doFinally(() => called && done());\n    single.subscribe(\n      () => { called = true; },\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function after error.', (done) => {\n    let called;\n    const source = Single.error(new Error('Hello'));\n    const single = source.doFinally(() => called && done());\n    single.subscribe(\n      () => done(false),\n      () => { called = true; },\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on cancel.', (done) => {\n    const source = Single.timer(100);\n    const single = source.doFinally(() => done());\n\n    const controller = single.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n    controller.cancel();\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/doFinally.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/doFinally.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doFinally.js~describe79",
    "access": "public",
    "description": "#doFinally",
    "lineNumber": 8
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/doFinally.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe79.it80",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/doFinally.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe79.it81",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/doFinally.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe79.it82",
    "access": "public",
    "description": "should call the given function after success.",
    "lineNumber": 27
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/doFinally.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe79.it83",
    "access": "public",
    "description": "should call the given function after error.",
    "lineNumber": 39
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/doFinally.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/doFinally.js~describe79.it84",
    "access": "public",
    "description": "should call the given function on cancel.",
    "lineNumber": 51
  },
  {
    "__docId__": 363,
    "kind": "testFile",
    "name": "test/doOnCancel.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('Single', () => {\n  /**\n   *\n   */\n  describe('#doOnCancel', () => {\n    /**\n     *\n     */\n    it('should create a Single', () => {\n      const single = Single.just('Hello').doOnCancel(() => {});\n      assert(single instanceof Single);\n    });\n    /**\n     *\n     */\n    it('should return the same instance if the method received a non-function parameter.', () => {\n      const source = Single.just('Hello');\n      const single = source.doOnCancel();\n      assert(source === single);\n    });\n    /**\n     *\n     */\n    it('should signal the success value then fire cancel callback.', (done) => {\n      let called;\n      const source = Single.just('Hello');\n      const single = source.doOnCancel(() => called && done());\n\n      const controller = single.subscribe(\n        () => { called = true; },\n        done,\n      );\n      controller.cancel();\n    });\n    /**\n     *\n     */\n    it('should signal the error value then fire cancel callback.', (done) => {\n      let called;\n      const source = Single.error(new Error('Hello'));\n      const single = source.doOnCancel(() => called && done());\n\n      const controller = single.subscribe(\n        done,\n        () => { called = true; },\n      );\n      controller.cancel();\n    });\n    /**\n     *\n     */\n    it('should call the given function on cancel.', (done) => {\n      const source = Single.just('Hello').delay(100);\n      const single = source.doOnCancel(() => done());\n\n      const controller = single.subscribe(\n        done,\n        done,\n      );\n      controller.cancel();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/doOnCancel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "test/doOnCancel.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnCancel.js~describe85",
    "access": "public",
    "description": "Single",
    "lineNumber": 8
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "describe86",
    "testId": 86,
    "memberof": "test/doOnCancel.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnCancel.js~describe85.describe86",
    "access": "public",
    "description": "#doOnCancel",
    "lineNumber": 12
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/doOnCancel.js~describe85.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/doOnCancel.js~describe85.describe86.it87",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 16
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/doOnCancel.js~describe85.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/doOnCancel.js~describe85.describe86.it88",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 23
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/doOnCancel.js~describe85.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/doOnCancel.js~describe85.describe86.it89",
    "access": "public",
    "description": "should signal the success value then fire cancel callback.",
    "lineNumber": 31
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/doOnCancel.js~describe85.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/doOnCancel.js~describe85.describe86.it90",
    "access": "public",
    "description": "should signal the error value then fire cancel callback.",
    "lineNumber": 45
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/doOnCancel.js~describe85.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/doOnCancel.js~describe85.describe86.it91",
    "access": "public",
    "description": "should call the given function on cancel.",
    "lineNumber": 59
  },
  {
    "__docId__": 371,
    "kind": "testFile",
    "name": "test/doOnError.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#doOnError', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').doOnError(() => {});\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Single.just('Hello');\n    const single = source.doOnError();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Single.error(new Error('Hello'));\n    const single = source.doOnError(() => { called = true; });\n    single.subscribe(\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/doOnError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "test/doOnError.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnError.js~describe92",
    "access": "public",
    "description": "#doOnError",
    "lineNumber": 8
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/doOnError.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnError.js~describe92.it93",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/doOnError.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnError.js~describe92.it94",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/doOnError.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnError.js~describe92.it95",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 27
  },
  {
    "__docId__": 376,
    "kind": "testFile",
    "name": "test/doOnEvent.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#doOnEvent', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').doOnEvent(() => {});\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Single.just('Hello');\n    const single = source.doOnEvent();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should call the given function on success.', (done) => {\n    let called;\n    const source = Single.just('Hello');\n    const single = source.doOnEvent(() => { called = true; });\n    single.subscribe(\n      () => called && done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Single.error(new Error('Hello'));\n    const single = source.doOnEvent(() => { called = true; });\n    single.subscribe(\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/doOnEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "describe96",
    "testId": 96,
    "memberof": "test/doOnEvent.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnEvent.js~describe96",
    "access": "public",
    "description": "#doOnEvent",
    "lineNumber": 8
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/doOnEvent.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe96.it97",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/doOnEvent.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe96.it98",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/doOnEvent.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe96.it99",
    "access": "public",
    "description": "should call the given function on success.",
    "lineNumber": 27
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/doOnEvent.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnEvent.js~describe96.it100",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 39
  },
  {
    "__docId__": 382,
    "kind": "testFile",
    "name": "test/doOnSubscribe.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#doOnSubscribe', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').doOnSubscribe(() => {});\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if no function is passed', () => {\n    const source = Single.just('Hello');\n    const single = source.doOnSubscribe();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should be called before actual subscription.', (done) => {\n    let called;\n    const single = Single.just('Hello').doOnSubscribe(() => { called = true; });\n    single.subscribeWith({\n      onSubscribe() {\n        if (called) {\n          done();\n        } else {\n          done(false);\n        }\n      },\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/doOnSubscribe.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "test/doOnSubscribe.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe101",
    "access": "public",
    "description": "#doOnSubscribe",
    "lineNumber": 8
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/doOnSubscribe.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe101.it102",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/doOnSubscribe.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe101.it103",
    "access": "public",
    "description": "should return the same instance if no function is passed",
    "lineNumber": 19
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/doOnSubscribe.js~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSubscribe.js~describe101.it104",
    "access": "public",
    "description": "should be called before actual subscription.",
    "lineNumber": 27
  },
  {
    "__docId__": 387,
    "kind": "testFile",
    "name": "test/doOnSuccess.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#doOnSuccess', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').doOnSuccess(() => {});\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Single.just('Hello');\n    const single = source.doOnSuccess();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should call the given function on success.', (done) => {\n    let called;\n    const source = Single.just('Hello');\n    const single = source.doOnSuccess(() => { called = true; });\n    single.subscribe(\n      () => called && done(),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/doOnSuccess.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "describe105",
    "testId": 105,
    "memberof": "test/doOnSuccess.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnSuccess.js~describe105",
    "access": "public",
    "description": "#doOnSuccess",
    "lineNumber": 8
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/doOnSuccess.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSuccess.js~describe105.it106",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/doOnSuccess.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSuccess.js~describe105.it107",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/doOnSuccess.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnSuccess.js~describe105.it108",
    "access": "public",
    "description": "should call the given function on success.",
    "lineNumber": 27
  },
  {
    "__docId__": 392,
    "kind": "testFile",
    "name": "test/doOnTerminate.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#doOnTerminate', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').doOnTerminate(() => {});\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Single.just('Hello');\n    const single = source.doOnTerminate();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should call the given function on success.', (done) => {\n    let called;\n    const source = Single.just('Hello');\n    const single = source.doOnTerminate(() => { called = true; });\n    single.subscribe(\n      () => called && done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should call the given function on error.', (done) => {\n    let called;\n    const source = Single.error(new Error('Hello'));\n    const single = source.doOnTerminate(() => { called = true; });\n    single.subscribe(\n      () => done(false),\n      () => called && done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/doOnTerminate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "describe109",
    "testId": 109,
    "memberof": "test/doOnTerminate.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/doOnTerminate.js~describe109",
    "access": "public",
    "description": "#doOnTerminate",
    "lineNumber": 8
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/doOnTerminate.js~describe109",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe109.it110",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/doOnTerminate.js~describe109",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe109.it111",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 19
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/doOnTerminate.js~describe109",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe109.it112",
    "access": "public",
    "description": "should call the given function on success.",
    "lineNumber": 27
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/doOnTerminate.js~describe109",
    "testDepth": 1,
    "static": true,
    "longname": "test/doOnTerminate.js~describe109.it113",
    "access": "public",
    "description": "should call the given function on error.",
    "lineNumber": 39
  },
  {
    "__docId__": 398,
    "kind": "testFile",
    "name": "test/error.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#error', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.error(new Error('Hello World'));\n\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should error with the given value.', (done) => {\n    const single = Single.error(new Error('Hello World'));\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the a message if the given value is undefined', (done) => {\n    const single = Single.error();\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the a message if the callable returned undefined', (done) => {\n    const single = Single.error(() => {});\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should error if the callable throws an error.', (done) => {\n    const single = Single.error(() => {\n      throw new Error('Expected');\n    });\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "describe114",
    "testId": 114,
    "memberof": "test/error.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/error.js~describe114",
    "access": "public",
    "description": "#error",
    "lineNumber": 8
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/error.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe114.it115",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/error.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe114.it116",
    "access": "public",
    "description": "should error with the given value.",
    "lineNumber": 20
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/error.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe114.it117",
    "access": "public",
    "description": "should error with the a message if the given value is undefined",
    "lineNumber": 31
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/error.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe114.it118",
    "access": "public",
    "description": "should error with the a message if the callable returned undefined",
    "lineNumber": 42
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "test/error.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/error.js~describe114.it119",
    "access": "public",
    "description": "should error if the callable throws an error.",
    "lineNumber": 53
  },
  {
    "__docId__": 405,
    "kind": "testFile",
    "name": "test/flatMap.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#flatMap', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').flatMap(x => Single.just(`${x} World`));\n\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the method received a non-function parameter.', () => {\n    const source = Single.just('Hello');\n    const single = source.flatMap();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should signal error if mapper returns a non-Single', (done) => {\n    const single = Single.just('Hello').flatMap(() => {});\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success of the returned Single', (done) => {\n    const single = Single.just('Hello').flatMap(x => Single.just(`${x} World`));\n\n    single.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      done,\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/flatMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "describe120",
    "testId": 120,
    "memberof": "test/flatMap.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/flatMap.js~describe120",
    "access": "public",
    "description": "#flatMap",
    "lineNumber": 8
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/flatMap.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe120.it121",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/flatMap.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe120.it122",
    "access": "public",
    "description": "should return the same instance if the method received a non-function parameter.",
    "lineNumber": 20
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/flatMap.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe120.it123",
    "access": "public",
    "description": "should signal error if mapper returns a non-Single",
    "lineNumber": 28
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/flatMap.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/flatMap.js~describe120.it124",
    "access": "public",
    "description": "should signal success of the returned Single",
    "lineNumber": 39
  },
  {
    "__docId__": 411,
    "kind": "testFile",
    "name": "test/fromCallable.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#fromCallable', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.fromCallable(() => 'Hello World');\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const single = Single.fromCallable(() => 'Hello World');\n\n    single.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      e => done(e),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the callable throws an error.', (done) => {\n    const single = Single.fromCallable(() => {\n      throw new Error('Expected');\n    });\n\n    single.subscribe(\n      () => done(false),\n      e => (e instanceof Error ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the callable returns a rejected Promise.', (done) => {\n    const single = Single.fromCallable(() => new Promise((x, y) => y(new Error('Expected'))));\n\n    single.subscribe(\n      () => done(false),\n      e => (e instanceof Error ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the callable is not a function', (done) => {\n    const single = Single.fromCallable();\n\n    single.subscribe(\n      () => done(false),\n      e => (e === 'Single.fromCallable: callable received is not a function.' ? done() : done(false)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/fromCallable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "describe125",
    "testId": 125,
    "memberof": "test/fromCallable.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/fromCallable.js~describe125",
    "access": "public",
    "description": "#fromCallable",
    "lineNumber": 8
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/fromCallable.js~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe125.it126",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/fromCallable.js~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe125.it127",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 19
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/fromCallable.js~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe125.it128",
    "access": "public",
    "description": "should signal an error if the callable throws an error.",
    "lineNumber": 30
  },
  {
    "__docId__": 416,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/fromCallable.js~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe125.it129",
    "access": "public",
    "description": "should signal an error if the callable returns a rejected Promise.",
    "lineNumber": 43
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/fromCallable.js~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromCallable.js~describe125.it130",
    "access": "public",
    "description": "should signal an error if the callable is not a function",
    "lineNumber": 54
  },
  {
    "__docId__": 418,
    "kind": "testFile",
    "name": "test/fromPromise.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#fromPromise', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.fromPromise(new Promise(res => res('Hello World')));\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const single = Single.fromPromise(new Promise(res => res('Hello World')));\n\n    single.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      e => done(e),\n    );\n  });\n\n  /**\n   *\n   */\n  it('should signal error if the given value is not Promise like', (done) => {\n    const single = Single.fromPromise();\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/fromPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "describe131",
    "testId": 131,
    "memberof": "test/fromPromise.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/fromPromise.js~describe131",
    "access": "public",
    "description": "#fromPromise",
    "lineNumber": 8
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "test/fromPromise.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromPromise.js~describe131.it132",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/fromPromise.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromPromise.js~describe131.it133",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 19
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/fromPromise.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromPromise.js~describe131.it134",
    "access": "public",
    "description": "should signal error if the given value is not Promise like",
    "lineNumber": 31
  },
  {
    "__docId__": 423,
    "kind": "testFile",
    "name": "test/fromResolvable.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#fromResolvable', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.fromResolvable(res => res('Hello World'));\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const single = Single.fromResolvable(res => res('Hello World'));\n\n    single.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should error with the given error.', (done) => {\n    const single = Single.fromResolvable((res, rej) => rej(new Error('Hello World')));\n\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the given value is not a function', (done) => {\n    const single = Single.fromResolvable();\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/fromResolvable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "describe135",
    "testId": 135,
    "memberof": "test/fromResolvable.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/fromResolvable.js~describe135",
    "access": "public",
    "description": "#fromResolvable",
    "lineNumber": 8
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/fromResolvable.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe135.it136",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/fromResolvable.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe135.it137",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 19
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/fromResolvable.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe135.it138",
    "access": "public",
    "description": "should error with the given error.",
    "lineNumber": 30
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "test/fromResolvable.js~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "test/fromResolvable.js~describe135.it139",
    "access": "public",
    "description": "should signal error if the given value is not a function",
    "lineNumber": 41
  },
  {
    "__docId__": 429,
    "kind": "testFile",
    "name": "test/just.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#just', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello World');\n\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const single = Single.just('Hello World');\n\n    single.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if value is undefined.', (done) => {\n    const single = Single.just();\n\n    single.subscribe(\n      () => done(false),\n      e => (typeof e !== 'undefined' ? done() : done(false)),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/just.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "describe140",
    "testId": 140,
    "memberof": "test/just.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/just.js~describe140",
    "access": "public",
    "description": "#just",
    "lineNumber": 8
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/just.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/just.js~describe140.it141",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/just.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/just.js~describe140.it142",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 20
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/just.js~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "test/just.js~describe140.it143",
    "access": "public",
    "description": "should emit error if value is undefined.",
    "lineNumber": 31
  },
  {
    "__docId__": 434,
    "kind": "testFile",
    "name": "test/lift.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#lift', () => {\n  /**\n   *\n   */\n  it('should return the same instance if no function is provided', () => {\n    const source = Single.just('Hello');\n    const single = source.lift();\n\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should signal an error if the lift operator returned a non-Observer', (done) => {\n    const single = Single.just('Hello').lift(() => {});\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should subscribe successfully', (done) => {\n    const single = Single.just('Hello').lift(observer => ({ onSubscribe: observer.onSubscribe, onSuccess: observer.onSuccess }));\n\n    single.subscribe(\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/lift.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "describe144",
    "testId": 144,
    "memberof": "test/lift.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/lift.js~describe144",
    "access": "public",
    "description": "#lift",
    "lineNumber": 8
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/lift.js~describe144",
    "testDepth": 1,
    "static": true,
    "longname": "test/lift.js~describe144.it145",
    "access": "public",
    "description": "should return the same instance if no function is provided",
    "lineNumber": 12
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/lift.js~describe144",
    "testDepth": 1,
    "static": true,
    "longname": "test/lift.js~describe144.it146",
    "access": "public",
    "description": "should signal an error if the lift operator returned a non-Observer",
    "lineNumber": 21
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "test/lift.js~describe144",
    "testDepth": 1,
    "static": true,
    "longname": "test/lift.js~describe144.it147",
    "access": "public",
    "description": "should subscribe successfully",
    "lineNumber": 32
  },
  {
    "__docId__": 439,
    "kind": "testFile",
    "name": "test/map.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#map', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').map(x => `${x} World`);\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should succeed with the given value.', (done) => {\n    const single = Single.just('Hello').map(x => `${x} World`);\n\n    single.subscribe(\n      x => (x === 'Hello World' ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the mapper throws an error', (done) => {\n    const single = Single.just('Hello').map(() => {\n      throw new Error('Expected');\n    });\n\n    single.subscribe(\n      () => done(false),\n      e => (e instanceof Error ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the mapper throws an error', (done) => {\n    const single = Single.just('Hello').map(() => undefined);\n\n    single.subscribe(\n      () => done(false),\n      e => (e instanceof Error ? done() : done(false)),\n    );\n  });\n  /**\n   *\n   */\n  it('should retain the value if no function is supplied.', (done) => {\n    const single = Single.just('Hello').map();\n\n    single.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      done,\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 440,
    "kind": "test",
    "name": "describe148",
    "testId": 148,
    "memberof": "test/map.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/map.js~describe148",
    "access": "public",
    "description": "#map",
    "lineNumber": 8
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/map.js~describe148",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.js~describe148.it149",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/map.js~describe148",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.js~describe148.it150",
    "access": "public",
    "description": "should succeed with the given value.",
    "lineNumber": 19
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "test/map.js~describe148",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.js~describe148.it151",
    "access": "public",
    "description": "should signal an error if the mapper throws an error",
    "lineNumber": 30
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/map.js~describe148",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.js~describe148.it152",
    "access": "public",
    "description": "should signal an error if the mapper throws an error",
    "lineNumber": 43
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/map.js~describe148",
    "testDepth": 1,
    "static": true,
    "longname": "test/map.js~describe148.it153",
    "access": "public",
    "description": "should retain the value if no function is supplied.",
    "lineNumber": 54
  },
  {
    "__docId__": 446,
    "kind": "testFile",
    "name": "test/merge.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#merge', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.merge(Single.just(Single.just('Hello')));\n\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should signal error if no source is provided', (done) => {\n    const single = Single.merge();\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if source emitted a non-Single', (done) => {\n    const single = Single.merge(Single.just('Hello'));\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success of the signaled Single', (done) => {\n    const single = Single.merge(Single.just(Single.just('Hello')));\n\n    single.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/merge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "describe154",
    "testId": 154,
    "memberof": "test/merge.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/merge.js~describe154",
    "access": "public",
    "description": "#merge",
    "lineNumber": 8
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/merge.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe154.it155",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "test/merge.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe154.it156",
    "access": "public",
    "description": "should signal error if no source is provided",
    "lineNumber": 20
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/merge.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe154.it157",
    "access": "public",
    "description": "should signal error if source emitted a non-Single",
    "lineNumber": 31
  },
  {
    "__docId__": 451,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/merge.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/merge.js~describe154.it158",
    "access": "public",
    "description": "should signal success of the signaled Single",
    "lineNumber": 42
  },
  {
    "__docId__": 452,
    "kind": "testFile",
    "name": "test/never.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#never', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.never();\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should not signal.', () => {\n    const single = Single.never();\n    single.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/never.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "describe159",
    "testId": 159,
    "memberof": "test/never.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/never.js~describe159",
    "access": "public",
    "description": "#never",
    "lineNumber": 8
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "test/never.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/never.js~describe159.it160",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 455,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/never.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/never.js~describe159.it161",
    "access": "public",
    "description": "should not signal.",
    "lineNumber": 19
  },
  {
    "__docId__": 456,
    "kind": "testFile",
    "name": "test/observeOn.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Scheduler from 'rx-scheduler';\nimport Single from '../src/single';\n\ndescribe('#observeOn', () => {\n  it('should return a Single', () => {\n    assert(Single.just('Hello World').observeOn(Scheduler.current));\n  });\n  it('should be synchronous with non-Scheduler', (done) => {\n    let flag = false;\n\n    const single = Single.just('Hello World').observeOn();\n\n    single.subscribe(\n      () => { flag = true; },\n      done,\n    );\n\n    if (flag) {\n      done();\n    } else {\n      done(false);\n    }\n  });\n  it('should be synchronous with Scheduler.current', (done) => {\n    let flag = false;\n\n    const single = Single.just('Hello World').observeOn(Scheduler.current);\n\n    single.subscribe(\n      () => { flag = true; },\n      done,\n    );\n\n    if (flag) {\n      done();\n    } else {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.tick', (done) => {\n    let flag = false;\n\n    const single = Single.just('Hello World').observeOn(Scheduler.tick);\n\n    single.subscribe(\n      () => { flag = true; },\n      done,\n    );\n\n    process.nextTick(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.async', (done) => {\n    let flag = false;\n\n    const single = Single.just('Hello World').observeOn(Scheduler.async);\n\n    single.subscribe(\n      () => { flag = true; },\n      done,\n    );\n\n    Promise.resolve().then(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.immediate', (done) => {\n    let flag = false;\n\n    const single = Single.just('Hello World').observeOn(Scheduler.immediate);\n\n    single.subscribe(\n      () => { flag = true; },\n      done,\n    );\n\n    setImmediate(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.timeout', (done) => {\n    let flag = false;\n\n    const single = Single.error(new Error('Hello World')).observeOn(Scheduler.timeout);\n\n    single.subscribe(\n      done,\n      () => { flag = true; },\n    );\n\n    setTimeout(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/observeOn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "test/observeOn.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/observeOn.js~describe162",
    "access": "public",
    "description": "#observeOn",
    "lineNumber": 6
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/observeOn.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe162.it163",
    "access": "public",
    "description": "should return a Single",
    "lineNumber": 7
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/observeOn.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe162.it164",
    "access": "public",
    "description": "should be synchronous with non-Scheduler",
    "lineNumber": 10
  },
  {
    "__docId__": 460,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/observeOn.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe162.it165",
    "access": "public",
    "description": "should be synchronous with Scheduler.current",
    "lineNumber": 26
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "test/observeOn.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe162.it166",
    "access": "public",
    "description": "should be asynchronous with Scheduler.tick",
    "lineNumber": 42
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/observeOn.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe162.it167",
    "access": "public",
    "description": "should be asynchronous with Scheduler.async",
    "lineNumber": 64
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/observeOn.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe162.it168",
    "access": "public",
    "description": "should be asynchronous with Scheduler.immediate",
    "lineNumber": 86
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "test/observeOn.js~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "test/observeOn.js~describe162.it169",
    "access": "public",
    "description": "should be asynchronous with Scheduler.timeout",
    "lineNumber": 108
  },
  {
    "__docId__": 465,
    "kind": "testFile",
    "name": "test/onErrorResumeNext.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#onErrorResumeNext', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.error(new Error('Hello')).onErrorResumeNext(Single.just('World'));\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if parameter passed is not a Single or a function', () => {\n    const source = Single.error(new Error('Hello'));\n    const single = source.onErrorResumeNext();\n    assert(single === source);\n  });\n  /**\n   *\n   */\n  it('should subscribe to the given Single', (done) => {\n    const single = Single.error(new Error('Hello')).onErrorResumeNext(Single.just('World'));\n    single.subscribe(\n      () => done(),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should subscribe to the given Single-producing Function', (done) => {\n    const single = Single.error(new Error('Hello')).onErrorResumeNext(() => Single.just('World'));\n    single.subscribe(\n      () => done(),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function throws error.', (done) => {\n    const single = Single.error(new Error('Hello')).onErrorResumeNext(() => { throw new Error('Ooops'); });\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function returns non-Single.', (done) => {\n    const single = Single.error(new Error('Hello')).onErrorResumeNext(() => {});\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/onErrorResumeNext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "describe170",
    "testId": 170,
    "memberof": "test/onErrorResumeNext.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe170",
    "access": "public",
    "description": "#onErrorResumeNext",
    "lineNumber": 8
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/onErrorResumeNext.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe170.it171",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "test/onErrorResumeNext.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe170.it172",
    "access": "public",
    "description": "should return the same instance if parameter passed is not a Single or a function",
    "lineNumber": 19
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/onErrorResumeNext.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe170.it173",
    "access": "public",
    "description": "should subscribe to the given Single",
    "lineNumber": 27
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "test/onErrorResumeNext.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe170.it174",
    "access": "public",
    "description": "should subscribe to the given Single-producing Function",
    "lineNumber": 37
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "test/onErrorResumeNext.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe170.it175",
    "access": "public",
    "description": "should emit error if provide function throws error.",
    "lineNumber": 47
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/onErrorResumeNext.js~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorResumeNext.js~describe170.it176",
    "access": "public",
    "description": "should emit error if provide function returns non-Single.",
    "lineNumber": 57
  },
  {
    "__docId__": 473,
    "kind": "testFile",
    "name": "test/onErrorReturn.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#onErrorReturn', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.error(new Error('Hello')).onErrorReturn(() => 'World');\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if parameter passed is not a Single or a function', () => {\n    const source = Single.error(new Error('Hello'));\n    const single = source.onErrorReturn();\n    assert(single === source);\n  });\n  /**\n   *\n   */\n  it('should emit the supplied item by the given function in case of error', (done) => {\n    const single = Single.error(new Error('Hello')).onErrorReturn(() => 'World');\n\n    single.subscribe(\n      () => done(),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function throws error.', (done) => {\n    const single = Single.error(new Error('Hello')).onErrorReturn(() => { throw new Error('Ooops'); });\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should emit error if provide function returns undefined.', (done) => {\n    const single = Single.error(new Error('Hello')).onErrorReturn(() => {});\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/onErrorReturn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "describe177",
    "testId": 177,
    "memberof": "test/onErrorReturn.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/onErrorReturn.js~describe177",
    "access": "public",
    "description": "#onErrorReturn",
    "lineNumber": 8
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/onErrorReturn.js~describe177",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturn.js~describe177.it178",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/onErrorReturn.js~describe177",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturn.js~describe177.it179",
    "access": "public",
    "description": "should return the same instance if parameter passed is not a Single or a function",
    "lineNumber": 19
  },
  {
    "__docId__": 477,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/onErrorReturn.js~describe177",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturn.js~describe177.it180",
    "access": "public",
    "description": "should emit the supplied item by the given function in case of error",
    "lineNumber": 27
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "test/onErrorReturn.js~describe177",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturn.js~describe177.it181",
    "access": "public",
    "description": "should emit error if provide function throws error.",
    "lineNumber": 38
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/onErrorReturn.js~describe177",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturn.js~describe177.it182",
    "access": "public",
    "description": "should emit error if provide function returns undefined.",
    "lineNumber": 48
  },
  {
    "__docId__": 480,
    "kind": "testFile",
    "name": "test/onErrorReturnItem.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#onErrorReturnItem', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.error(new Error('Hello')).onErrorReturnItem('World');\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if parameter passed is not a Single or a function', () => {\n    const source = Single.error(new Error('Hello'));\n    const single = source.onErrorReturnItem();\n    assert(single === source);\n  });\n  /**\n   *\n   */\n  it('should emit the given item in case of error', (done) => {\n    const single = Single.error(new Error('Hello')).onErrorReturnItem('World');\n\n    single.subscribe(\n      x => (x === 'World' ? done() : done(false)),\n      done,\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/onErrorReturnItem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 481,
    "kind": "test",
    "name": "describe183",
    "testId": 183,
    "memberof": "test/onErrorReturnItem.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/onErrorReturnItem.js~describe183",
    "access": "public",
    "description": "#onErrorReturnItem",
    "lineNumber": 8
  },
  {
    "__docId__": 482,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/onErrorReturnItem.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturnItem.js~describe183.it184",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "test/onErrorReturnItem.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturnItem.js~describe183.it185",
    "access": "public",
    "description": "should return the same instance if parameter passed is not a Single or a function",
    "lineNumber": 19
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/onErrorReturnItem.js~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "test/onErrorReturnItem.js~describe183.it186",
    "access": "public",
    "description": "should emit the given item in case of error",
    "lineNumber": 27
  },
  {
    "__docId__": 485,
    "kind": "testFile",
    "name": "test/retry.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#retry', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.error(new Error('Hello')).retry(x => x === 3);\n\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should signal a success if no error', (done) => {\n    const single = Single.just('Hello').retry(x => x === 3);\n\n    single.subscribe(\n      () => done(),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should retry if there is an error and if it passes the predicate', (done) => {\n    let retried;\n    const single = Single.error(new Error('Hello')).retry((x) => {\n      if (x === 2) {\n        retried = true;\n      }\n      return x < 3;\n    });\n\n    single.subscribe(\n      () => done(false),\n      () => retried && done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if predicate is false', (done) => {\n    const single = Single.error(new Error('Hello')).retry(x => x === 3);\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/retry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "describe187",
    "testId": 187,
    "memberof": "test/retry.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/retry.js~describe187",
    "access": "public",
    "description": "#retry",
    "lineNumber": 8
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/retry.js~describe187",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe187.it188",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 488,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "test/retry.js~describe187",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe187.it189",
    "access": "public",
    "description": "should signal a success if no error",
    "lineNumber": 20
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/retry.js~describe187",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe187.it190",
    "access": "public",
    "description": "should retry if there is an error and if it passes the predicate",
    "lineNumber": 31
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/retry.js~describe187",
    "testDepth": 1,
    "static": true,
    "longname": "test/retry.js~describe187.it191",
    "access": "public",
    "description": "should signal an error if predicate is false",
    "lineNumber": 48
  },
  {
    "__docId__": 491,
    "kind": "testFile",
    "name": "test/subscribeOn.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Scheduler from 'rx-scheduler';\nimport Single from '../src/single';\n\ndescribe('#subscribeOn', () => {\n  it('should return a Single', () => {\n    assert(Single.just('Hello World').subscribeOn(Scheduler.current));\n  });\n  it('should be synchronous with non-Scheduler', (done) => {\n    let flag = false;\n\n    const single = Single.just('Hello World').subscribeOn();\n\n    single.subscribe(\n      () => { flag = true; },\n      done,\n    );\n\n    if (flag) {\n      done();\n    } else {\n      done(false);\n    }\n  });\n  it('should be synchronous with Scheduler.current', (done) => {\n    let flag = false;\n\n    const single = Single.just('Hello World').subscribeOn(Scheduler.current);\n\n    single.subscribe(\n      () => { flag = true; },\n      done,\n    );\n\n    if (flag) {\n      done();\n    } else {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.tick', (done) => {\n    let flag = false;\n\n    const single = Single.just('Hello World').subscribeOn(Scheduler.tick);\n\n    single.subscribe(\n      () => { flag = true; },\n      done,\n    );\n\n    process.nextTick(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.async', (done) => {\n    let flag = false;\n\n    const single = Single.just('Hello World').subscribeOn(Scheduler.async);\n\n    single.subscribe(\n      () => { flag = true; },\n      done,\n    );\n\n    Promise.resolve().then(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.immediate', (done) => {\n    let flag = false;\n\n    const single = Single.just('Hello World').subscribeOn(Scheduler.immediate);\n\n    single.subscribe(\n      () => { flag = true; },\n      done,\n    );\n\n    setImmediate(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n  it('should be asynchronous with Scheduler.timeout', (done) => {\n    let flag = false;\n\n    const single = Single.error(new Error('Hello World')).subscribeOn(Scheduler.timeout);\n\n    single.subscribe(\n      done,\n      () => { flag = true; },\n    );\n\n    setTimeout(() => {\n      if (flag) {\n        done();\n      } else {\n        done(false);\n      }\n    });\n\n    if (flag) {\n      done(false);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/subscribeOn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/subscribeOn.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/subscribeOn.js~describe192",
    "access": "public",
    "description": "#subscribeOn",
    "lineNumber": 6
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "test/subscribeOn.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe192.it193",
    "access": "public",
    "description": "should return a Single",
    "lineNumber": 7
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "test/subscribeOn.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe192.it194",
    "access": "public",
    "description": "should be synchronous with non-Scheduler",
    "lineNumber": 10
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/subscribeOn.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe192.it195",
    "access": "public",
    "description": "should be synchronous with Scheduler.current",
    "lineNumber": 26
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "it196",
    "testId": 196,
    "memberof": "test/subscribeOn.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe192.it196",
    "access": "public",
    "description": "should be asynchronous with Scheduler.tick",
    "lineNumber": 42
  },
  {
    "__docId__": 497,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/subscribeOn.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe192.it197",
    "access": "public",
    "description": "should be asynchronous with Scheduler.async",
    "lineNumber": 64
  },
  {
    "__docId__": 498,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "test/subscribeOn.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe192.it198",
    "access": "public",
    "description": "should be asynchronous with Scheduler.immediate",
    "lineNumber": 86
  },
  {
    "__docId__": 499,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "test/subscribeOn.js~describe192",
    "testDepth": 1,
    "static": true,
    "longname": "test/subscribeOn.js~describe192.it199",
    "access": "public",
    "description": "should be asynchronous with Scheduler.timeout",
    "lineNumber": 108
  },
  {
    "__docId__": 500,
    "kind": "testFile",
    "name": "test/takeUntil.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#takeUntil', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').takeUntil(Single.timer(100));\n\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if no other Single is provided', () => {\n    const source = Single.just('Hello');\n    const single = source.takeUntil();\n\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should signal success if other Single has not emitted a success signal', (done) => {\n    const single = Single.just('Hello').takeUntil(Single.timer(100));\n\n    single.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success if other Single has not emitted an error signal', (done) => {\n    const single = Single.just('Hello').takeUntil(Single.error(new Error('World')).delay(100));\n\n    single.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Single has emitted a success signal', (done) => {\n    const single = Single.just('Hello').delay(100).takeUntil(Single.just('World'));\n\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Single has emitted an error signal', (done) => {\n    const single = Single.just('Hello').delay(100).takeUntil(Single.error(new Error('World')));\n\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if source signals error, nonetheless', (done) => {\n    const single = Single.error(new Error('Hello')).takeUntil(Single.timer(100));\n\n    single.subscribe(\n      done,\n      () => done(),\n    );\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/takeUntil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "describe200",
    "testId": 200,
    "memberof": "test/takeUntil.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/takeUntil.js~describe200",
    "access": "public",
    "description": "#takeUntil",
    "lineNumber": 8
  },
  {
    "__docId__": 502,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "test/takeUntil.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe200.it201",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "test/takeUntil.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe200.it202",
    "access": "public",
    "description": "should return the same instance if no other Single is provided",
    "lineNumber": 20
  },
  {
    "__docId__": 504,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "test/takeUntil.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe200.it203",
    "access": "public",
    "description": "should signal success if other Single has not emitted a success signal",
    "lineNumber": 29
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "it204",
    "testId": 204,
    "memberof": "test/takeUntil.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe200.it204",
    "access": "public",
    "description": "should signal success if other Single has not emitted an error signal",
    "lineNumber": 40
  },
  {
    "__docId__": 506,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "test/takeUntil.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe200.it205",
    "access": "public",
    "description": "should signal error if other Single has emitted a success signal",
    "lineNumber": 51
  },
  {
    "__docId__": 507,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "test/takeUntil.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe200.it206",
    "access": "public",
    "description": "should signal error if other Single has emitted an error signal",
    "lineNumber": 62
  },
  {
    "__docId__": 508,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "test/takeUntil.js~describe200",
    "testDepth": 1,
    "static": true,
    "longname": "test/takeUntil.js~describe200.it207",
    "access": "public",
    "description": "should signal error if source signals error, nonetheless",
    "lineNumber": 73
  },
  {
    "__docId__": 509,
    "kind": "testFile",
    "name": "test/then.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#then', () => {\n  /**\n   *\n   */\n  it('should create a Promise', () => {\n    const single = Single.just('Hello').then(x => x, x => x);\n    assert(single instanceof Promise);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/then.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "describe208",
    "testId": 208,
    "memberof": "test/then.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/then.js~describe208",
    "access": "public",
    "description": "#then",
    "lineNumber": 8
  },
  {
    "__docId__": 511,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "test/then.js~describe208",
    "testDepth": 1,
    "static": true,
    "longname": "test/then.js~describe208.it209",
    "access": "public",
    "description": "should create a Promise",
    "lineNumber": 12
  },
  {
    "__docId__": 512,
    "kind": "testFile",
    "name": "test/timeout.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#timeout', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').timeout(100);\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the amount is not a number.', () => {\n    const source = Single.just('Hello');\n    const single = source.timeout();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should signal success with the given value.', (done) => {\n    const single = Single.just('Hello').timeout(100);\n    single.subscribe(\n      x => (x === 'Hello' ? done() : done(false)),\n      x => done(x),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error with the given value.', (done) => {\n    const single = Single.error('Hello').timeout(100);\n    single.subscribe(\n      x => done(x),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if the Single does not emit item within the given timeout.', (done) => {\n    const single = Single.timer(200).timeout(100);\n    single.subscribe(\n      x => done(x),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Single.timer(200).timeout(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n  /**\n   *\n   */\n  it('should not signal error if cancelled.', (done) => {\n    const source = Single.error(new Error('Hello')).delay(200).timeout(100);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/timeout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 513,
    "kind": "test",
    "name": "describe210",
    "testId": 210,
    "memberof": "test/timeout.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/timeout.js~describe210",
    "access": "public",
    "description": "#timeout",
    "lineNumber": 8
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "test/timeout.js~describe210",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe210.it211",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "it212",
    "testId": 212,
    "memberof": "test/timeout.js~describe210",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe210.it212",
    "access": "public",
    "description": "should return the same instance if the amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 516,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "test/timeout.js~describe210",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe210.it213",
    "access": "public",
    "description": "should signal success with the given value.",
    "lineNumber": 27
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "test/timeout.js~describe210",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe210.it214",
    "access": "public",
    "description": "should signal error with the given value.",
    "lineNumber": 37
  },
  {
    "__docId__": 518,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "test/timeout.js~describe210",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe210.it215",
    "access": "public",
    "description": "should signal error if the Single does not emit item within the given timeout.",
    "lineNumber": 47
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "it216",
    "testId": 216,
    "memberof": "test/timeout.js~describe210",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe210.it216",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 57
  },
  {
    "__docId__": 520,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "test/timeout.js~describe210",
    "testDepth": 1,
    "static": true,
    "longname": "test/timeout.js~describe210.it217",
    "access": "public",
    "description": "should not signal error if cancelled.",
    "lineNumber": 72
  },
  {
    "__docId__": 521,
    "kind": "testFile",
    "name": "test/timer.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#timer', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.timer(100);\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should signal error if amount is not a number.', (done) => {\n    const single = Single.timer();\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success 0', (done) => {\n    const single = Single.timer(100);\n    single.subscribe(\n      x => (x === 0 ? done() : done(false)),\n      () => done(false),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const single = Single.timer(100);\n    const controller = single.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 522,
    "kind": "test",
    "name": "describe218",
    "testId": 218,
    "memberof": "test/timer.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/timer.js~describe218",
    "access": "public",
    "description": "#timer",
    "lineNumber": 8
  },
  {
    "__docId__": 523,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "test/timer.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe218.it219",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 524,
    "kind": "test",
    "name": "it220",
    "testId": 220,
    "memberof": "test/timer.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe218.it220",
    "access": "public",
    "description": "should signal error if amount is not a number.",
    "lineNumber": 19
  },
  {
    "__docId__": 525,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "test/timer.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe218.it221",
    "access": "public",
    "description": "should signal success 0",
    "lineNumber": 30
  },
  {
    "__docId__": 526,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "test/timer.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe218.it222",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 40
  },
  {
    "__docId__": 527,
    "kind": "testFile",
    "name": "test/toPromise.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#toPromise', () => {\n  /**\n   *\n   */\n  it('should create a Promise', () => {\n    const single = Single.just('Hello').toPromise();\n    assert(single instanceof Promise);\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/toPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 528,
    "kind": "test",
    "name": "describe223",
    "testId": 223,
    "memberof": "test/toPromise.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/toPromise.js~describe223",
    "access": "public",
    "description": "#toPromise",
    "lineNumber": 8
  },
  {
    "__docId__": 529,
    "kind": "test",
    "name": "it224",
    "testId": 224,
    "memberof": "test/toPromise.js~describe223",
    "testDepth": 1,
    "static": true,
    "longname": "test/toPromise.js~describe223.it224",
    "access": "public",
    "description": "should create a Promise",
    "lineNumber": 12
  },
  {
    "__docId__": 530,
    "kind": "testFile",
    "name": "test/zipArray.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n*\n*/\ndescribe('#zipArray', () => {\n  /**\n  *\n  */\n  it('should create a Single', () => {\n    const single = Single.zipArray([Single.just('Hello'), Single.just('World')]);\n    assert(single instanceof Single);\n  });\n  /**\n  *\n  */\n  it('should signal error if sources is not iterable.', (done) => {\n    const single = Single.zipArray();\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n  *\n  */\n  it('should signal error if source is empty iterable.', (done) => {\n    const single = Single.zipArray([]);\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the zipper throws an error', (done) => {\n    const single = Single.zipArray([Single.just('Hello'), Single.just('World')], () => undefined);\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n  *\n  */\n  it('should signal success with an array (no zipper function).', (done) => {\n    const single = Single.zipArray([Single.just('Hello').delay(100), Single.just('World')]);\n    single.subscribe(\n      x => (x instanceof Array ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n  *\n  */\n  it('should signal success with an array with the correct values (no zipper function).', (done) => {\n    const single = Single.zipArray([Single.just('Hello'), Single.just('World')]);\n    single.subscribe(\n      x => (x[0] === 'Hello' && x[1] === 'World' ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n  *\n  */\n  it('should signal error if one of the sources is a non-Single.', (done) => {\n    const source = Single.zipArray(['Hello', Single.just('World')]);\n    source.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n  *\n  */\n  it('should signal error if a source throws error.', (done) => {\n    const source = Single.zipArray([Single.error(new Error('Hello')), Single.just('World')]);\n    source.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n  *\n  */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Single.zipArray([Single.just('Hello').delay(100), Single.just('World')]);\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/zipArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 531,
    "kind": "test",
    "name": "describe225",
    "testId": 225,
    "memberof": "test/zipArray.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/zipArray.js~describe225",
    "access": "public",
    "description": "#zipArray",
    "lineNumber": 8
  },
  {
    "__docId__": 532,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "test/zipArray.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipArray.js~describe225.it226",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 533,
    "kind": "test",
    "name": "it227",
    "testId": 227,
    "memberof": "test/zipArray.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipArray.js~describe225.it227",
    "access": "public",
    "description": "should signal error if sources is not iterable.",
    "lineNumber": 19
  },
  {
    "__docId__": 534,
    "kind": "test",
    "name": "it228",
    "testId": 228,
    "memberof": "test/zipArray.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipArray.js~describe225.it228",
    "access": "public",
    "description": "should signal error if source is empty iterable.",
    "lineNumber": 29
  },
  {
    "__docId__": 535,
    "kind": "test",
    "name": "it229",
    "testId": 229,
    "memberof": "test/zipArray.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipArray.js~describe225.it229",
    "access": "public",
    "description": "should signal an error if the zipper throws an error",
    "lineNumber": 39
  },
  {
    "__docId__": 536,
    "kind": "test",
    "name": "it230",
    "testId": 230,
    "memberof": "test/zipArray.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipArray.js~describe225.it230",
    "access": "public",
    "description": "should signal success with an array (no zipper function).",
    "lineNumber": 50
  },
  {
    "__docId__": 537,
    "kind": "test",
    "name": "it231",
    "testId": 231,
    "memberof": "test/zipArray.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipArray.js~describe225.it231",
    "access": "public",
    "description": "should signal success with an array with the correct values (no zipper function).",
    "lineNumber": 60
  },
  {
    "__docId__": 538,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "test/zipArray.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipArray.js~describe225.it232",
    "access": "public",
    "description": "should signal error if one of the sources is a non-Single.",
    "lineNumber": 70
  },
  {
    "__docId__": 539,
    "kind": "test",
    "name": "it233",
    "testId": 233,
    "memberof": "test/zipArray.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipArray.js~describe225.it233",
    "access": "public",
    "description": "should signal error if a source throws error.",
    "lineNumber": 80
  },
  {
    "__docId__": 540,
    "kind": "test",
    "name": "it234",
    "testId": 234,
    "memberof": "test/zipArray.js~describe225",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipArray.js~describe225.it234",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 90
  },
  {
    "__docId__": 541,
    "kind": "testFile",
    "name": "test/zipWith.js",
    "content": "/* eslint-disable no-undef */\nimport assert from 'assert';\nimport Single from '../src/single';\n\n/**\n *\n */\ndescribe('#zipWith', () => {\n  /**\n   *\n   */\n  it('should create a Single', () => {\n    const single = Single.just('Hello').zipWith(Single.just('World'));\n    assert(single instanceof Single);\n  });\n  /**\n   *\n   */\n  it('should return the same instance if the other parameter is non-Single', () => {\n    const source = Single.just('Hello');\n    const single = source.zipWith();\n    assert(source === single);\n  });\n  /**\n   *\n   */\n  it('should signal an error if the zipper returns undefined', (done) => {\n    const single = Single.just('Hello').zipWith(Single.just('World'), () => undefined);\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal an error if the zipper returns undefined', (done) => {\n    const single = Single.just('Hello').delay(100).zipWith(Single.just('World'), () => undefined);\n\n    single.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success with an array (no zipper function).', (done) => {\n    const single = Single.just('Hello').delay(100).zipWith(Single.just('World'));\n    single.subscribe(\n      x => (x instanceof Array ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal success with an array with the correct values (no zipper function).', (done) => {\n    const single = Single.just('Hello').zipWith(Single.just('World'));\n    single.subscribe(\n      x => (x[0] === 'Hello' && x[1] === 'World' ? done() : done(false)),\n      done,\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if source throws error.', (done) => {\n    const source = Single.error(new Error('Hello')).zipWith(Single.just('World'));\n    source.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should signal error if other Single throws error.', (done) => {\n    const source = Single.just('Hello').zipWith(Single.error('World'));\n    source.subscribe(\n      () => done(false),\n      () => done(),\n    );\n  });\n  /**\n   *\n   */\n  it('should not signal success if cancelled.', (done) => {\n    const source = Single.just('Hello').delay(100).zipWith(Single.just('World'));\n    const controller = source.subscribe(\n      () => done(false),\n      () => done(false),\n    );\n\n    controller.cancel();\n    if (controller.cancelled) {\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/home/snd-admin/Desktop/Repos/rx-single/test/zipWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 542,
    "kind": "test",
    "name": "describe235",
    "testId": 235,
    "memberof": "test/zipWith.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/zipWith.js~describe235",
    "access": "public",
    "description": "#zipWith",
    "lineNumber": 8
  },
  {
    "__docId__": 543,
    "kind": "test",
    "name": "it236",
    "testId": 236,
    "memberof": "test/zipWith.js~describe235",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe235.it236",
    "access": "public",
    "description": "should create a Single",
    "lineNumber": 12
  },
  {
    "__docId__": 544,
    "kind": "test",
    "name": "it237",
    "testId": 237,
    "memberof": "test/zipWith.js~describe235",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe235.it237",
    "access": "public",
    "description": "should return the same instance if the other parameter is non-Single",
    "lineNumber": 19
  },
  {
    "__docId__": 545,
    "kind": "test",
    "name": "it238",
    "testId": 238,
    "memberof": "test/zipWith.js~describe235",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe235.it238",
    "access": "public",
    "description": "should signal an error if the zipper returns undefined",
    "lineNumber": 27
  },
  {
    "__docId__": 546,
    "kind": "test",
    "name": "it239",
    "testId": 239,
    "memberof": "test/zipWith.js~describe235",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe235.it239",
    "access": "public",
    "description": "should signal an error if the zipper returns undefined",
    "lineNumber": 38
  },
  {
    "__docId__": 547,
    "kind": "test",
    "name": "it240",
    "testId": 240,
    "memberof": "test/zipWith.js~describe235",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe235.it240",
    "access": "public",
    "description": "should signal success with an array (no zipper function).",
    "lineNumber": 49
  },
  {
    "__docId__": 548,
    "kind": "test",
    "name": "it241",
    "testId": 241,
    "memberof": "test/zipWith.js~describe235",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe235.it241",
    "access": "public",
    "description": "should signal success with an array with the correct values (no zipper function).",
    "lineNumber": 59
  },
  {
    "__docId__": 549,
    "kind": "test",
    "name": "it242",
    "testId": 242,
    "memberof": "test/zipWith.js~describe235",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe235.it242",
    "access": "public",
    "description": "should signal error if source throws error.",
    "lineNumber": 69
  },
  {
    "__docId__": 550,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "test/zipWith.js~describe235",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe235.it243",
    "access": "public",
    "description": "should signal error if other Single throws error.",
    "lineNumber": 79
  },
  {
    "__docId__": 551,
    "kind": "test",
    "name": "it244",
    "testId": 244,
    "memberof": "test/zipWith.js~describe235",
    "testDepth": 1,
    "static": true,
    "longname": "test/zipWith.js~describe235.it244",
    "access": "public",
    "description": "should not signal success if cancelled.",
    "lineNumber": 89
  }
]